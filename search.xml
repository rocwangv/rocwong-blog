<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>百度前端（内部财务方向）线下测试题分析20200720</title>
      <link href="/2020/08/01/baidu-fe-interview/"/>
      <url>/2020/08/01/baidu-fe-interview/</url>
      
        <content type="html"><![CDATA[<p>在这次找工作的过程中，百度整体的流程还是比较规范的，虽然因为第一次去百度大厦的时候被HR告知一面面试官因为会议原因要临时取消面试，改约其他时间。但是之后来到和所有的面试官聊天的过程中，还是感受到了大厂范儿。</p> <a id="more"></a><p>相较于其他公司喜欢问原理、问机制，百度的几面中更关注的是你在工作中是如何运用你所掌握的框架知识的，工作中是如何平衡业务和技术的，会通过一些工作中很实际的问题来一层层的深入讨论，这点我觉得非常好。</p><p>下面主要看一下百度线下测试题部分，看看百度更关注一个前端的基本素养是什么。</p><h2 id="样式相关"><a href="#样式相关" class="headerlink" title="样式相关"></a>样式相关</h2><h3 id="1-1-假设有如下的-DOM-结构-amp-样式-⼩提示-可以先往下看-然后再回来看这⼀⼤坨-css"><a href="#1-1-假设有如下的-DOM-结构-amp-样式-⼩提示-可以先往下看-然后再回来看这⼀⼤坨-css" class="headerlink" title="1.1 假设有如下的 DOM 结构 &amp; 样式 ( ⼩提示, 可以先往下看, 然后再回来看这⼀⼤坨 css )"></a>1.1 假设有如下的 DOM 结构 &amp; 样式 ( ⼩提示, 可以先往下看, 然后再回来看这⼀⼤坨 css )</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">  background: #fff !important;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">.root &#123;</span></span><br><span class="line"><span class="undefined">  border: 3px #000 solid;</span></span><br><span class="line"><span class="undefined">  width: 200px;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">.root div &#123;</span></span><br><span class="line"><span class="undefined">  box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">  border: 1px #000 solid;</span></span><br><span class="line"><span class="undefined">  background-color: #fff;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">.div-a &#123;</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="undefined">  z-index: 100;</span></span><br><span class="line"><span class="undefined">  top: 50px;</span></span><br><span class="line"><span class="undefined">  width: 200px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">.div-b &#123;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  z-index: 300;</span></span><br><span class="line"><span class="undefined">  top: 80px;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 50px;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">.div-c &#123;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  z-index: 200;</span></span><br><span class="line"><span class="undefined">  width: 50px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-a"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div-c"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>请问以上 HTML ⽚段, 对应以下的哪⼀个渲染效果?</li><li>请简要分析⼀下你的推导思路?<ul><li>提示, 这个⼩问是必答的, 我们需要参考你的实际推导依据</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/baidu/baidu-a.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/baidu/baidu-b.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/baidu/baidu-c.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/baidu/baidu-d.png" alt="img"></p><h3 id="作答"><a href="#作答" class="headerlink" title="作答"></a>作答</h3><p>选B。</p><p>⾸先，针对 root ⾼度，由于 root 下的元素只有 div-a 是 relative ，在⽂档流中；⼜因为所有 div 的盒模型是使⽤的标准盒模型，所以 root 的⾼度就等于 div-a 的⾼度 200px + 其上下边框的⾼度 3px*2 = 206px ;</p><p>然后， div-a 相对其正常位置向下偏移 50px (top: 50px) , div-b 是绝对定位，其定位是相对于⽗级 div-a 进⾏的，向下偏移 80px (top:80px) ，由此可以排除C、D选项。</p><p>A、B选项中的不同点在于针对 div-c 和 div-b 的 z-index ，由于 div-b 的⽗级元素 div-a 的 z-index 为 100px ，根据<strong>从⽗规则</strong>，所以 div-b 的 z-index 会被降级，⽽ div-c 的 z-index 值⼤于 div-a 的 z-index ，所以 div-c 在 div-b 的上⾯。故选B。</p><h3 id="1-2-简要介绍⼀下-你在项⽬中-如何管理各个元素的-z-index"><a href="#1-2-简要介绍⼀下-你在项⽬中-如何管理各个元素的-z-index" class="headerlink" title="1.2 简要介绍⼀下, 你在项⽬中, 如何管理各个元素的 z-index ?"></a>1.2 简要介绍⼀下, 你在项⽬中, 如何管理各个元素的 z-index ?</h3><ul><li>制定使⽤z-index的规范，⽐如 popover，modal，colorpicker 之类的组件，按照组件特性指定其层级的⾼低规范。另外业务布局中如果⽤到了z-index，尽量控制其层级为较低的规范内，如布局中的z-index尽量使⽤1xx，弹出层类的组件使⽤2xx等。</li><li>全局维护⼀个获取z-index的⽅法，每次调⽤时数值递增1</li></ul><h3 id="1-3-简要介绍⼀下-你如何在项⽬中管理样式的-如何避免不同⻚⾯-模块中-样式的互相影响"><a href="#1-3-简要介绍⼀下-你如何在项⽬中管理样式的-如何避免不同⻚⾯-模块中-样式的互相影响" class="headerlink" title="1.3 简要介绍⼀下, 你如何在项⽬中管理样式的? 如何避免不同⻚⾯ / 模块中, 样式的互相影响 ?"></a>1.3 简要介绍⼀下, 你如何在项⽬中管理样式的? 如何避免不同⻚⾯ / 模块中, 样式的互相影响 ?</h3><ul><li>⽬前项⽬中使⽤的是 BEM 规则，通过区分模块和元素来进⾏样式命名。</li><li>通过 css modules 将css进⾏分模块管理。</li></ul><h2 id="⽹络相关"><a href="#⽹络相关" class="headerlink" title="⽹络相关"></a>⽹络相关</h2><h3 id="2-1-什么是同源策略和跨域-解决跨域的⽅法有哪些"><a href="#2-1-什么是同源策略和跨域-解决跨域的⽅法有哪些" class="headerlink" title="2.1 : 什么是同源策略和跨域? 解决跨域的⽅法有哪些 ?"></a>2.1 : 什么是同源策略和跨域? 解决跨域的⽅法有哪些 ?</h3><p>同源策略是指协议、端⼝、域名相同，也就是在同⼀个域中。</p><p>⾮同源受到的限制有：cookie⽆法读取、dom⽆法获取、ajax请求⽆法发送。</p><p>跨域：两个不同域（协议、端⼝、域名不同）之间进⾏请求。</p><p>解决跨域的⽅法：</p><ul><li>JSONP，通过动态创建⼀个script标签，script标签的src属性是没有跨域的限制的。</li><li>cors，服务端在response时增加⼀些头信息：<ul><li>Access-Control-Allow-Origin: <a href="http://ip:port" target="_blank" rel="noopener">http://ip:port</a><br>必需项, 值为请求头中的 Origin 的值.</li><li>Access-Control-Allow-Credentials:true<br>可选项, 值为boolean, 表示是否允许浏览器发送cookie, 需要在服务器配置.</li><li>Access-Control-Allow-Methods:<br>必需项, 允许跨域请求的请求⽅式.</li></ul></li><li>Nginx做反向代理</li><li>开发环境跨域使⽤ webpack-dev-server 的 proxy</li></ul><h3 id="2-2-列举⼀下-HTTP-中关于-“资源缓存”-的头部指令-Head-有哪些-并简要介绍⼀下设置的规则"><a href="#2-2-列举⼀下-HTTP-中关于-“资源缓存”-的头部指令-Head-有哪些-并简要介绍⼀下设置的规则" class="headerlink" title="2.2 : 列举⼀下 HTTP 中关于 “资源缓存” 的头部指令 (Head) 有哪些 ? 并简要介绍⼀下设置的规则 ?"></a>2.2 : 列举⼀下 HTTP 中关于 “资源缓存” 的头部指令 (Head) 有哪些 ? 并简要介绍⼀下设置的规则 ?</h3><p>强制缓存</p><ul><li>Expires 指定⼀个缓存的过期时间，如果当次请求的资源在该过期时间之前，则命中缓存。缺点是<br>因为这个时间是⼀个绝对时间，所以当客户端本地时间被修改后，服务器与客户端时间偏差变⼤会<br>导致缓存混乱。</li><li>Cache-Control ⼀般通过 max-age 指定⼀个相对时间，单位是秒。优先级⾼于 Expires 。其他常⽤<br>的取值有：<ul><li>public 表示响应可以被任何对象缓存</li><li>private 表示只能被单个⽤户缓存，⾮共享的，不能被代理服务器缓存</li><li>no-cache 强制所有缓存了该响应的⽤户，在使⽤已缓存的数据钱，发送待验证器的请求到服务器。</li><li>No-store 禁⽌缓存</li></ul></li></ul><p>协商缓存</p><p>若未命中强缓存，则浏览器会将请求发送⾄服务器。服务器根据http头信息中的Last-Modify/If-ModifySince或Etag/If-None-Match来判断是否命中协商缓存。如果命中，则http返回码为304，浏览器从缓存<br>中加载资源。</p><ul><li>Last-Modify/If-Modify-Since 浏览器第⼀次请求⼀个资源的时候，服务器返回的header中会加上Last-Modify，Last-modify是⼀个时间标识该资源的最后修改时间，当浏览器再次请求该资源时，发送的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到IfModify-Since后，根据资源的最后修改时间判断是否命中缓存。</li><li>ETag/If-None-Match ETag可以保证每⼀个资源是唯⼀的，资源变化都会导致ETag变化。ETag值的变更则说明资源状态已经被修改。服务器根据浏览器上发送的If-None-Match值来判断是否命中缓存。</li></ul><h3 id="2-3-简要解释⼀下-301-302-304-的区别"><a href="#2-3-简要解释⼀下-301-302-304-的区别" class="headerlink" title="2.3 : 简要解释⼀下 301, 302, 304 的区别 ?"></a>2.3 : 简要解释⼀下 301, 302, 304 的区别 ?</h3><p>301 永久性重定向。该状态码表示请求的资源已经被分配了新的URI，并且以后使⽤资源现在所指的URI。并且根据请求的⽅法有不同的处理⽅式。</p><p>302 临时性重定向。该状态码表示请求的资源已被分配了新的URI，希望⽤户本次能使⽤新的URI访问。</p><p>304 该状态码表示客户端发送附带条件请求时，服务器端允许请求访问资源，但未满⾜条件的情况。</p><p>304状态码返回时，不包含任何响应的主题部分。附带条件的请求指的是采⽤GET⽅法的请求头中包含：If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任⼀⾸部。</p><h2 id="JS-amp-算法相关"><a href="#JS-amp-算法相关" class="headerlink" title="JS &amp; 算法相关"></a>JS &amp; 算法相关</h2><h3 id="3-1-请说明以下程序打印出什么结果-并简要说明推导依据"><a href="#3-1-请说明以下程序打印出什么结果-并简要说明推导依据" class="headerlink" title="3.1 : 请说明以下程序打印出什么结果, 并简要说明推导依据"></a>3.1 : 请说明以下程序打印出什么结果, 并简要说明推导依据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = [<span class="string">'1'</span>, <span class="string">'3'</span>, <span class="string">'10'</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// 这⾥会打印出什么呢? </span></span><br><span class="line"><span class="built_in">console</span>.log( result );</span><br></pre></td></tr></table></figure><h4 id="作答-1"><a href="#作答-1" class="headerlink" title="作答"></a>作答</h4><p>打印结果是[1, NaN, 2]<br>因为map的参数是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">current, index, arr</span>) </span>&#123; <span class="comment">// 当前元素值，当前元素索引值，数组本身</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>parseInt的参数是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(str, radix) <span class="comment">// 解析的字符串，⼏进制（若省略或为0，则以10进⾏解析，若⼩于2或者⼤于36，则返回NaN）</span></span><br></pre></td></tr></table></figure></p><p>所以该题展开来写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = [<span class="string">'1'</span>, <span class="string">'3'</span>, <span class="string">'10'</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">cur, index, arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(cur, index);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执⾏过程：</span></span><br><span class="line"><span class="comment">// parseInt('1', 0) -&gt; 1</span></span><br><span class="line"><span class="comment">// parseInt('3', 1) -&gt; NaN</span></span><br><span class="line"><span class="comment">// parseInt('10', 2) -&gt; 2</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-请修改以下代码-使最后能顺序打印出-1-2-3-4-5"><a href="#3-2-请修改以下代码-使最后能顺序打印出-1-2-3-4-5" class="headerlink" title="3.2 : 请修改以下代码, 使最后能顺序打印出 1, 2, 3, 4, 5"></a>3.2 : 请修改以下代码, 使最后能顺序打印出 1, 2, 3, 4, 5</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>要求: 每个数字之间, 间隔时间为 1秒（提示, 好好审题哟）</li></ul><h4 id="作答："><a href="#作答：" class="headerlink" title="作答："></a>作答：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(num)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> myPromise(i))</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><h3 id="3-3-按照如下要求实现-process-⽅法"><a href="#3-3-按照如下要求实现-process-⽅法" class="headerlink" title="3.3 : 按照如下要求实现 process ⽅法"></a>3.3 : 按照如下要求实现 process ⽅法</h3><ul><li>取得两个数组⾥相同的部分, 并去重</li><li>然后按照从⼩到⼤顺序排序, 最后结果返回 (注意, 是返回结果, 不是把结果打印出来)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayA = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> arrayB = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">arrayA, arrayB</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 这⾥是你实现代码的地⽅</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">应该返回 [1, 2]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">process(arrayA, arrayB);</span><br></pre></td></tr></table></figure><h4 id="作答部分"><a href="#作答部分" class="headerlink" title="作答部分"></a>作答部分</h4><p>第一种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">arrayA, arrayB</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arrayA</span><br><span class="line">    .filter(<span class="function">(<span class="params">v</span>) =&gt;</span> arrayB.includes(v))</span><br><span class="line">    .filter(<span class="function">(<span class="params">v, i, arr</span>) =&gt;</span> arr.indexOf(v) === i )</span><br><span class="line">    .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第⼆种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">arrayA, arrayB</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">  while(arrayA.length &gt; 0) &#123;</span><br><span class="line">    <span class="keyword">const</span> ele = arrayA.pop();</span><br><span class="line">    <span class="keyword">if</span> (arrayB.includes(ele)) &#123;</span><br><span class="line">      <span class="keyword">set</span>.add(ele);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return [...<span class="keyword">set</span>].sort((a,b) =&gt; a - b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-附加题-⼩明要上⼀个⻓阶梯-这个阶梯共有-N-个台阶-假设⼩明每次能上⼀个台阶-也能上两个台阶-请问⼩明上这个阶梯-总共有⼏种⾛法"><a href="#3-4-附加题-⼩明要上⼀个⻓阶梯-这个阶梯共有-N-个台阶-假设⼩明每次能上⼀个台阶-也能上两个台阶-请问⼩明上这个阶梯-总共有⼏种⾛法" class="headerlink" title="3.4 (附加题) : ⼩明要上⼀个⻓阶梯, 这个阶梯共有 N 个台阶, 假设⼩明每次能上⼀个台阶, 也能上两个台阶, 请问⼩明上这个阶梯, 总共有⼏种⾛法?"></a>3.4 (附加题) : ⼩明要上⼀个⻓阶梯, 这个阶梯共有 N 个台阶, 假设⼩明每次能上⼀个台阶, 也能上两个台阶, 请问⼩明上这个阶梯, 总共有⼏种⾛法?</h3><ul><li>你的⽬标是实现⼀个⽅法</li><li>输⼊是⼀个 “数字 n (有⼏个台阶)”</li><li>输出是⼀个 “数字 ( 代表总共有⼏种⾛法)”</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">例如,</span></span><br><span class="line"><span class="comment"> n = 1, return 1 (⽅法1: 1台阶)</span></span><br><span class="line"><span class="comment"> n = 2, return 2 (⽅法1: 1台阶&amp;1台阶, ⽅法2: 2台阶)</span></span><br><span class="line"><span class="comment"> n = 3, return 3 (⽅法1: 1台阶*3次, ⽅法2: 1台阶&amp;2台阶, ⽅法3: 2台阶&amp;1台阶)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 这⾥是你实现代码的地⽅</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作答-2"><a href="#作答-2" class="headerlink" title="作答"></a>作答</h4><p>（典型的斐波那契数列）</p><p>递归解法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"param err"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> step(n - <span class="number">1</span>) + step(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⾮递归解法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"param err"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> nMinusOne = <span class="number">2</span>,</span><br><span class="line">  nMinusTwo = <span class="number">1</span>,</span><br><span class="line">  timeN = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    timeN = nMinusOne + nMinusTwo;</span><br><span class="line">    nMinusTwo = nMinusOne;</span><br><span class="line">    nMinusOne = timeN;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> timeN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综合来看，百度对前端的要求其实更看重的是解决问题的能力以及一些很基础的前段知识。面试的过程，其实也是复盘自己的过程，通过一次次的复盘来更加清楚自己的优劣势，明确自己的定位，这样才能在以后的工作中扬长补短，逐渐完善自己的知识体系。</p>]]></content>
      
      
      <categories>
          
          <category> 基础原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在吗？ 快进来了解一下这几种常用的数据结构吧</title>
      <link href="/2020/07/18/data-structure/"/>
      <url>/2020/07/18/data-structure/</url>
      
        <content type="html"><![CDATA[<p>数据结构是算法的基石，如果没有扎实的数据结构基础，想要把算法学好甚至融会贯通是非常困难的，而优秀的算法又往往取决于你采用哪种数据结构。接下来介绍一些常用的数据结构。</p> <a id="more"></a><h2 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>构建数组十分简单</li><li>能让我们在O(1)的时间复杂度里根据数组的下标查询某个元素</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>需要分配一段连续的空间</li><li>查询某个元素需要遍历整个数组，耗费O(n)的时间复杂度</li><li>删除或者添加某个元素的时候，同样耗费O(n)时间</li></ul><h2 id="二、链表"><a href="#二、链表" class="headerlink" title="二、链表"></a>二、链表</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>单链表</p><ul><li>链表中的每个元素实际上是一个单独的对象，而所有对象都通过每个元素中的引用字段链接在一起</li></ul></li><li><p>双链表</p><ul><li>与单链表不同，双链表的每个节点都含有两个引用字段</li></ul></li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>灵活的分配内存空间</li><li>能在O(1)时间内删除或者添加元素</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>无法通过下表读取元素，每次都要从链表头开始一个个读取</li><li>查询n个元素需要O（n）时间</li></ul><h3 id="解题技巧"><a href="#解题技巧" class="headerlink" title="解题技巧"></a>解题技巧</h3><ul><li><p>利用快慢指针（有时需用到三个指针）</p><ul><li>链表的翻转</li><li>寻找倒数第K个元素</li><li>寻找链表中间位置的元素</li><li>判断链表是否有环</li></ul></li><li><p>构建一个虚假的链表头</p><ul><li>一般用在要返回新的链表的题目中</li></ul></li></ul><h3 id="LeetCode例题"><a href="#LeetCode例题" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li><ol start="25"><li>K个一组翻转链表</li></ol></li></ul><h2 id="三、栈"><a href="#三、栈" class="headerlink" title="三、栈"></a>三、栈</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>后进先出（LIFO）</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>利用一个单链表来实现栈的数据结构。而且，因为我们都只针对栈顶元素进行操作，所以借用单链表的头就能让所有栈的操作在 O(1) 的时间内完成。</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>在解决某个问题的时候，只要求关心最近一次的操作，并且在操作完成了之后，需要向前查找到更前一次的操作。</li></ul><h3 id="LeetCode例题-1"><a href="#LeetCode例题-1" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li>20 有效的括号</li><li>739 每日温度</li></ul><h2 id="四、队列"><a href="#四、队列" class="headerlink" title="四、队列"></a>四、队列</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>先进先出 FIFO</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul><li>可以借助双链表来实现队列。双链表的头指针允许在队头查看和删除数据，而双链表的尾指针允许我们在队尾查看和添加数据。</li></ul><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>当处理有序、数量在持续变化的数据时。算法题中广度优先遍历BFS是运用队列最多的地方</li></ul><h2 id="五、双端队列"><a href="#五、双端队列" class="headerlink" title="五、双端队列"></a>五、双端队列</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>双端队列和普通队列最大的不同在于，它允许我们在队列的头尾两端都能在 O(1) 的时间内进行数据的查看、添加和删除。</li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><ul><li>利用一个双链表实现双端队列</li></ul><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>双端队列最常用的地方就是实现一个长度动态变化的窗口或者连续区间</li></ul><h3 id="LeetCode例题-2"><a href="#LeetCode例题-2" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li>239 滑动窗口最大值</li></ul><h2 id="六、树"><a href="#六、树" class="headerlink" title="六、树"></a>六、树</h2><h3 id="常见形状"><a href="#常见形状" class="headerlink" title="常见形状"></a>常见形状</h3><ul><li>普通二叉树</li><li>平衡二叉树</li><li>完全二叉树</li><li>二叉搜索树</li><li>四叉树（Quadtree）</li><li>多叉树（N-ary Tree）</li><li>红黑树（Red-Black Tree）</li><li>自平衡二叉搜索树（AVL Tree）</li></ul><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><ul><li><p>前序遍历（Preorder Traversal）</p><ul><li>先根、再左、再右</li><li>应用场景：运用最多的场合包括在树里进行搜索以及创建一棵新的树。</li></ul></li><li><p>中序遍历（Inorder Traversal）</p><ul><li>先左、再根、再右</li><li>应用场景：最常见的是二叉搜索树，由于二叉搜索树的性质就是左孩子小于根节点，根节点小于右孩子，对二叉搜索树进行中序遍历的时候，被访问到的节点大小是按顺序进行的。</li></ul></li><li><p>后序遍历（Postorder Traversal）</p><ul><li>先左、再右、再根</li><li>应用场景：在对某个节点进行分析的时候，需要来自左子树和右子树的信息。收集信息的操作是从树的底部不断地往上进行，好比你在修剪一棵树的叶子，修剪的方法是从外面不断地往根部将叶子一片片地修剪掉。</li></ul></li></ul><h3 id="LeetCode例题-3"><a href="#LeetCode例题-3" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li>230 二叉搜索树中第K小的元素</li><li>250 统计同值子树 </li></ul><hr><blockquote><p>以下为一些比较高级的数据结构。</p></blockquote><h2 id="七、优先队列"><a href="#七、优先队列" class="headerlink" title="七、优先队列"></a>七、优先队列</h2><h3 id="与普通队列的区别"><a href="#与普通队列的区别" class="headerlink" title="与普通队列的区别"></a>与普通队列的区别</h3><ul><li>保证每次取出的元素是队列中优先级最高的</li><li>优先级别可自定义</li></ul><h3 id="最常用的场景"><a href="#最常用的场景" class="headerlink" title="最常用的场景"></a>最常用的场景</h3><ul><li>从杂乱无章的数据中按照一定的顺序或者优先级进行数据筛选</li></ul><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><ul><li>本质是一个二叉堆的结构，利用一个数组结构来实现完全二叉树</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>数据里的第一个元素拥有最高的优先级</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>向上筛选</li><li>向下筛选</li></ul><h3 id="LeetCode例题-4"><a href="#LeetCode例题-4" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li>347 前K个高频元素</li></ul><h2 id="八、图"><a href="#八、图" class="headerlink" title="八、图"></a>八、图</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><ul><li>阶、度</li><li>树、森林、环</li><li>有向图、无向图、完全有向图、完全无向图</li><li>连通图、连通分量</li><li>图的存储和表达方式：邻接矩阵、邻接链表</li></ul><h3 id="相关算法"><a href="#相关算法" class="headerlink" title="相关算法"></a>相关算法</h3><ul><li><p>图的遍历</p><ul><li>深度优先</li><li>广度优先</li></ul></li><li><p>环的检测</p><ul><li>有向图</li><li>无向图</li></ul></li><li><p>拓扑排序</p></li><li><p>最短路径算法</p><ul><li><p>Dijkstra</p><ul><li>Dijkstra(迪杰斯特拉)算法是典型的单源最短路径算法，用于计算一个节点到其他所有节点的最短路径。主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止。Dijkstra算法是很有代表性的最短路径算法</li></ul></li><li><p>Bellman-Ford</p><ul><li>求解单源最短路径问题的一种算法，由理查德·贝尔曼（Richard Bellman） 和 莱斯特·福特 创立的。它的原理是对图进行次松弛操作，得到所有可能的最短路径。其优于迪科斯彻算法的方面是边的权值可以为负数、实现简单，缺点是时间复杂度过高，高达。但算法可以进行若干种优化，提高了效率。</li></ul></li><li><p>Floyd Warshall</p><ul><li>Floyd算法又称为插点法，是一种利用动态规划的思想寻找给定的加权图中多源点之间最短路径的算法，与Dijkstra算法类似。该算法名称以创始人之一、1978年图灵奖获得者、斯坦福大学计算机科学系教授罗伯特·弗洛伊德命名。</li></ul></li></ul></li><li><p>连通性相关算法</p><ul><li><p>Kosaraju</p><ul><li>是线性时间的算法来找到一个有向图的强连通分量</li></ul></li><li><p>Tarjan</p><ul><li>一个关于 图的联通性的神奇算法。基于DFS（迪法师）算法，深度优先搜索一张有向图</li></ul></li><li><p>求解孤岛的数量</p></li><li>判断是否为树</li></ul></li><li><p>图的着色、旅行商问题</p></li></ul><h3 id="LeetCode例题-5"><a href="#LeetCode例题-5" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li>785 判断二分图</li></ul><h2 id="九、前缀树（字典树）"><a href="#九、前缀树（字典树）" class="headerlink" title="九、前缀树（字典树）"></a>九、前缀树（字典树）</h2><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li><p>每个节点至少包含两个基本属性</p><ul><li>children</li><li>isEnd</li></ul></li><li><p>前缀树的根节点是空的</p></li><li>除了根节点，其他所有节点有可能是单词的结尾，叶子节点一定都是单词的结尾</li></ul><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li><p>创建</p><ul><li>遍历一遍输入的字符串，对每个字符串的字符进行遍历</li><li>从前缀树的根节点开始，将每个字符加入到节点的children字符集当中</li><li>如果字符集已经包含了这个字符，则跳过</li><li>如果当前字符是字符串的最后一个，则把当前节点的isEnd标记为真</li></ul></li><li><p>搜索</p><ul><li>从前缀树的根节点触发，逐个匹配输入的前缀字符，如果遇到了就继续往下一层搜索，如果没遇到，就立即返回</li></ul></li></ul><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>每隔节点还能保存额外信息，比如可以记录拥有相同前缀的所有字符串。因此，当用户输入某个前缀时，就能在O(1)的时间内给出对应的推荐字符串。</li></ul><h3 id="LeetCode例题-6"><a href="#LeetCode例题-6" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li>212 单词搜索II</li></ul><h2 id="十、线段树"><a href="#十、线段树" class="headerlink" title="十、线段树"></a>十、线段树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。</li></ul><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li>线段树是建立在线段的基础上，每个结点都代表了一条线段[a,b]。长度为1的线段称为元线段。非元线段都有两个子结点，左结点代表的线段为[a,(a + b) / 2]，右结点代表的线段为[((a + b) / 2）+1,b]。</li></ul><h3 id="LeetCode例题-7"><a href="#LeetCode例题-7" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li>315 计算右侧小于当前元素的个数</li></ul><h2 id="十一、树状数组"><a href="#十一、树状数组" class="headerlink" title="十一、树状数组"></a>十一、树状数组</h2><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul><li>利用数组来表示多叉树</li><li>树状数组的第一个元素是空节点</li><li>如果节点tree[y]是tree[x]的父节点，那么需要满足条件：y = x - (x &amp; (-x))</li></ul><h3 id="LeetCode例题-8"><a href="#LeetCode例题-8" class="headerlink" title="LeetCode例题"></a>LeetCode例题</h3><ul><li>308 求一个动态变化的二维矩阵里，任意子矩阵里的树的总和</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 Mac 上都装了啥</title>
      <link href="/2020/07/11/what-I-installed-in-my-mac/"/>
      <url>/2020/07/11/what-I-installed-in-my-mac/</url>
      
        <content type="html"><![CDATA[<p>仍记得多年前我买了自己第一台 Mac 的时候，第一时间就是去搜索「如何高效的使用 Mac」「Mac 上好用的 APP 推荐」类似这样的关键字，希望可以借助别人的一些经验来完善自己的 Mac ，这中间自己也尝试了很多，下面把我觉得好用的一些软件列一下。</p> <a id="more"></a><h2 id="编辑器和Terminal"><a href="#编辑器和Terminal" class="headerlink" title="编辑器和Terminal"></a>编辑器和Terminal</h2><p>编辑器已经从webstorm切到了vscode，vscode真的好用，所使用的的扩展有：</p><ul><li>Bracket Pari Colorizer 2</li><li>BridleNSIS</li><li>Debugger for Chrome</li><li>ESLint</li><li>GitLens</li><li>HTML Snippets</li><li>LeetCode</li><li>Material Icon Theme</li><li>npm</li><li>open in browser</li><li>output colorizer</li><li>react native tools</li><li>TODO Highlight</li><li>vetur</li></ul><p>终端使用的是<a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a> 配合 oh my zsh!</p><p>参考：<a href="https://segmentfault.com/a/1190000014992947" target="_blank" rel="noopener">iTerm2 + Oh My Zsh 打造舒适终端体验</a></p><h2 id="开发辅助"><a href="#开发辅助" class="headerlink" title="开发辅助"></a>开发辅助</h2><ul><li><a href="https://www.postman.com/" target="_blank" rel="noopener">postman</a> 接口联调</li><li><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a> 抓包用，支持 https</li><li>Google Chrome + Firefox + Safari，浏览器，调试用。Chrome启用的扩展有：<ul><li>Redux DevTools 2.17.0</li><li>Allow-Control-Allow-Origin: * 1.0.3</li><li>Axure RP Extension for Chrome 0.6.3</li><li>Chrome Better History 3.50</li><li>EditThisCookie 1.5.0</li><li>FeHelper(前端助手) 2020.5.2810</li><li>Octotree 5.2.1</li><li>Placeholdifier 0.2.0</li><li>React Developer Tools 4.7.0 (5/18/2020)</li><li>Tag Assistant (by Google) 20.65.0</li><li>Vue.js devtools 5.3.3</li><li>保护眼睛 2.1.3</li></ul></li></ul><h2 id="一些好用的-git-alias"><a href="#一些好用的-git-alias" class="headerlink" title="一些好用的 git alias"></a>一些好用的 git alias</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st = status</span><br><span class="line">co = checkout</span><br><span class="line">cam = commit -a -m</span><br><span class="line">p = push</span><br><span class="line">pl = pull</span><br><span class="line">cob = checkout -b</span><br><span class="line">del = restore --staged</span><br><span class="line">pure = pull --rebase</span><br><span class="line">confall = config --global --list</span><br></pre></td></tr></table></figure><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><ul><li><a href="https://www.omnigroup.com/omnigraffle" target="_blank" rel="noopener">OmniGraffle</a> 用来画架构图</li><li><a href="https://www.xmind.cn/" target="_blank" rel="noopener">xmind</a> 思维导图</li></ul><h2 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h2><ul><li><a href="https://typora.io/" target="_blank" rel="noopener">Typora</a> markdown 高颜值简洁、支持多文件</li><li><a href="http://note.youdao.com/download.html?auto=1#mac" target="_blank" rel="noopener">有道云笔记</a> 云端笔记同步</li></ul><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><ul><li><a href="https://zh.xnipapp.com/" target="_blank" rel="noopener">Xnip</a> 可以进行标注，取色</li><li><a href="https://www.cockos.com/licecap/" target="_blank" rel="noopener">LICEcap</a> 录屏、gif图</li><li><a href="https://jietu.qq.com/" target="_blank" rel="noopener">截图</a> 顾名思义，腾讯出的截图工具</li></ul><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><ul><li><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a> + <a href="https://www.alfredapp.com/powerpack/" target="_blank" rel="noopener">Powerpack</a> 应用启动、粘贴板管理、Workflow、Snippets 管理等</li><li><a href="https://github.com/gbammc/Thor" target="_blank" rel="noopener">Thor</a> 一键直达应用</li><li><a href="https://magnet.crowdcafe.com/" target="_blank" rel="noopener">magnet</a> 窗口布局工具</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://justgetflux.com" target="_blank" rel="noopener">f.lux</a> 调节显示器色温，护眼，尤其是早上起来屏幕实在是刺眼</li><li><a href="https://music.163.com/" target="_blank" rel="noopener">网易云音乐</a> 不过最近歌单里被下架的歌有点多</li></ul><h2 id="通过-npm-安装"><a href="#通过-npm-安装" class="headerlink" title="通过 npm 安装"></a>通过 npm 安装</h2><ul><li><a href="https://github.com/popomore/projj" target="_blank" rel="noopener">projj</a> github/gitlab 项目管理</li><li><a href="https://github.com/zeit/serve" target="_blank" rel="noopener">serve</a> 本地静态服务器</li><li><a href="https://github.com/sindresorhus/fkill" target="_blank" rel="noopener">fkill</a> 比 kill 好用的进程 killer</li><li><a href="https://github.com/gtanner/qrcode-terminal" target="_blank" rel="noopener">qrcode-terminal</a> 二维码生成</li><li><a href="https://github.com/afc163/fanyi" target="_blank" rel="noopener">fy</a> 英汉互译</li></ul><h2 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h2><ul><li>服务商使用的是 <a href="https://portal.shadowsocks.nz/aff.php?aff=38994" target="_blank" rel="noopener">shadowsocks</a>，还算比较稳定，比较好的节点偶尔可以低至 30ms 的延迟。</li><li>Mac 客户端使用的是TrojanX，手机方面目前没有翻墙的需求。</li></ul><h4 id="免费"><a href="#免费" class="headerlink" title="免费"></a>免费</h4><ul><li><a href="http://refiddle.com/" target="_blank" rel="noopener">refiddle</a> + <a href="https://regex101.com/" target="_blank" rel="noopener">regex101</a>，调正则表达式</li><li><a href="https://30secondsofcode.org/" target="_blank" rel="noopener">30 seconds of code</a>，代码片段</li><li><a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a>，调 ast</li><li><a href="http://www.globtester.com/" target="_blank" rel="noopener">globtester</a>，调 glob</li><li><a href="http://ghub.io/" target="_blank" rel="noopener">ghub.io</a>，redirect to an npm package’s repository page</li><li><a href="https://unpkg.com/" target="_blank" rel="noopener">unpkg</a>，npm 包的 cdn 服务，可以查看 npm 包发布后的内容</li><li><a href="https://sketchboard.me/" target="_blank" rel="noopener">sketchboard</a> + <a href="https://www.draw.io/" target="_blank" rel="noopener">draw.io</a> + <a href="https://www.mindmeister.com/" target="_blank" rel="noopener">MindMeister</a> + <a href="https://whimsical.com/" target="_blank" rel="noopener">Whimsical</a>，在线画流程图</li><li><a href="https://hackmd.io/recent" target="_blank" rel="noopener">HackMD</a>，在线笔记，有 PPT 展示功能</li><li><a href="https://slides.com/" target="_blank" rel="noopener">Slides</a>，PPT 制作</li><li><a href="https://codesandbox.io/" target="_blank" rel="noopener">CodeSandbox</a> + <a href="https://glitch.com/" target="_blank" rel="noopener">glitch</a> + <a href="https://repl.it/" target="_blank" rel="noopener">repl.it</a>，在线代码编辑，前者支持 sandbox container，可以跑 npm scripts</li><li><a href="https://node.green/" target="_blank" rel="noopener">node.green</a>，查询 NodeJS 的 ES2018 特性支持情况</li><li><a href="https://caniuse.com/" target="_blank" rel="noopener">Can I use</a>，查询浏览器的特性支持情况</li><li><a href="https://carbon.now.sh/" target="_blank" rel="noopener">carbon</a>，根据源码生成图片</li><li><a href="https://tellmewhenitcloses.com" target="_blank" rel="noopener">Tell me when it closes</a>，github issue 关闭时发送邮件通知</li><li><a href="https://diff.intrinsic.com/" target="_blank" rel="noopener">Package Diff</a>，比较 npm 包两个版本直接的区别</li><li><a href="https://send.firefox.com/" target="_blank" rel="noopener">Firefox Send</a> + <a href="https://github.com/timvisee/ffsend" target="_blank" rel="noopener">ffsend</a>，文件分享服务</li><li><a href="https://cloudconvert.com/" target="_blank" rel="noopener">Cloud Convert</a>，支持 218 种格式相互转换</li><li><a href="https://www.smooth-code.com/open-source/svgr/playground/" target="_blank" rel="noopener">SVGR</a>，SVG 转 React 组件</li><li>（beta）<a href="https://webpack.jakoblind.no/" target="_blank" rel="noopener">Webpack config tool</a>，webpack 配置工具</li><li><a href="https://tool.lu/coderunner/" target="_blank" rel="noopener">代码在线运行工具</a></li><li><a href="https://icomoon.io/app/#/select" target="_blank" rel="noopener">icomoon</a> svg转font</li><li><a href="https://csstriggers.com/" target="_blank" rel="noopener">css triggers</a> css样式详解及在各浏览器引擎下的支持情况</li></ul><p>如果你有什么好用的软件或者黑科技也欢迎在下方留言告诉我~</p>]]></content>
      
      
      <categories>
          
          <category> 装机必备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好物推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当向浏览器中输入URL后发生了什么</title>
      <link href="/2020/07/06/what-happens-when-type-url-in-broswer/"/>
      <url>/2020/07/06/what-happens-when-type-url-in-broswer/</url>
      
        <content type="html"><![CDATA[<h2 id="1、输入网址"><a href="#1、输入网址" class="headerlink" title="1、输入网址"></a>1、输入网址</h2><p>当你开始输入网址比如<code>www.rocwong.cn</code>时浏览器就可以在书签或者历史记录里面去搜索相关的网址推荐给你。</p> <a id="more"></a><h2 id="2、浏览器查找域名的IP地址"><a href="#2、浏览器查找域名的IP地址" class="headerlink" title="2、浏览器查找域名的IP地址"></a>2、浏览器查找域名的IP地址</h2><p>① 请求发起后，浏览器首先会解析这个域名，首先它会查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。</p><p>② 如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS(域名分布系统)服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。</p><p>③ 查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询</p><p>④ 根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程</p><p>⑤ 本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址</p><p>⑥ 最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。</p><p><img src="https://images2017.cnblogs.com/blog/1171046/201712/1171046-20171226173034151-855747573.jpg" alt></p><h2 id="3、建立TCP链接"><a href="#3、建立TCP链接" class="headerlink" title="3、建立TCP链接"></a>3、建立TCP链接</h2><p>在拿到域名对应的IP地址后，会以随机端口（1024~~65535）向WEB服务器程序80端口发起TCP的连接请求，这个连接请求进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接，对于客户端与服务器的TCP链接，必然要说的就是『三次握手』。</p><p><img src="https://img2018.cnblogs.com/blog/1171046/201904/1171046-20190409190539159-883745097.png" alt></p><p>客户端发送一个带有SYN标志的数据包给服务端，服务端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息，最后客户端再回传一个带ACK标志的数据包，代表握手结束，连接成功。</p><pre><code>通俗化之后就是：客户端：老弟我要跟你链接服务端：好的，同意了客户端：好嘞</code></pre><h2 id="4、浏览器向WEB服务器发起Http请求"><a href="#4、浏览器向WEB服务器发起Http请求" class="headerlink" title="4、浏览器向WEB服务器发起Http请求"></a>4、浏览器向WEB服务器发起Http请求</h2><p>建立TCP连接之后，发起HTTP请求，请求一般分为三部分</p><p>请求方法URI协议/版本</p><p>请求头(Request Header)</p><p>请求正文</p><p>下面是一个完整的请求</p><p><img src="https://img-blog.csdn.net/20180519235118178?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FsZXhzaGk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>详细的就不描述了，网上很多说明的。</p><h2 id="5、服务器端处理"><a href="#5、服务器端处理" class="headerlink" title="5、服务器端处理"></a>5、服务器端处理</h2><p>服务器端收到请求后的由web服务器（准确说应该是http服务器）处理请求，诸如Apache、Ngnix、IIS等。web服务器解析用户请求，知道了需要调度哪些资源文件，再通过相应的这些资源文件处理用户请求和参数，并调用数据库信息，最后将结果通过web服务器返回给浏览器客户端。</p><p><img src="https://img2018.cnblogs.com/blog/1171046/201904/1171046-20190409191054591-1163748805.png" alt></p><h2 id="6、关闭TCP链接"><a href="#6、关闭TCP链接" class="headerlink" title="6、关闭TCP链接"></a>6、关闭TCP链接</h2><p>为了避免服务器与客户端双方的资源占用和损耗，当双方没有请求或响应传递时，任意一方都可以发起关闭请求。与创建TCP连接的3次握手类似，关闭TCP连接，需要4次握手。<br><img src="https://img2018.cnblogs.com/blog/1171046/201904/1171046-20190409191208891-688664454.png" alt></p><pre><code>上图可以通俗化：客户端：老弟，我这边没数据要传了，咱们关闭链接吧服务端：好的，接收到了，我看看我这边还有没有要传的服务端：我这边也没有了，关闭吧客户端：好嘞</code></pre><h2 id="7、浏览器解析资源"><a href="#7、浏览器解析资源" class="headerlink" title="7、浏览器解析资源"></a>7、浏览器解析资源</h2><p>对于获取到的HTML、CSS、JS、图片等等资源。</p><p>浏览器通过解析HTML，生成DOM树，解析CSS，生成CSS规则树，然后通过DOM树和CSS规则树生成渲染树。渲染树与DOM树不同，渲染树中并没有head、display为none等不必显示的节点。</p><p>在解析CSS的同时，可以继续加载解析HTML，但在解析执行JS脚本时，会停止解析后续HTML，这就会出现阻塞问题，关于JS阻塞相关问题，这里不过多阐述,后面会单独开篇讲解。<br><img src="https://user-gold-cdn.xitu.io/2018/2/22/161bb3c9b220f8cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><h2 id="8、浏览器布局渲染"><a href="#8、浏览器布局渲染" class="headerlink" title="8、浏览器布局渲染"></a>8、浏览器布局渲染</h2><p>根据渲染树布局，计算CSS样式，即每个节点在页面中的大小和位置等几何信息。HTML默认是流式布局的，CSS和js会打破这种布局，改变DOM的外观样式以及大小和位置。这时就要提到两个重要概念：repaint和reflow。</p><ul><li><p>repaint：屏幕的一部分重画，不影响整体布局，比如某个CSS的背景色变了，但元素的几何尺寸和位置不变。</p></li><li><p>reflow： 意味着元件的几何尺寸变了，我们需要重新验证并计算渲染树。是渲染树的一部分或全部发生了变化。这就是Reflow，或是Layout。</p></li></ul><p>有些情况下，比如修改了元素的样式，浏览器并不会立刻 reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。</p><p>有些情况下，比如 resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。</p><p>参考链接： <a href="https://www.cnblogs.com/yuanzhiguo/p/8119470.html" target="_blank" rel="noopener">从输入URL到浏览器显示页面发生了什么</a></p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是微前端</title>
      <link href="/2020/06/25/micro-front-end/"/>
      <url>/2020/06/25/micro-front-end/</url>
      
        <content type="html"><![CDATA[<p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p> <a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/micro/1.png" alt></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>将网站或Web应用程序视为由独立团队拥有的功能的组合。每个团队都有自己关心和专长的不同业务或任务领域。一个团队具有跨职能，并且从数据库到用户界面，端到端地开发其功能。</p><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><h3 id="技术栈无关"><a href="#技术栈无关" class="headerlink" title="技术栈无关"></a>技术栈无关</h3><ul><li>微前端的核心价值在于 “技术栈无关”，这才是它诞生的理由，或者说这才是能说服我采用微前端方案的理由。</li></ul><h3 id="独立开发、独立部署"><a href="#独立开发、独立部署" class="headerlink" title="独立开发、独立部署"></a>独立开发、独立部署</h3><h3 id="增量升级"><a href="#增量升级" class="headerlink" title="增量升级"></a>增量升级</h3><h3 id="建立团队前缀"><a href="#建立团队前缀" class="headerlink" title="建立团队前缀"></a>建立团队前缀</h3><h3 id="优于自定义API的本机浏览器功能"><a href="#优于自定义API的本机浏览器功能" class="headerlink" title="优于自定义API的本机浏览器功能"></a>优于自定义API的本机浏览器功能</h3><h3 id="建立弹性站点"><a href="#建立弹性站点" class="headerlink" title="建立弹性站点"></a>建立弹性站点</h3><h2 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h2><ul><li><p>可控体系下的前端协同开发问题（含空间分离带来的协作和时间延续带来的升级维护）</p></li><li><p>解构巨石应用</p></li><li><p>避免巨石应用随着技术更迭、产品升级、人员流动带来的工程上的问题</p></li></ul><h2 id="带来了什么价值"><a href="#带来了什么价值" class="headerlink" title="带来了什么价值"></a>带来了什么价值</h2><ul><li><p>产品的组合能力</p></li><li><p>widget 的产品输出能力</p></li><li><p>主要还是工程上的价值，产品能力只是其延伸</p></li></ul><h2 id="微前端的架构姿势"><a href="#微前端的架构姿势" class="headerlink" title="微前端的架构姿势"></a>微前端的架构姿势</h2><h3 id="核心原则：技术栈无关！！！"><a href="#核心原则：技术栈无关！！！" class="headerlink" title="核心原则：技术栈无关！！！"></a>核心原则：技术栈无关！！！</h3><ul><li>具体来讲：应用之间不应该有任何直接或间接的技术栈、依赖、以及实现上的耦合</li></ul><h3 id="架构目标"><a href="#架构目标" class="headerlink" title="架构目标"></a>架构目标</h3><ul><li>方案上跟使用 iframe 做微前端一样简单，同时又解决了 iframe 带来的各种体验上的问题</li></ul><h2 id="对比iframe"><a href="#对比iframe" class="headerlink" title="对比iframe"></a>对比iframe</h2><h3 id="iframe的特点"><a href="#iframe的特点" class="headerlink" title="iframe的特点"></a>iframe的特点</h3><ul><li>优点：提供了浏览器原生的硬隔离方案，可以完美解决CSS和JS的隔离问题</li><li>缺点：隔离性无法被突破，导致应用间上下文无法被共享，以及随之带来的较差的开发体验、产品体验</li></ul><h3 id="为什么不用iframe"><a href="#为什么不用iframe" class="headerlink" title="为什么不用iframe"></a>为什么不用iframe</h3><ul><li>url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用</li><li>UI 不同步，DOM 结构不共享</li><li>全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。</li><li>慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。</li></ul><h2 id="如果是widget级别，微前端和业务组件的区别在哪？"><a href="#如果是widget级别，微前端和业务组件的区别在哪？" class="headerlink" title="如果是widget级别，微前端和业务组件的区别在哪？"></a>如果是widget级别，微前端和业务组件的区别在哪？</h2><p>采用微前端的核心原因是：技术栈无关！无论是对遗产项目的改造，还是对新项目的架构选择，技术栈无关的前提能让项目可持续发展，易上手、易维护。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>事实上如果所有的 web 技术栈能做到统一，所有 library 的升级都能做到向下兼容，我们确实就不需要微前端了</p>]]></content>
      
      
      <categories>
          
          <category> 微前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await 相关代码改造</title>
      <link href="/2020/06/17/js-20200617/"/>
      <url>/2020/06/17/js-20200617/</url>
      
        <content type="html"><![CDATA[<p>输出以下代码运行结果，为什么？如果希望每隔 1s 输出一个结果，应该如何改造？注意不可改动 square 方法。</p> <a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(num * num)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  list.forEach(<span class="keyword">async</span> x=&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> square(x)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><blockquote><p>分析： 由于forEach是不能阻塞的，所以会同时输出1、4、9，如果需要每隔1秒输出一个结果，需要将并行改成串行，使<code>await</code>强制阻塞。</p></blockquote><ul><li><p>方法一： 使用<code>for</code>循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = list[i]</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> square(x)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二：使用<code>for of</code>语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> square(x)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法三：利用<code>promise</code>的链式调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">i = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i === list.length) <span class="keyword">return</span></span><br><span class="line">  promise = promise.then(<span class="function"><span class="params">()</span> =&gt;</span> square(list[i])).then(<span class="built_in">console</span>.log)</span><br><span class="line">  test(i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法四：使用<code>reduce</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list.reduce(<span class="keyword">async</span> (_, x) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> _</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> square(x)</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure></li><li><p>方法五：直接嵌套个<code>setTimeout</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  list.forEach(<span class="keyword">async</span> x =&gt; &#123;</span><br><span class="line">    setTimeout(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> square(x)</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;, <span class="number">1000</span> * x)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法六：基于闭包</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ;<span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> num <span class="keyword">of</span> list) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> square(num)</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 puppeteer 为自己和团队内的小伙伴定一份可口的晚餐</title>
      <link href="/2020/06/11/puppeteer-for-dinner/"/>
      <url>/2020/06/11/puppeteer-for-dinner/</url>
      
        <content type="html"><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>疫情后来到公司被告知，以后每天的晚饭都需要自己提前一天预订了，不能像以前一样人人有份儿了。虽然不知道公司是出于什么方面考虑改成这样的，但是确实引起了很多不便。比如群里多了很多“要饭”的：</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/puppeteer/request-order.png" alt="banner"></p><p>当然，在某个加班的夜晚我和我的小伙伴也因为没有提前订餐导致无法吃饭，只能默默的啃着自费面包度过。。。<br><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/puppeteer/mantou.gif" alt="banner"></p><p>俗话说得好，谁痛谁劳动！作为新时代的码农一枚，在能自动化的就不手动化，能智能化就不自动化的光辉思想照耀下，就想着能不能把订餐这事儿交给程序做呢？</p><p>答案当然是：能！</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>首先对<a href="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/puppeteer/order-page.png" target="_blank" rel="noopener">订餐页面</a>进行分析发现就是简单的一个<code>form</code>表单而已嘛，然后依稀记得之前团队小伙伴技术分享的时候提到过谷歌的一个通过<code>DevTools</code>协议控制<code>headless Chrome</code>的<code>Node</code>库 —— <code>Puppeteer</code>，感觉有搞头诶。</p><h2 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h2><p><code>Puppeteer</code>类似其他框架，通过操作<code>Browser</code>实例来操作浏览器作出相应的反应，看以下示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(); <span class="comment">// 启动一个浏览器，并返回browser实例</span></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage(); <span class="comment">// 新生成一个页面实例，类似Chrome中的一个tab</span></span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'http://rennaiqian.com'</span>); <span class="comment">// 页面跳转</span></span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">'example.png'</span>&#125;); <span class="comment">// 截图，并保存到本地</span></span><br><span class="line">  <span class="keyword">await</span> page.pdf(&#123;<span class="attr">path</span>: <span class="string">'example.pdf'</span>, <span class="attr">format</span>: <span class="string">'A4'</span>&#125;); <span class="comment">// 生成PDF并保存到本地</span></span><br><span class="line">  <span class="keyword">await</span> browser.close(); <span class="comment">// 自动关闭浏览器</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>通过这些我们就能打开订餐页面了，但是页面表单中的数据如何输入呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.type(<span class="string">'.field_2'</span>, name, &#123;<span class="attr">delay</span>: <span class="number">100</span>&#125;);</span><br></pre></td></tr></table></figure><p>可以使用<code>page</code>实例上的方法<code>type</code>来完成，<code>type</code>的三个参数定义分别为：</p><ul><li>选择器，和jQuery中的选择器语法一致；</li><li>向输入域中赋的值；</li><li>一些其他选项，可空。 <code>delay: 100</code> 表示每次输入之间间隔 <code>100</code> 毫秒；</li></ul><p>有了这些准备，接下来开搞！</p><h2 id="订餐"><a href="#订餐" class="headerlink" title="订餐"></a>订餐</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下单</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; name 姓名</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; jobNo 工号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">order</span>(<span class="params">name, jobNo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;<span class="attr">headless</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://xxxxxxxxx.xxxxxx/xxxxxx'</span>); <span class="comment">// 订餐网址</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">'.field_2'</span>, name, &#123;<span class="attr">delay</span>: <span class="number">100</span>&#125;); </span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">'.field_6'</span>, jobNo, &#123;<span class="attr">delay</span>: <span class="number">100</span>&#125;);</span><br><span class="line">  <span class="keyword">const</span> tomorrowStr = utils.getTomorrowStr(); <span class="comment">// 获取明天的日期</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">'.ant-picker-input &gt; input'</span>, tomorrowStr);</span><br><span class="line">  <span class="keyword">await</span> page.click(<span class="string">'.field_5 div:nth-child(5)'</span>);</span><br><span class="line">  <span class="keyword">await</span> page.click(<span class="string">'.published-form__footer-buttons &gt; button'</span>);</span><br><span class="line">  <span class="keyword">await</span> page.waitForNavigation();</span><br><span class="line">  <span class="keyword">const</span> clip = <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">        x,</span><br><span class="line">        y,</span><br><span class="line">        width,</span><br><span class="line">        height</span><br><span class="line">    &#125; = <span class="built_in">document</span>.querySelector(<span class="string">'.code-info'</span>).getBoundingClientRect();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        x,</span><br><span class="line">        y,</span><br><span class="line">        width,</span><br><span class="line">        height</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>_<span class="subst">$&#123;tomorrowStr&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123; <span class="attr">path</span>: <span class="string">`./screenshot/<span class="subst">$&#123;fileName&#125;</span>.png`</span>, clip &#125;);</span><br><span class="line">  <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>);</span><br><span class="line">  browser.close();</span><br><span class="line">  <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  order,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码即可将订餐码保存到本地，但是还是不太方便，每天都要从电脑上发送给手机，于是想到了<strong>钉钉机器人</strong>。</p><h2 id="订餐成功通知"><a href="#订餐成功通知" class="headerlink" title="订餐成功通知"></a>订餐成功通知</h2><p>通过查看API发现，如果发送图片的话，一定得是图片的在线链接，怎么把本地图片转换成在线链接呢？ 买个阿里云吧！嗯！这样可以把图片传到OSS从而生成在线链接了，好在我已经有阿里云了，这样想来一下省了1000多块钱，好赚！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OSS = <span class="built_in">require</span>(<span class="string">'ali-oss'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadToOSS</span>(<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> client = <span class="keyword">new</span> OSS(&#123;</span><br><span class="line">    region: <span class="string">'oss-cn-beijing'</span>,</span><br><span class="line">    accessKeyId: <span class="string">'accessKeyId'</span>,</span><br><span class="line">    accessKeySecret: <span class="string">'accessKeySecret'</span>,</span><br><span class="line">    bucket: <span class="string">'roc-auto-order'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> path = <span class="string">`./screenshot/<span class="subst">$&#123;fileName&#125;</span>.png`</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> client.putStream(<span class="string">`<span class="subst">$&#123;fileName&#125;</span>.png`</span>, fs.createReadStream(path));</span><br><span class="line">  <span class="keyword">return</span> client.signatureUrl(result.name, &#123; <span class="attr">expires</span>: <span class="number">604800</span> &#125;); <span class="comment">//  7天</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  uploadToOSS</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>直接调用<code>ali-oss</code>完成图片上传并获取到图片链接，给下一步钉钉推送使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushDingding</span>(<span class="params">fileName, picUrl</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://oapi.dingtalk.com/robot/send?access_token=ACCESS_TOKEN'</span>;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="string">"msgtype"</span>: <span class="string">"markdown"</span>,</span><br><span class="line">    <span class="string">"markdown"</span>: &#123;</span><br><span class="line">        <span class="string">"title"</span>:<span class="string">"订餐成功"</span>,</span><br><span class="line">        <span class="string">"text"</span>: <span class="string">`### <span class="subst">$&#123;fileName&#125;</span> 订餐成功 \n&gt; ![screenshot](<span class="subst">$&#123;picUrl&#125;</span>)\n&gt; `</span></span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="string">"at"</span>: &#123;</span><br><span class="line">        <span class="string">"isAtAll"</span>: <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      method: <span class="string">"POST"</span>,</span><br><span class="line">      json: <span class="literal">true</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">          <span class="string">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      body: data</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pushDingding,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h2><p>经过以上操作后已经可以实现在执行的时候自动下单了，但是我想实现每天中午十二点都下单，不用我操作，怎么处理呢，以前做java的时候有定时跑批任务，nodejs应该也有的吧，去npm上找了一下发现有个<code>node-schedule</code>，非常符合需求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> schedule = <span class="built_in">require</span>(<span class="string">'node-schedule'</span>);</span><br><span class="line"><span class="keyword">const</span> autoOrder = <span class="built_in">require</span>(<span class="string">'./auto-order'</span>);</span><br><span class="line"><span class="keyword">const</span> fileUpload = <span class="built_in">require</span>(<span class="string">'./file-upload'</span>);</span><br><span class="line"><span class="keyword">const</span> messagePush = <span class="built_in">require</span>(<span class="string">'./message-push'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> one <span class="keyword">of</span> config.personList) &#123;</span><br><span class="line">    <span class="keyword">const</span> fileName = <span class="keyword">await</span> autoOrder.order(one.name, one.jobNo);</span><br><span class="line">    <span class="keyword">const</span> picUrl = <span class="keyword">await</span> fileUpload.uploadToOSS(fileName);</span><br><span class="line">    messagePush.pushDingding(fileName, picUrl);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleObjectLiteralSyntax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 周一到周五的中午十二点半执行</span></span><br><span class="line">  schedule.scheduleJob(<span class="string">'0 30 12 * * 1-5'</span>, () =&gt; &#123;</span><br><span class="line">    utils.delDir(<span class="string">'../screenshot'</span>);</span><br><span class="line">    doTask();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scheduleObjectLiteralSyntax();</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后，使用 <code>pm2</code> 启动上面的文件即可。</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/puppeteer/qr-code.png" alt="banner"></p>]]></content>
      
      
      <categories>
          
          <category> 我爱折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解浏览器系列之进程与线程之间的区别</title>
      <link href="/2020/06/09/differences-between-processes-and-threads/"/>
      <url>/2020/06/09/differences-between-processes-and-threads/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/browser/process-thread.png" alt="banner"></p><a id="more"></a><h2 id="什么是进程？什么是线程？"><a href="#什么是进程？什么是线程？" class="headerlink" title="什么是进程？什么是线程？"></a>什么是进程？什么是线程？</h2><h3 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h3><p>进程是执行中的一段程序，即一旦程序被载入到内存中并准备执行，它就是一个进程。进程是表示资源分配的基本概念，又是调度运行的基本单位，是系统中的并发执行的单位。</p><h3 id="线程的定义"><a href="#线程的定义" class="headerlink" title="线程的定义"></a>线程的定义</h3><p>单个进程中执行的每个任务就是一个线程。线程是进程中执行运算的最小单位。<br>一个线程只能属于一个进程，但是一个进程可以拥有多个线程。多线程处理就是允许一个进程中在同一时刻执行多个任务。</p><p>可以结合下图来理解二者之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/browser/cartoon-process-thread.jpg" alt="图说进程和线程"></p><h2 id="进程-VS-线程"><a href="#进程-VS-线程" class="headerlink" title="进程 VS 线程"></a>进程 VS 线程</h2><p>首先，我们知道浏览器在处理任务时，使用并行处理相较串行处理而言可以大大提升性能。对应到线程里面来讲，也就是单线程就是串行，多线程就可以实现并行。线程是依附于进程的，而进程中使用多线程并行处理就能提升运算效率。</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/browser/single-vs-many-threads.png" alt="单线程和多线程"></p><p>总结来说，进程和线程的关系有以下4个特点：</p><ul><li>进程中的任意一个线程执行出错，都会导致整个进程的崩溃；</li><li>线程之间共享进程中的数据；</li><li>当一个进程关闭后，操作系统会回收进程所占用的内存；</li><li>进程之间的内容相互隔离，如果进程之间需要通信则需使用IPC。</li></ul><h2 id="单进程浏览器时代"><a href="#单进程浏览器时代" class="headerlink" title="单进程浏览器时代"></a>单进程浏览器时代</h2><blockquote><p>单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里。这些模块包含了网络、插件、js运行环境、渲染引擎和页面等。</p></blockquote><p>单进程浏览器的弊端：</p><ul><li>不稳定；</li></ul><p>若插件崩溃或者内存泄露时，容易阻塞浏览器主进程造成浏览器崩溃；</p><ul><li>不流畅；</li></ul><p>若js运行环境中有特别耗时，如执行了一个无限循环脚本，它会独占整个县城，导致真个浏览器失去响应、卡顿等。</p><ul><li>不安全；</li></ul><p>插件模块在主进程中，可以获取到操作系统的任意资源，这就给了恶意插件入侵电脑的可趁之机。</p><h2 id="多进程浏览器时代"><a href="#多进程浏览器时代" class="headerlink" title="多进程浏览器时代"></a>多进程浏览器时代</h2><h3 id="早期的多进程架构"><a href="#早期的多进程架构" class="headerlink" title="早期的多进程架构"></a>早期的多进程架构</h3><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/browser/early-many-process.png" alt="早期的多进程架构"></p><p>上图是2008年Chrome发布时的进程架构。从图中可以看出，Chrome的页面是运行在单独的渲染进程中的，同时页面里的插件也是运行的单独的插件进程中的，而进程之间的通信依赖IPC。</p><p>多进程浏览器很好的解决了上述的三个问题：</p><ol><li>由于进程是相互隔离的，所以某个进程的崩溃不影响浏览器和其他页面。</li><li>js也是运行在渲染进程中的，所以即使JS阻塞了渲染进程，也不影响其他页面。</li><li>采用多进程架构的额外好处是可以使用<strong>安全沙箱</strong>，你可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能在你的硬盘上写入任何数据，也不能在敏感位置读取任何数据，例如你的文档和桌面。Chrome 把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。</li></ol><h3 id="目前多进程架构"><a href="#目前多进程架构" class="headerlink" title="目前多进程架构"></a>目前多进程架构</h3><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/browser/latest-many-process.png" alt="目前多进程架构"></p><p>从图中可以看出，最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。</p><ul><li><strong>浏览器进程</strong>。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li><strong>渲染进程</strong>。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li><strong>GPU 进程</strong>。其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li><li><strong>网络进程</strong>。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li><strong>插件进程</strong>。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li></ul><p>多进程模型的弊端：</p><ul><li>更高的资源占用；</li><li>更复杂的体系结构；</li></ul><h2 id="未来面向服务的架构"><a href="#未来面向服务的架构" class="headerlink" title="未来面向服务的架构"></a>未来面向服务的架构</h2><p>为了解决这些问题，在 2016 年，Chrome 官方团队使用“面向服务的架构”（Services Oriented Architecture，简称 SOA）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。</p><p>Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型图：</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/browser/face-to-service-many-process.png" alt="未来面向服务的架构"></p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程与线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫谈设计模式之单例模式</title>
      <link href="/2020/06/09/design-pattern-singleton/"/>
      <url>/2020/06/09/design-pattern-singleton/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/singleton/banner.png" alt="banner"></p><p>暂无<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫谈设计模式之工厂模式</title>
      <link href="/2020/06/05/design-pattern-factory/"/>
      <url>/2020/06/05/design-pattern-factory/</url>
      
        <content type="html"><![CDATA[<p>  <img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/factory-pattern/banner.png" alt="banner"></p><a id="more"></a><h2 id="什么是工厂模式？"><a href="#什么是工厂模式？" class="headerlink" title="什么是工厂模式？"></a>什么是工厂模式？</h2><p>工厂模式（Factory Pattern）是最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p>工厂模式的适用场合：</p><ol><li>动态实现；</li><li>节省设置开销；</li><li>用许多小型对象组成一个大对象；</li></ol><p>按照抽象程度的不同，工厂模式又可以分为简单工厂、工厂方法和抽象工厂。 如果你之前只接触过JavaScript而没有接触过其他面向对象的语言的话，可能对抽象<code>abstract</code>这个词有点不熟悉，下面我们就说一个小例子来理解一下抽象的概念：</p><h2 id="什么是抽象（abstract）？"><a href="#什么是抽象（abstract）？" class="headerlink" title="什么是抽象（abstract）？"></a>什么是抽象（abstract）？</h2><blockquote><p>说有一天你去面馆吃饭，一坐下就对服务员说：“给我来点吃的，快点，我着急上班。” 服务员很纳闷，心想我家有几十种面，你到底要吃什么呢？ 就问你：“先生，你要吃什么饭？” 你本来就很着急，这个时候服务员还没给你下单，竟然还在问你，你就很不耐烦的说：“当时要吃面了，我每天不都是面吗” 服务员虽然看你着急，但是还是继续说到：“先生，你要吃是什么面？大份还是小份？吃辣还是不吃辣？要葱花香菜吗？” 这个时候你才明白过来，哦~ 原来是我的表述有问题，没有正确的传达我的意图。于是你就耐心的说：“ 要一个大份，微辣，葱花香菜正常的牛肉面。” 服务员这才给你下单。</p></blockquote><p>上面我们说到的<code>牛肉面</code>就是一个实例对象，<code>面馆</code>就是生产实例对象的一个工厂，我们可以把它当做是一个工厂函数，里面有各式各样的面，由于你给这个函数传递了正确的参数：<em>大份、微辣、要葱花香菜、牛肉面</em>，所以你最终得到了一碗你想要的牛肉面。 但是一开始你只说了<em>要点吃的、吃碗面</em>这都没有具体到生产对象所需要的所有参数，导致服务员一直不知道你想要什么，太抽象了，<strong>这种将复杂事物的一个或多个共有特征抽取出来的思维过程就是抽象</strong>。</p><p>如果你已经明白了抽象的概念，那么对下面理解抽象工厂会很有帮助。</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式也叫做静态工厂模式，该模式对对象创建管理方式最为简单，因为其仅仅简单的对不同类对象的创建进行了一层薄薄的封装，该模式通过向工厂传递类型来指定要创建的对象。下面我们继续使用刚刚的牛肉面来讲解该模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> noodlesFactory = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">BeefNoodles</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'牛肉面'</span>;</span><br><span class="line">        <span class="keyword">this</span>.spicy = <span class="string">'微辣'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MuttonNoodles</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'羊肉面'</span>;</span><br><span class="line">        <span class="keyword">this</span>.spicy = <span class="string">'特辣'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">EggNoodles</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'鸡蛋面'</span>;</span><br><span class="line">        <span class="keyword">this</span>.spicy = <span class="string">'不要辣'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'beefNoodles'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BeefNoodles();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'muttonNoodles'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MuttonNoodles();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'eggNoodles'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EggNoodles();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'传入的参数错误，可选：beefNoodles、muttonNoodles、eggNoodles'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> beefNoodles = noodlesFactory(<span class="string">'beefNoodles'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'beefNoodles'</span>, beefNoodles); <span class="comment">// &#123; name: '牛肉面', spicy: '微辣'&#125;</span></span><br><span class="line"><span class="keyword">const</span> muttonNoodles = noodlesFactory(<span class="string">'muttonNoodles'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'muttonNoodles'</span>, muttonNoodles); <span class="comment">// &#123; name: '羊肉面', spicy: '特辣' &#125;</span></span><br><span class="line"><span class="keyword">const</span> eggNoodles = noodlesFactory(<span class="string">'eggNoodles'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'eggNoodles'</span>, eggNoodles); <span class="comment">// &#123; name: '鸡蛋面', spicy: '不要辣'&#125;</span></span><br></pre></td></tr></table></figure><p><code>noodlesFactory</code>就是一个简单工厂，在该函数中有三个构造函数分别对应不同的面条种类。 当我们调用工厂函数时，只需要传递<code>beefNoodles, muttonNoodles, eggNoodles</code> 这三个可选参数中的一个获取对应的实例对象即可。</p><p>简单工厂的优点在于，你只需要一个正确的餐护士，就可以获取到你所需要的对象，而无需知道其生产产品的具体细节。</p><p>但是，在函数内包含了所有对象的创建逻辑（构造函数）和判断逻辑的代码，每增加新的构造函数还需要修改判断逻辑代码。当我们的对象实例不是上面的三个，而是30个甚至更多的时候，这个函数会成为一个庞大的超级函数，变的难以维护。</p><p>所以，<strong>简单工厂只能用于创建对象数量较少，对象的创建逻辑不复杂的时候使用。</strong></p><h2 id="工厂方式模式"><a href="#工厂方式模式" class="headerlink" title="工厂方式模式"></a>工厂方式模式</h2><p>工厂方法模式的本意是将实际创建对象的工作推迟到子类中，这样核心类就变成了抽象类。但是在js中很难像传统面向对象那样去实现创建抽象类。所以在js中我们只需要参考它的核心思想即可。我们可以将工厂方法看做是一个实例化对象的工厂类。</p><p>在简单工厂模式中，我们每添加一个构造函数需要修改两处代码。现在我们使用工厂方法模式改造上面的代码，刚才提到，工厂方法我们只把它看作是一个实例化对象的工厂，它只做实例化对象这一件事情！ 我们采用安全模式创建对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全模式创建的工厂方法函数</span></span><br><span class="line"><span class="keyword">const</span> NoodlesFactory = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> NoodlesFactory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>[type]();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NoodlesFactory(type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂方法函数的原型中设置所有对象的构造函数</span></span><br><span class="line">NoodlesFactory.prototype = &#123;</span><br><span class="line">    BeefNoodles: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'牛肉面'</span>;</span><br><span class="line">        <span class="keyword">this</span>.spicy = <span class="string">'微辣'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    MuttonNoodles: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'羊肉面'</span>;</span><br><span class="line">        <span class="keyword">this</span>.spicy = <span class="string">'特辣'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    EggNoodles: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'鸡蛋面'</span>;</span><br><span class="line">        <span class="keyword">this</span>.spicy = <span class="string">'不要辣'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：以下的入参是工厂方法函数的原型中设置的构造函数，首字母大写</span></span><br><span class="line"><span class="keyword">const</span> beefNoodles = NoodlesFactory(<span class="string">'BeefNoodles'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'beefNoodles'</span>, beefNoodles); <span class="comment">// &#123; name: '牛肉面', spicy: '微辣'&#125;</span></span><br><span class="line"><span class="keyword">const</span> muttonNoodles = NoodlesFactory(<span class="string">'MuttonNoodles'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'muttonNoodles'</span>, muttonNoodles); <span class="comment">// &#123; name: '羊肉面', spicy: '特辣' &#125;</span></span><br><span class="line"><span class="keyword">const</span> eggNoodles = NoodlesFactory(<span class="string">'EggNoodles'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'eggNoodles'</span>, eggNoodles); <span class="comment">// &#123; name: '鸡蛋面', spicy: '不要辣'&#125;</span></span><br></pre></td></tr></table></figure><p>上面的这段代码就很好的解决了每添加一个构造函数就需要修改两处代码的问题，如果我们需要添加新的实例，只需要在<code>NoodlesFactory.prototype</code>中添加。例如，我们需要添加一个<code>VegetableNoodles</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NoodlesFactory.prototype = &#123;</span><br><span class="line">  <span class="comment">//....</span></span><br><span class="line">  VegetableNoodles: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'蔬菜面'</span>；</span><br><span class="line">    <span class="keyword">this</span>.spicy = <span class="string">'变态辣'</span>；</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">const</span> vegetableNoodles = NoodlesFactory(<span class="string">'VegetableNoodles'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><p>抽象工厂模式的代码基于typescript来实现比较更能说明问题，我在GitHub创建了一个仓库，您可以<a href="https://github.com/rocwong-cn/design-pattern/tree/master/src/patterns/factory-pattern/abstract-factory" target="_blank" rel="noopener">移步此处</a>来看代码实现。</p><p>优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p>缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p><p>使用场景： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。</p><p>注意事项：产品族难扩展，产品等级易扩展。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面说的三种工厂模式，都是属于创建型的设计模式。简单工厂模式又叫静态工厂方法，用来创建某一种产品对象的实例，用来创建单一对象；工厂方法模式是将创建实例推迟到子类中进行；抽象工厂模式是对类的工厂抽象用来创建产品类簇，不负责创建某一类产品的实例。在实际的业务中，需要根据实际的业务复杂度来选择合适的模式。对于非大型的前端应用来说，灵活使用简单工厂其实就能解决大部分问题。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年终总结</title>
      <link href="/2019/12/19/summary-of-2019/"/>
      <url>/2019/12/19/summary-of-2019/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下是我在周报中写的2019年的年终总结，同时也放自己博客中一份，便于日后追忆。</p></blockquote> <a id="more"></a><p>来到<strong>Phoenix</strong>一年多，已辗转三个办公区了，从丹棱到互金到科贸一路走来，编辑器也从最初一个简单的替代手工编写XML课件的工具到目前集备录编一体化的AI课件生产系统了。</p><p>这期间，给我感触最大的有三个阶段：</p><h2 id="一、平台化"><a href="#一、平台化" class="headerlink" title="一、平台化"></a>一、平台化</h2><p>平台化之前的编辑器是将组件的拓扑信息、属性配置信息及音频配置信息都打包在编辑器中的，这样对于编辑器和组件的研发同学来说非常的不方便，而且对于不同版本的组件维护起来也相当繁琐，然后当时强哥主导了平台化，将组件从编辑器中解耦，组件的属性配置使用表单库来维护，虽然当时折腾了挺久，但是现在看起来一切都挺值得。</p><p>平台化过程中，对我有一个很大的挑战：时间轴上的拓扑结构的无限级嵌套，既要保证正向的渲染，也要保证在删除某个结构时对原有结构的回溯，拓扑是整个时间轴交互的核心所在，如果无法保证拓扑结构的稳定性，其上层建筑都将岌岌可危。由于当时对数据结构和算法相关知识储备不足，导致没有找到很好的解决方案，后来经过与德德沟通，德德给出了一个完美的解决方案，一直沿用至今。</p><p>平台化的重构过程中，学到了很多， 其中最重要的就是拓扑结构的嵌套这件事带给我思维上的转变，意识到了对于无论是前端还是后端，算法和数据结构才是根本。</p><p>总结：升级个人技能点的方式，不一定非要通过打怪升级，善于利用碎片时间来完善自己，临阵之时才不会出现书到用时方恨少的囧象。具象的来讲，自己在算法，数据结构以及可视化（图形绘制、3d动画等）等领域的探究尚浅，而这些也是目前工作中时常会用的关键技术，以后在这方面要多下功夫。</p><h2 id="二、用户量提升后对编辑器的性能优化"><a href="#二、用户量提升后对编辑器的性能优化" class="headerlink" title="二、用户量提升后对编辑器的性能优化"></a>二、用户量提升后对编辑器的性能优化</h2><p>随着编辑器用户越来越多，教研老师对配课的需求也各有不同，批评声也随之而来，其中最影响用户体验的一个就是使用了500左右视频切片时，无论任何操作都会导致编辑器卡顿甚至假死，高级预览时该现象更甚。</p><p>究其原因，是由于时间轴上的所有内容是绘制在一张画布上，当用户操作时，会导致画布进行频繁的重绘，重绘完成后还有本地的课件写入，这两者导致了性能问题。针对画布的频繁重绘使用离屏画布解决了这个问题；针对于课件的写入操作，我们通过优化产品策略以及C++端的写入接口也解决了。</p><p>总结：如果可以一步到位，就不要“先能用，在迭代”。因为目前的每一个阶段都应该是一个质量良好的产品，都应该是一个敢于接受用户挑战的产品。</p><h2 id="三、时间轴SDK的封装"><a href="#三、时间轴SDK的封装" class="headerlink" title="三、时间轴SDK的封装"></a>三、时间轴SDK的封装</h2><p>时间轴的SDK最近又用typescript重写了一边，强哥给了我很多关于如何封装一个SDK这方面的启发和建议，上个版本的SDK在与业务的解耦合和对外暴露的事件接口方面做得不好，这次就将SDK中的业务代码基本全部清理，取而代之的是针对对应的模块都绑定一个基于观察者模式的发布者，在SDK内部有事件触发时，向外部发布对应的消息指令，外部设置对应的监听来进行接下来的逻辑处理。</p><p>SDK中原来的另一大毒瘤是全局变量，这些全局变量不仅会带来安全问题，还会导致变量的全局污染，这次使用单例模式构造了一个DataManager，有点类似于redux或vuex中的Store的概念，一个唯一的数据存储中心，通过它，来让数据私有，对外暴露存取数据的接口，从而使数据的共享更纯粹。</p><p>总结： SDK类的架构设计时除了需要考虑到易用性之外，还应该秉承少即是多的原则，尽量将和业务耦合的点开放出接口供外部实现，也可以在SDK与业务模块之间做一层针对简单业务场景的适配层，这样才能最大限度的保证SDK的普适性。</p><p>这一年见证了编辑器的一路成长，我自身也在一路探索中受益良多。</p><p>在现在这个框架横行的年代，出门和朋友聊天，不会几个流行的框架都不好意思说自己是前端，大家都在盲目的紧跟潮流，一边在论坛上狂刷“学不动了”，一边又嘴里喊着真香的学的不亦乐乎，原来的切图仔，现在的npm三部曲（npm install , npm start , npm uninstall），都是泡沫。学习框架，主要是学习框架的思想以及别人对问题的解决方式、思考方法，并用这种优秀的方法来完善自己。  和胡老师一起共事的这段时间，他就一直在强调要改变我们自身的思维模式，优秀的人都是自我养成的。我也在胡老师的鞭策和激励下看了几本书：《JavaScript设计模式》《设计模式之禅》《程序员的三门课》《程序员的进阶心法》《墨菲定律》《代码整洁之道》《重构》《麦肯锡高效工作法》《聪明的人用方格笔记本》《上地不掷筛子》等。你读的书，看的风景，就是你格局，希望来年可以更多的利用一些碎片时间来读书。</p><p>创造性的输入，决定创造性的输出。编辑器目前的很多交互都不是最优解，团队内部也确实没有交互设计岗，所以很多时候就需要群策群力，作为前端研发，更应该担负起更多的这方面的职责，来年需要看一些用户交互和视觉设计相关的书来多一些创造性的输入，填补一下这方面的空缺。</p><p>前几天团队内部一起碰了一下关于来年的技术和项目规划，还是有很多充满挑战性的事情需要去做，而且这些事大多都对编辑器以后要做成一个什么样的产品起着关键性的作用，希望大家调整好节奏，步调一致的撸起袖子加油干。借用胡老师常说的一句话就是结硬寨，打呆仗！</p><p>今年的我的关键词是【优化】，优化的肯定是自己做的不足的地方，希望来年可以少一些优化，多一些【完成】。</p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 又是一年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 代码整洁之道</title>
      <link href="/2019/11/27/clean-code-js/"/>
      <url>/2019/11/27/clean-code-js/</url>
      
        <content type="html"><![CDATA[<p>Original Repository: <a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">ryanmcdermott/clean-code-javascript</a></p><a id="more"></a><h1 id="JavaScript-风格指南"><a href="#JavaScript-风格指南" class="headerlink" title="JavaScript 风格指南"></a>JavaScript 风格指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#介绍">介绍</a></li><li><a href="#变量">变量</a></li><li><a href="#函数">函数</a></li><li><a href="#objects-and-data-structures">对象和数据结构</a></li><li><a href="#类">类</a></li><li><a href="#测试">测试</a></li><li><a href="#并发">并发</a></li><li><a href="#错误处理">错误处理</a></li><li><a href="#格式化">格式化</a></li><li><a href="#注释">注释</a></li></ol><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/ryanmcdermott" target="_blank" rel="noopener">作者</a>根据 Robert C. Martin <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="noopener"><em>《代码整洁之道》</em></a>总结了适用于 JavaScript 的软件工程原则<a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">《Clean Code JavaScript》</a>。</p><p>本文是对其的翻译。</p><p>不必严格遵守本文的所有原则，有时少遵守一些效果可能会更好，具体应根据实际情况决定。这是根据《代码整洁之道》作者多年经验整理的代码优化建议，但也仅仅只是一份建议。</p><p>软件工程已经发展了 50 多年，至今仍在不断前进。现在，把这些原则当作试金石，尝试将他们作为团队代码质量考核的标准之一吧。</p><p>最后你需要知道的是，这些东西不会让你立刻变成一个优秀的工程师，长期奉行他们也并不意味着你能够高枕无忧不再犯错。千里之行，始于足下。我们需要时常和同行们进行代码评审，不断优化自己的代码。不要惧怕改善代码质量所需付出的努力，加油。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><h3 id="使用有意义，可读性好的变量名"><a href="#使用有意义，可读性好的变量名" class="headerlink" title="使用有意义，可读性好的变量名"></a>使用有意义，可读性好的变量名</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yyyymmdstr = moment().format(<span class="string">'YYYY/MM/DD'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yearMonthDay = moment().format(<span class="string">'YYYY/MM/DD'</span>);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用-ES6-的-const-定义常量"><a href="#使用-ES6-的-const-定义常量" class="headerlink" title="使用 ES6 的 const 定义常量"></a>使用 ES6 的 const 定义常量</h3><p>反例中使用”var”定义的”常量”是可变的。</p><p>在声明一个常量时，该常量在整个程序中都应该是不可变的。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FIRST_US_PRESIDENT = <span class="string">"George Washington"</span>;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FIRST_US_PRESIDENT = <span class="string">"George Washington"</span>;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="对功能类似的变量名采用统一的命名风格"><a href="#对功能类似的变量名采用统一的命名风格" class="headerlink" title="对功能类似的变量名采用统一的命名风格"></a>对功能类似的变量名采用统一的命名风格</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo();</span><br><span class="line">getClientData();</span><br><span class="line">getCustomerRecord();</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUser();</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用易于检索名称"><a href="#使用易于检索名称" class="headerlink" title="使用易于检索名称"></a>使用易于检索名称</h3><p>我们需要阅读的代码远比自己写的要多，使代码拥有良好的可读性且易于检索非常重要。阅读变量名晦涩难懂的代码对读者来说是一种相当糟糕的体验。<br>让你的变量名易于检索。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 525600 是什么?</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">525600</span>; i++) &#123;</span><br><span class="line">  runCronJob();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare them as capitalized `var` globals.</span></span><br><span class="line"><span class="keyword">var</span> MINUTES_IN_A_YEAR = <span class="number">525600</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; MINUTES_IN_A_YEAR; i++) &#123;</span><br><span class="line">  runCronJob();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用说明变量-即有意义的变量名"><a href="#使用说明变量-即有意义的变量名" class="headerlink" title="使用说明变量(即有意义的变量名)"></a>使用说明变量(即有意义的变量名)</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cityStateRegex = <span class="regexp">/^(.+)[,\\s]+(.+?)\s*(\d&#123;5&#125;)?$/</span>;</span><br><span class="line">saveCityState(cityStateRegex.match(cityStateRegex)[<span class="number">1</span>], cityStateRegex.match(cityStateRegex)[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADDRESS = <span class="string">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class="line"><span class="keyword">var</span> cityStateRegex = <span class="regexp">/^(.+)[,\\s]+(.+?)\s*(\d&#123;5&#125;)?$/</span>;</span><br><span class="line"><span class="keyword">var</span> match = ADDRESS.match(cityStateRegex)</span><br><span class="line"><span class="keyword">var</span> city = match[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> state = match[<span class="number">2</span>];</span><br><span class="line">saveCityState(city, state);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不要绕太多的弯子"><a href="#不要绕太多的弯子" class="headerlink" title="不要绕太多的弯子"></a>不要绕太多的弯子</h3><p>显式优于隐式。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> locations = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line">locations.forEach(<span class="function">(<span class="params">l</span>) =&gt;</span> &#123;</span><br><span class="line">  doStuff();</span><br><span class="line">  doSomeOtherStuff();</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// l是什么？</span></span><br><span class="line">  dispatch(l);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> locations = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line">locations.forEach(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span><br><span class="line">  doStuff();</span><br><span class="line">  doSomeOtherStuff();</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  dispatch(location);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免重复的描述"><a href="#避免重复的描述" class="headerlink" title="避免重复的描述"></a>避免重复的描述</h3><p>当类/对象名已经有意义时，对其变量进行命名不需要再次重复。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = &#123;</span><br><span class="line">  carMake: <span class="string">'Honda'</span>,</span><br><span class="line">  carModel: <span class="string">'Accord'</span>,</span><br><span class="line">  carColor: <span class="string">'Blue'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">  car.carColor = <span class="string">'Red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = &#123;</span><br><span class="line">  make: <span class="string">'Honda'</span>,</span><br><span class="line">  model: <span class="string">'Accord'</span>,</span><br><span class="line">  color: <span class="string">'Blue'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">  car.color = <span class="string">'Red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免无意义的条件判断"><a href="#避免无意义的条件判断" class="headerlink" title="避免无意义的条件判断"></a>避免无意义的条件判断</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> breweryName;</span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    breweryName = name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    breweryName = <span class="string">'Hipster Brew Co.'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> breweryName = name || <span class="string">'Hipster Brew Co.'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><h3 id="函数参数-理想情况下应不超过-2-个"><a href="#函数参数-理想情况下应不超过-2-个" class="headerlink" title="函数参数 (理想情况下应不超过 2 个)"></a>函数参数 (理想情况下应不超过 2 个)</h3><p>限制函数参数数量很有必要，这么做使得在测试函数时更加轻松。过多的参数将导致难以采用有效的测试用例对函数的各个参数进行测试。</p><p>应避免三个以上参数的函数。通常情况下，参数超过两个意味着函数功能过于复杂，这时需要重新优化你的函数。当确实需要多个参数时，大多情况下可以考虑这些参数封装成一个对象。</p><p>JS 定义对象非常方便，当需要多个参数时，可以使用一个对象进行替代。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title, body, buttonText, cancellable</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="string">'Foo'</span>,</span><br><span class="line">  body: <span class="string">'Bar'</span>,</span><br><span class="line">  buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">menuConfig</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="函数功能的单一性"><a href="#函数功能的单一性" class="headerlink" title="函数功能的单一性"></a>函数功能的单一性</h3><p>这是软件功能中最重要的原则之一。</p><p>功能不单一的函数将导致难以重构、测试和理解。功能单一的函数易于重构，并使代码更加干净。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> clientRecord = database.lookup(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">      email(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">    emailClientIfNeeded(client);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClientIfNeeded</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isClientActive(client)) &#123;</span><br><span class="line">    email(client);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isClientActive</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clientRecord = database.lookup(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="函数名应明确表明其功能"><a href="#函数名应明确表明其功能" class="headerlink" title="函数名应明确表明其功能"></a>函数名应明确表明其功能</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateAdd</span>(<span class="params">date, month</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 很难理解dateAdd(date, 1)是什么意思</span></span><br><span class="line">dateAdd(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateAddMonth</span>(<span class="params">date, month</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">dateAddMonth(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="函数应该只做一层抽象"><a href="#函数应该只做一层抽象" class="headerlink" title="函数应该只做一层抽象"></a>函数应该只做一层抽象</h3><p>当函数的需要的抽象多于一层时通常意味着函数功能过于复杂，需将其进行分解以提高其可重用性和可测试性。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> REGEXES = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> statements = code.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">let</span> tokens;</span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">REGEX</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ast;</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ast.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> REGEXES = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> statements = code.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">let</span> tokens;</span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">REGEX</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lexer</span>(<span class="params">tokens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ast;</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tokens = tokenize(code);</span><br><span class="line">  <span class="keyword">let</span> ast = lexer(tokens);</span><br><span class="line">  ast.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="移除重复的代码"><a href="#移除重复的代码" class="headerlink" title="移除重复的代码"></a>移除重复的代码</h3><p>永远、永远、永远不要在任何循环下有重复的代码。</p><p>这种做法毫无意义且潜在危险极大。重复的代码意味着逻辑变化时需要对不止一处进行修改。JS 弱类型的特点使得函数拥有更强的普适性。好好利用这一优点吧。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span>(<span class="params">developers</span>) </span>&#123;</span><br><span class="line">  developers.forEach(<span class="function"><span class="params">developer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">var</span> experience = developer.getExperience();</span><br><span class="line">    <span class="keyword">var</span> githubLink = developer.getGithubLink();</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      expectedSalary: expectedSalary,</span><br><span class="line">      experience: experience,</span><br><span class="line">      githubLink: githubLink</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span>(<span class="params">managers</span>) </span>&#123;</span><br><span class="line">  managers.forEach(<span class="function"><span class="params">manager</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">var</span> experience = manager.getExperience();</span><br><span class="line">    <span class="keyword">var</span> portfolio = manager.getMBAProjects();</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      expectedSalary: expectedSalary,</span><br><span class="line">      experience: experience,</span><br><span class="line">      portfolio: portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span>(<span class="params">employees</span>) </span>&#123;</span><br><span class="line">  employees.forEach(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">var</span> experience = employee.getExperience();</span><br><span class="line">    <span class="keyword">var</span> portfolio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (employee.type === <span class="string">'manager'</span>) &#123;</span><br><span class="line">      portfolio = employee.getMBAProjects();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      portfolio = employee.getGithubLink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      expectedSalary: expectedSalary,</span><br><span class="line">      experience: experience,</span><br><span class="line">      portfolio: portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="采用默认参数精简代码"><a href="#采用默认参数精简代码" class="headerlink" title="采用默认参数精简代码"></a>采用默认参数精简代码</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeForumComment</span>(<span class="params">subject, body</span>) </span>&#123;</span><br><span class="line">  subject = subject || <span class="string">'No Subject'</span>;</span><br><span class="line">  body = body || <span class="string">'No text'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeForumComment</span>(<span class="params">subject = <span class="string">'No subject'</span>, body = <span class="string">'No text'</span></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用-Object-assign-设置默认对象"><a href="#使用-Object-assign-设置默认对象" class="headerlink" title="使用 Object.assign 设置默认对象"></a>使用 Object.assign 设置默认对象</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="literal">null</span>,</span><br><span class="line">  body: <span class="string">'Bar'</span>,</span><br><span class="line">  buttonText: <span class="literal">null</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">'Foo'</span></span><br><span class="line">  config.body = config.body || <span class="string">'Bar'</span></span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">'Baz'</span></span><br><span class="line">  config.cancellable = config.cancellable === <span class="literal">undefined</span> ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(menuConfig);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="string">'Order'</span>,</span><br><span class="line">  <span class="comment">// User did not include 'body' key</span></span><br><span class="line">  buttonText: <span class="string">'Send'</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    title: <span class="string">'Foo'</span>,</span><br><span class="line">    body: <span class="string">'Bar'</span>,</span><br><span class="line">    buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">    cancellable: <span class="literal">true</span></span><br><span class="line">  &#125;, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// config now equals: &#123;title: "Order", body: "Bar", buttonText: "Send", cancellable: true&#125;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(menuConfig);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不要使用标记-Flag-作为函数参数"><a href="#不要使用标记-Flag-作为函数参数" class="headerlink" title="不要使用标记(Flag)作为函数参数"></a>不要使用标记(Flag)作为函数参数</h3><p>这通常意味着函数的功能的单一性已经被破坏。此时应考虑对函数进行再次划分。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name, temp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">    fs.create(<span class="string">'./temp/'</span> + name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.create(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  fs.create(<span class="string">'./temp/'</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  fs.create(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免副作用"><a href="#避免副作用" class="headerlink" title="避免副作用"></a>避免副作用</h3><p>当函数产生了除了“接受一个值并返回一个结果”之外的行为时，称该函数产生了副作用。比如写文件、修改全局变量或将你的钱全转给了一个陌生人等。</p><p>程序在某些情况下确实需要副作用这一行为，如先前例子中的写文件。这时应该将这些功能集中在一起，不要用多个函数/类修改某个文件。用且只用一个 service 完成这一需求。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// If we had another function that used this name, now it'd be an array and it could break it.</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Ryan McDermott'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  name = name.split(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">splitIntoFirstAndLastName();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name.split(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Ryan McDermott'</span></span><br><span class="line"><span class="keyword">var</span> newName = splitIntoFirstAndLastName(name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 'Ryan McDermott';</span></span><br><span class="line"><span class="built_in">console</span>.log(newName); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不要写全局函数"><a href="#不要写全局函数" class="headerlink" title="不要写全局函数"></a>不要写全局函数</h3><p>在 JS 中污染全局是一个非常不好的实践，这么做可能和其他库起冲突，且调用你的 API 的用户在实际环境中得到一个 exception 前对这一情况是一无所知的。</p><p>想象以下例子：如果你想扩展 JS 中的 Array，为其添加一个 <code>diff</code> 函数显示两个数组间的差异，此时应如何去做？你可以将 diff 写入 <code>Array.prototype</code>，但这么做会和其他有类似需求的库造成冲突。如果另一个库对 diff 的需求为比较一个数组中首尾元素间的差异呢？</p><p>使用 ES6 中的 class 对全局的 Array 做简单的扩展显然是一个更棒的选择。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.diff = <span class="function"><span class="keyword">function</span>(<span class="params">comparisonArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> values = [];</span><br><span class="line">  <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> comparisonArray) &#123;</span><br><span class="line">    hash[i] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hash[i]) &#123;</span><br><span class="line">      values.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  diff(comparisonArray) &#123;</span><br><span class="line">    <span class="keyword">var</span> values = [];</span><br><span class="line">    <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> comparisonArray) &#123;</span><br><span class="line">      hash[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hash[i]) &#123;</span><br><span class="line">        values.push(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="采用函数式编程"><a href="#采用函数式编程" class="headerlink" title="采用函数式编程"></a>采用函数式编程</h3><p>函数式的编程具有更干净且便于测试的特点。尽可能的使用这种风格吧。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> programmerOutput = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Uncle Bobby'</span>,</span><br><span class="line">    linesOfCode: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Suzie Q'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Jimmy Gosling'</span>,</span><br><span class="line">    linesOfCode: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Gracie Hopper'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> totalOutput = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; programmerOutput.length; i++) &#123;</span><br><span class="line">  totalOutput += programmerOutput[i].linesOfCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> programmerOutput = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Uncle Bobby'</span>,</span><br><span class="line">    linesOfCode: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Suzie Q'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Jimmy Gosling'</span>,</span><br><span class="line">    linesOfCode: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Gracie Hopper'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> totalOutput = programmerOutput</span><br><span class="line">  .map(<span class="function">(<span class="params">programmer</span>) =&gt;</span> programmer.linesOfCode)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">acc, linesOfCode</span>) =&gt;</span> acc + linesOfCode, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="封装判断条件"><a href="#封装判断条件" class="headerlink" title="封装判断条件"></a>封装判断条件</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fsm.state === <span class="string">'fetching'</span> &amp;&amp; isEmpty(listNode)) &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldShowSpinner</span>(<span class="params">fsm, listNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fsm.state === <span class="string">'fetching'</span> &amp;&amp; isEmpty(listNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shouldShowSpinner(fsmInstance, listNodeInstance)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免“否定情况”的判断"><a href="#避免“否定情况”的判断" class="headerlink" title="避免“否定情况”的判断"></a>避免“否定情况”的判断</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodeNotPresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isDOMNodeNotPresent(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodePresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDOMNodePresent(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免条件判断"><a href="#避免条件判断" class="headerlink" title="避免条件判断"></a>避免条件判断</h3><p>这看起来似乎不太可能。</p><p>大多人听到这的第一反应是：“怎么可能不用 if 完成其他功能呢？”许多情况下通过使用多态(polymorphism)可以达到同样的目的。</p><p>第二个问题在于采用这种方式的原因是什么。答案是我们之前提到过的：保持函数功能的单一性。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'777'</span>:</span><br><span class="line">        <span class="keyword">return</span> getMaxAltitude() - getPassengerCount();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Air Force One'</span>:</span><br><span class="line">        <span class="keyword">return</span> getMaxAltitude();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Cessna'</span>:</span><br><span class="line">        <span class="keyword">return</span> getMaxAltitude() - getFuelExpenditure();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> getMaxAltitude() - getPassengerCount();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> getMaxAltitude();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> getMaxAltitude() - getFuelExpenditure();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免类型判断-part-1"><a href="#避免类型判断-part-1" class="headerlink" title="避免类型判断(part 1)"></a>避免类型判断(part 1)</h3><p>JS 是弱类型语言，这意味着函数可接受任意类型的参数。</p><p>有时这会对你带来麻烦，你会对参数做一些类型判断。有许多方法可以避免这些情况。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Bicycle) &#123;</span><br><span class="line">    vehicle.peddle(<span class="keyword">this</span>.currentLocation, <span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">    vehicle.drive(<span class="keyword">this</span>.currentLocation, <span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle</span>) </span>&#123;</span><br><span class="line">  vehicle.move(<span class="keyword">this</span>.currentLocation, <span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免类型判断-part-2"><a href="#避免类型判断-part-2" class="headerlink" title="避免类型判断(part 2)"></a>避免类型判断(part 2)</h3><p>如果需处理的数据为字符串，整型，数组等类型，无法使用多态并仍有必要对其进行类型检测时，可以考虑使用 TypeScript。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">val1, val2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val1 == <span class="string">"number"</span> &amp;&amp; <span class="keyword">typeof</span> val2 == <span class="string">"number"</span> ||</span><br><span class="line">      <span class="keyword">typeof</span> val1 == <span class="string">"string"</span> &amp;&amp; <span class="keyword">typeof</span> val2 == <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val1 + val2;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must be of type String or Number'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">val1, val2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val1 + val2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免过度优化"><a href="#避免过度优化" class="headerlink" title="避免过度优化"></a>避免过度优化</h3><p>现代的浏览器在运行时会对代码自动进行优化。有时人为对代码进行优化可能是在浪费时间。</p><p><a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers" target="_blank" rel="noopener">这里可以找到许多真正需要优化的地方</a></p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 这里使用变量len是因为在老式浏览器中，</span></span><br><span class="line"><span class="comment">// 直接使用正例中的方式会导致每次循环均重复计算list.length的值，</span></span><br><span class="line"><span class="comment">// 而在现代浏览器中会自动完成优化，这一行为是没有必要的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="删除无效的代码"><a href="#删除无效的代码" class="headerlink" title="删除无效的代码"></a>删除无效的代码</h3><p>不再被调用的代码应及时删除。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newRequestModule</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = newRequestModule;</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, req, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newRequestModule</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = newRequestModule;</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, req, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a><strong>对象和数据结构</strong></h2><h3 id="使用-getters-和-setters"><a href="#使用-getters-和-setters" class="headerlink" title="使用 getters 和 setters"></a>使用 getters 和 setters</h3><p>JS 没有接口或类型，因此实现这一模式是很困难的，因为我们并没有类似 <code>public</code> 和 <code>private</code> 的关键词。</p><p>然而，使用 getters 和 setters 获取对象的数据远比直接使用点操作符具有优势。为什么呢？</p><ol><li>当需要对获取的对象属性执行额外操作时。</li><li>执行 <code>set</code> 时可以增加规则对要变量的合法性进行判断。</li><li>封装了内部逻辑。</li><li>在存取时可以方便的增加日志和错误处理。</li><li>继承该类时可以重载默认行为。</li><li>从服务器获取数据时可以进行懒加载。</li></ol><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">   <span class="keyword">this</span>.balance = <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buy shoes...</span></span><br><span class="line">bankAccount.balance = bankAccount.balance - <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">   <span class="keyword">this</span>.balance = <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// It doesn't have to be prefixed with `get` or `set` to be a getter/setter</span></span><br><span class="line">  withdraw(amount) &#123;</span><br><span class="line">  <span class="keyword">if</span> (verifyAmountCanBeDeducted(amount)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.balance -= amount;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buy shoes...</span></span><br><span class="line">bankAccount.withdraw(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="让对象拥有私有成员"><a href="#让对象拥有私有成员" class="headerlink" title="让对象拥有私有成员"></a>让对象拥有私有成员</h3><p>可以通过闭包完成</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> Employee = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Employee.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Employee name: '</span> + employee.getName()); <span class="comment">// Employee name: John Doe</span></span><br><span class="line"><span class="keyword">delete</span> employee.name;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Employee name: '</span> + employee.getName()); <span class="comment">// Employee name: undefined</span></span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Employee = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Employee</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Employee;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Employee name: '</span> + employee.getName()); <span class="comment">// Employee name: John Doe</span></span><br><span class="line"><span class="keyword">delete</span> employee.name;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Employee name: '</span> + employee.getName()); <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h2><h3 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则 (SRP)"></a>单一职责原则 (SRP)</h3><p>如《代码整洁之道》一书中所述，“修改一个类的理由不应该超过一个”。</p><p>将多个功能塞进一个类的想法很诱人，但这将导致你的类无法达到概念上的内聚，并经常不得不进行修改。</p><p>最小化对一个类需要修改的次数是非常有必要的。如果一个类具有太多太杂的功能，当你对其中一小部分进行修改时，将很难想象到这一修够对代码库中依赖该类的其他模块会带来什么样的影响。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(user) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeSettings(settings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.verifyCredentials(user)) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  verifyCredentials(user) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(user) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  verifyCredentials() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(user) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">    <span class="keyword">this</span>.auth = <span class="keyword">new</span> UserAuth(user)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeSettings(settings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.auth.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="开-闭原则-OCP"><a href="#开-闭原则-OCP" class="headerlink" title="开/闭原则 (OCP)"></a>开/闭原则 (OCP)</h3><p>“代码实体(类，模块，函数等)应该易于扩展，难于修改。”</p><p>这一原则指的是我们应允许用户方便的扩展我们代码模块的功能，而不需要打开 js 文件源码手动对其进行修改。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxRequester</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// What if we wanted another HTTP Method, like DELETE? We would have to</span></span><br><span class="line">    <span class="comment">// open this file up and modify this and put it in manually.</span></span><br><span class="line">    <span class="keyword">this</span>.HTTP_METHODS = [<span class="string">'POST'</span>, <span class="string">'PUT'</span>, <span class="string">'GET'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(url) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxRequester</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.HTTP_METHODS = [<span class="string">'POST'</span>, <span class="string">'PUT'</span>, <span class="string">'GET'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(url) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addHTTPMethod(method) &#123;</span><br><span class="line">    <span class="keyword">this</span>.HTTP_METHODS.push(method);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="利斯科夫替代原则-LSP"><a href="#利斯科夫替代原则-LSP" class="headerlink" title="利斯科夫替代原则 (LSP)"></a>利斯科夫替代原则 (LSP)</h3><p>“子类对象应该能够替换其超类对象被使用”。</p><p>也就是说，如果有一个父类和一个子类，当采用子类替换父类时不应该产生错误的结果。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render(area) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">this</span>.height = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = height;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span>(<span class="params">rectangles</span>) </span>&#123;</span><br><span class="line">  rectangles.forEach(<span class="function">(<span class="params">rectangle</span>) =&gt;</span> &#123;</span><br><span class="line">    rectangle.setWidth(<span class="number">4</span>);</span><br><span class="line">    rectangle.setHeight(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> area = rectangle.getArea(); <span class="comment">// BAD: Will return 25 for Square. Should be 20.</span></span><br><span class="line">    rectangle.render(area);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeRectangles(rectangles);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render(area) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setLength(length) &#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeShapes</span>(<span class="params">shapes</span>) </span>&#123;</span><br><span class="line">  shapes.forEach(<span class="function">(<span class="params">shape</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (shape.constructor.name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Square'</span>:</span><br><span class="line">        shape.setLength(<span class="number">5</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Rectangle'</span>:</span><br><span class="line">        shape.setWidth(<span class="number">4</span>);</span><br><span class="line">        shape.setHeight(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> area = shape.getArea();</span><br><span class="line">    shape.render(area);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shapes = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeShapes(shapes);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 (ISP)"></a>接口隔离原则 (ISP)</h3><p>“客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。”</p><p>在 JS 中，当一个类需要许多参数设置才能生成一个对象时，或许大多时候不需要设置这么多的参数。此时减少对配置参数数量的需求是有益的。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DOMTraverser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(settings) &#123;</span><br><span class="line">    <span class="keyword">this</span>.settings = settings;</span><br><span class="line">    <span class="keyword">this</span>.setup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">this</span>.rootNode = <span class="keyword">this</span>.settings.rootNode;</span><br><span class="line">    <span class="keyword">this</span>.animationModule.setup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  traverse() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> $ = <span class="keyword">new</span> DOMTraverser(&#123;</span><br><span class="line">  rootNode: <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>),</span><br><span class="line">  animationModule: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// Most of the time, we won't need to animate when traversing.</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DOMTraverser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(settings) &#123;</span><br><span class="line">    <span class="keyword">this</span>.settings = settings;</span><br><span class="line">    <span class="keyword">this</span>.options = settings.options;</span><br><span class="line">    <span class="keyword">this</span>.setup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">this</span>.rootNode = <span class="keyword">this</span>.settings.rootNode;</span><br><span class="line">    <span class="keyword">this</span>.setupOptions();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setupOptions() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.animationModule) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  traverse() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> $ = <span class="keyword">new</span> DOMTraverser(&#123;</span><br><span class="line">  rootNode: <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>),</span><br><span class="line">  options: &#123;</span><br><span class="line">    animationModule: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="依赖反转原则-DIP"><a href="#依赖反转原则-DIP" class="headerlink" title="依赖反转原则 (DIP)"></a>依赖反转原则 (DIP)</h3><p>该原则有两个核心点：</p><ol><li>高层模块不应该依赖于低层模块。他们都应该依赖于抽象接口。</li><li>抽象接口应该脱离具体实现，具体实现应该依赖于抽象接口。</li></ol><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryTracker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(items) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BAD: We have created a dependency on a specific request implementation.</span></span><br><span class="line">    <span class="comment">// We should just have requestItems depend on a request method: `request`</span></span><br><span class="line">    <span class="keyword">this</span>.requester = <span class="keyword">new</span> InventoryRequester();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItems() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.requester.requestItem(item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryRequester</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.REQ_METHODS = [<span class="string">'HTTP'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItem(item) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inventoryTracker = <span class="keyword">new</span> InventoryTracker([<span class="string">'apples'</span>, <span class="string">'bananas'</span>]);</span><br><span class="line">inventoryTracker.requestItems();</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryTracker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(items, requester) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = items;</span><br><span class="line">    <span class="keyword">this</span>.requester = requester;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItems() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.requester.requestItem(item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryRequesterV1</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.REQ_METHODS = [<span class="string">'HTTP'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItem(item) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryRequesterV2</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.REQ_METHODS = [<span class="string">'WS'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItem(item) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// By constructing our dependencies externally and injecting them, we can easily</span></span><br><span class="line"><span class="comment">// substitute our request module for a fancy new one that uses WebSockets.</span></span><br><span class="line"><span class="keyword">let</span> inventoryTracker = <span class="keyword">new</span> InventoryTracker([<span class="string">'apples'</span>, <span class="string">'bananas'</span>], <span class="keyword">new</span> InventoryRequesterV2());</span><br><span class="line">inventoryTracker.requestItems();</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用-ES6-的-classes-而不是-ES5-的-Function"><a href="#使用-ES6-的-classes-而不是-ES5-的-Function" class="headerlink" title="使用 ES6 的 classes 而不是 ES5 的 Function"></a>使用 ES6 的 classes 而不是 ES5 的 Function</h3><p>典型的 ES5 的类(function)在继承、构造和方法定义方面可读性较差。</p><p>当需要继承时，优先选用 classes。</p><p>但是，当在需要更大更复杂的对象时，最好优先选择更小的 function 而非 classes。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Animal = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Animal)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Instantiate Animal with `new`"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Mammal = <span class="function"><span class="keyword">function</span>(<span class="params">age, furColor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Mammal)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Instantiate Mammal with `new`"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Animal.call(<span class="keyword">this</span>, age);</span><br><span class="line">    <span class="keyword">this</span>.furColor = furColor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Mammal.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</span><br><span class="line">Mammal.prototype.constructor = Mammal;</span><br><span class="line">Mammal.prototype.liveBirth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Human = <span class="function"><span class="keyword">function</span>(<span class="params">age, furColor, languageSpoken</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Human)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Instantiate Human with `new`"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mammal.call(<span class="keyword">this</span>, age, furColor);</span><br><span class="line">    <span class="keyword">this</span>.languageSpoken = languageSpoken;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Human.prototype = <span class="built_in">Object</span>.create(Mammal.prototype);</span><br><span class="line">Human.prototype.constructor = Human;</span><br><span class="line">Human.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    move() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, furColor) &#123;</span><br><span class="line">        <span class="keyword">super</span>(age);</span><br><span class="line">        <span class="keyword">this</span>.furColor = furColor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    liveBirth() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, furColor, languageSpoken) &#123;</span><br><span class="line">        <span class="keyword">super</span>(age, furColor);</span><br><span class="line">        <span class="keyword">this</span>.languageSpoken = languageSpoken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    speak() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用方法链"><a href="#使用方法链" class="headerlink" title="使用方法链"></a>使用方法链</h3><p>这里我们的理解与《代码整洁之道》的建议有些不同。</p><p>有争论说方法链不够干净且违反了<a href="https://en.wikipedia.org/wiki/Law_of_Demeter" target="_blank" rel="noopener">德米特法则</a>，也许这是对的，但这种方法在 JS 及许多库(如 JQuery)中显得非常实用。</p><p>因此，我认为在 JS 中使用方法链是非常合适的。在 class 的函数中返回 this，能够方便的将类需要执行的多个方法链接起来。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = <span class="string">'Honda'</span>;</span><br><span class="line">    <span class="keyword">this</span>.model = <span class="string">'Accord'</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'white'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car();</span><br><span class="line">car.setColor(<span class="string">'pink'</span>);</span><br><span class="line">car.setMake(<span class="string">'Ford'</span>);</span><br><span class="line">car.setModel(<span class="string">'F-150'</span>)</span><br><span class="line">car.save();</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = <span class="string">'Honda'</span>;</span><br><span class="line">    <span class="keyword">this</span>.model = <span class="string">'Accord'</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'white'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car()</span><br><span class="line">  .setColor(<span class="string">'pink'</span>)</span><br><span class="line">  .setMake(<span class="string">'Ford'</span>)</span><br><span class="line">  .setModel(<span class="string">'F-150'</span>)</span><br><span class="line">  .save();</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="优先使用组合模式而非继承"><a href="#优先使用组合模式而非继承" class="headerlink" title="优先使用组合模式而非继承"></a>优先使用组合模式而非继承</h3><p>在著名的<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noopener">设计模式</a>一书中提到，应多使用组合模式而非继承。</p><p>这么做有许多优点，在想要使用继承前，多想想能否通过组合模式满足需求吧。</p><p>那么，在什么时候继承具有更大的优势呢？这取决于你的具体需求，但大多情况下，可以遵守以下三点：</p><ol><li>继承关系表现为”是一个”而非”有一个”(如动物-&gt;人 和 用户-&gt;用户细节)</li><li>可以复用基类的代码(“Human”可以看成是”All animal”的一种)</li><li>希望当基类改变时所有派生类都受到影响(如修改”all animals”移动时的卡路里消耗量)</li></ol><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, email) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad because Employees "have" tax data. EmployeeTaxData is not a type of Employee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(ssn, salary) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.ssn = ssn;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, email) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTaxData(ssn, salary) &#123;</span><br><span class="line">    <span class="keyword">this</span>.taxData = <span class="keyword">new</span> EmployeeTaxData(ssn, salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(ssn, salary) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ssn = ssn;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h2><p><a href="http://gotwarlost.github.io/istanbul/" target="_blank" rel="noopener">一些好的覆盖工具</a>。</p><p><a href="http://jstherightway.org/#testing-tools" target="_blank" rel="noopener">一些好的 JS 测试框架</a>。</p><h3 id="单一的测试每个概念"><a href="#单一的测试每个概念" class="headerlink" title="单一的测试每个概念"></a>单一的测试每个概念</h3><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'MakeMomentJSGreatAgain'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'handles date boundaries'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date;</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'1/1/2015'</span>);</span><br><span class="line">    date.addDays(<span class="number">30</span>);</span><br><span class="line">    date.shouldEqual(<span class="string">'1/31/2015'</span>);</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'2/1/2016'</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    assert.equal(<span class="string">'02/29/2016'</span>, date);</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'2/1/2015'</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    assert.equal(<span class="string">'03/01/2015'</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'MakeMomentJSGreatAgain'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'handles 30-day months'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'1/1/2015'</span>);</span><br><span class="line">    date.addDays(<span class="number">30</span>);</span><br><span class="line">    date.shouldEqual(<span class="string">'1/31/2015'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles leap year'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'2/1/2016'</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    assert.equal(<span class="string">'02/29/2016'</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles non-leap year'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'2/1/2015'</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    assert.equal(<span class="string">'03/01/2015'</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a><strong>并发</strong></h2><h3 id="用-Promises-替代回调"><a href="#用-Promises-替代回调" class="headerlink" title="用 Promises 替代回调"></a>用 Promises 替代回调</h3><p>回调不够整洁并会造成大量的嵌套。ES6 内嵌了 Promises，使用它吧。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'request'</span>).get(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'fs'</span>).writeFile(<span class="string">'article.html'</span>, response.body, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'File written'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'request-promise'</span>).get(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'fs-promise'</span>).writeFile(<span class="string">'article.html'</span>, response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File written'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="Async-Await-是较-Promises-更好的选择"><a href="#Async-Await-是较-Promises-更好的选择" class="headerlink" title="Async/Await 是较 Promises 更好的选择"></a>Async/Await 是较 Promises 更好的选择</h3><p>Promises 是较回调而言更好的一种选择，但 ES7 中的 async 和 await 更胜过 Promises。</p><p>在能使用 ES7 特性的情况下可以尽量使用他们替代 Promises。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'request-promise'</span>).get(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'fs-promise'</span>).writeFile(<span class="string">'article.html'</span>, response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File written'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getCleanCodeArticle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">await</span> <span class="built_in">require</span>(<span class="string">'request-promise'</span>)</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> request.get(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>);</span><br><span class="line">    <span class="keyword">var</span> fileHandle = <span class="keyword">await</span> <span class="built_in">require</span>(<span class="string">'fs-promise'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> fileHandle.writeFile(<span class="string">'article.html'</span>, response);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File written'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a><strong>错误处理</strong></h2><p>错误抛出是个好东西！这使得你能够成功定位运行状态中的程序产生错误的位置。</p><h3 id="别忘了捕获错误"><a href="#别忘了捕获错误" class="headerlink" title="别忘了捕获错误"></a>别忘了捕获错误</h3><p>对捕获的错误不做任何处理是没有意义的。</p><p>代码中 <code>try/catch</code> 的意味着你认为这里可能出现一些错误，你应该对这些可能的错误存在相应的处理方案。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// One option (more noisy than console.log):</span></span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  notifyUserOfError(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  reportErrorToService(error);</span><br><span class="line">  <span class="comment">// OR do all three!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="不要忽略被拒绝的-promises"><a href="#不要忽略被拒绝的-promises" class="headerlink" title="不要忽略被拒绝的 promises"></a>不要忽略被拒绝的 promises</h3><p>理由同 <code>try/catch</code>。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getdata()</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  functionThatMightThrow(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getdata()</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  functionThatMightThrow(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// One option (more noisy than console.log):</span></span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  notifyUserOfError(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  reportErrorToService(error);</span><br><span class="line">  <span class="comment">// OR do all three!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a><strong>格式化</strong></h2><p>格式化是一件主观的事。如同这里的许多规则一样，这里并没有一定/立刻需要遵守的规则。可以在<a href="http://standardjs.com/rules.html" target="_blank" rel="noopener">这里</a>完成格式的自动化。</p><h3 id="大小写一致"><a href="#大小写一致" class="headerlink" title="大小写一致"></a>大小写一致</h3><p>JS 是弱类型语言，合理的采用大小写可以告诉你关于变量/函数等的许多消息。</p><p>这些规则是主观定义的，团队可以根据喜欢进行选择。重点在于无论选择何种风格，都需要注意保持一致性。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> daysInMonth = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> songs = [<span class="string">'Back In Black'</span>, <span class="string">'Stairway to Heaven'</span>, <span class="string">'Hey Jude'</span>];</span><br><span class="line"><span class="keyword">var</span> Artists = [<span class="string">'ACDC'</span>, <span class="string">'Led Zeppelin'</span>, <span class="string">'The Beatles'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restore_database</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alpaca</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> DAYS_IN_MONTH = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> songs = [<span class="string">'Back In Black'</span>, <span class="string">'Stairway to Heaven'</span>, <span class="string">'Hey Jude'</span>];</span><br><span class="line"><span class="keyword">var</span> artists = [<span class="string">'ACDC'</span>, <span class="string">'Led Zeppelin'</span>, <span class="string">'The Beatles'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restoreDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alpaca</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="调用函数的函数和被调函数应放在较近的位置"><a href="#调用函数的函数和被调函数应放在较近的位置" class="headerlink" title="调用函数的函数和被调函数应放在较近的位置"></a>调用函数的函数和被调函数应放在较近的位置</h3><p>当函数间存在相互调用的情况时，应将两者置于较近的位置。</p><p>理想情况下，应将调用其他函数的函数写在被调用函数的上方。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(employee) &#123;</span><br><span class="line">    <span class="keyword">this</span>.employee = employee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lookupPeers() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'peers'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lookupMananger() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'manager'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getPeerReviews() &#123;</span><br><span class="line">    <span class="keyword">let</span> peers = <span class="keyword">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  perfReview() &#123;</span><br><span class="line">      getPeerReviews();</span><br><span class="line">      getManagerReview();</span><br><span class="line">      getSelfReview();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getManagerReview() &#123;</span><br><span class="line">    <span class="keyword">let</span> manager = <span class="keyword">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelfReview() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> review = <span class="keyword">new</span> PerformanceReview(user);</span><br><span class="line">review.perfReview();</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(employee) &#123;</span><br><span class="line">    <span class="keyword">this</span>.employee = employee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  perfReview() &#123;</span><br><span class="line">      getPeerReviews();</span><br><span class="line">      getManagerReview();</span><br><span class="line">      getSelfReview();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getPeerReviews() &#123;</span><br><span class="line">    <span class="keyword">let</span> peers = <span class="keyword">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lookupPeers() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'peers'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getManagerReview() &#123;</span><br><span class="line">    <span class="keyword">let</span> manager = <span class="keyword">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lookupMananger() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'manager'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelfReview() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.perfReview();</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><h3 id="只对存在一定业务逻辑复杂性的代码进行注释"><a href="#只对存在一定业务逻辑复杂性的代码进行注释" class="headerlink" title="只对存在一定业务逻辑复杂性的代码进行注释"></a>只对存在一定业务逻辑复杂性的代码进行注释</h3><p>注释并不是必须的，好的代码是能够让人一目了然，不用过多无谓的注释。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashIt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// The hash</span></span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Length of string</span></span><br><span class="line">  <span class="keyword">var</span> length = data.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop through every character in data</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">// Get character code.</span></span><br><span class="line">    <span class="keyword">var</span> char = data.charCodeAt(i);</span><br><span class="line">    <span class="comment">// Make the hash</span></span><br><span class="line">    hash = ((hash &lt;&lt; <span class="number">5</span>) - hash) + char;</span><br><span class="line">    <span class="comment">// Convert to 32-bit integer</span></span><br><span class="line">    hash = hash &amp; hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashIt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> length = data.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> char = data.charCodeAt(i);</span><br><span class="line">    hash = ((hash &lt;&lt; <span class="number">5</span>) - hash) + char;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert to 32-bit integer</span></span><br><span class="line">    hash = hash &amp; hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不要在代码库中遗留被注释掉的代码"><a href="#不要在代码库中遗留被注释掉的代码" class="headerlink" title="不要在代码库中遗留被注释掉的代码"></a>不要在代码库中遗留被注释掉的代码</h3><p>版本控制的存在是有原因的。让旧代码存在于你的 history 里吧。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doStuff();</span><br><span class="line"><span class="comment">// doOtherStuff();</span></span><br><span class="line"><span class="comment">// doSomeMoreStuff();</span></span><br><span class="line"><span class="comment">// doSoMuchStuff();</span></span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doStuff();</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不需要版本更新类型注释"><a href="#不需要版本更新类型注释" class="headerlink" title="不需要版本更新类型注释"></a>不需要版本更新类型注释</h3><p>记住，我们可以使用版本控制。废代码、被注释的代码及用注释记录代码中的版本更新说明都是没有必要的。</p><p>需要时可以使用 <code>git log</code> 获取历史版本。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2016-12-20: Removed monads, didn't understand them (RM)</span></span><br><span class="line"><span class="comment"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class="line"><span class="comment"> * 2016-02-03: Removed type-checking (LI)</span></span><br><span class="line"><span class="comment"> * 2015-03-14: Added combine with type-checking (JR)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免位置标记"><a href="#避免位置标记" class="headerlink" title="避免位置标记"></a>避免位置标记</h3><p>这些东西通常只能代码麻烦，采用适当的缩进就可以了。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Scope Model Instantiation</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">let</span> $scope.model = &#123;</span><br><span class="line">  menu: <span class="string">'foo'</span>,</span><br><span class="line">  nav: <span class="string">'bar'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Action setup</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">let</span> actions = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> $scope.model = &#123;</span><br><span class="line">  menu: <span class="string">'foo'</span>,</span><br><span class="line">  nav: <span class="string">'bar'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actions = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免在源文件中写入法律评论"><a href="#避免在源文件中写入法律评论" class="headerlink" title="避免在源文件中写入法律评论"></a>避免在源文件中写入法律评论</h3><p>将你的 <code>LICENSE</code> 文件置于源码目录树的根目录。</p><p><strong>反例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The MIT License (MIT)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Copyright (c) 2016 Ryan McDermott</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment">of this software and associated documentation files (the "Software"), to deal</span></span><br><span class="line"><span class="comment">in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="comment">copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment">furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="comment">copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></span><br><span class="line"><span class="comment">SOFTWARE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateBill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>正例</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateBill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><a href="#目录">回到目录</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 编码规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员的三门课》 读书笔记</title>
      <link href="/2019/10/21/three-courses-for-programmers-cpt-1/"/>
      <url>/2019/10/21/three-courses-for-programmers-cpt-1/</url>
      
        <content type="html"><![CDATA[<p>第一章主要讲述的是程序员技能与成长，作者从编程语言的选择到代码测试，从使用工具来武装自己到提倡一切自动化，由浅入深的介绍了程序员的入门及学习方法。 其中作者强调了清单和流程在日常协作过程中的重要性，作为一个高级工程师，应该具备凡事有清单，做事有规范，协作有流程的基本素养; 具备快速定位和解决问题的能力。</p><a id="more"></a><h2 id="六何法"><a href="#六何法" class="headerlink" title="六何法"></a>六何法</h2><p>六何法又叫做6W或5W1H分析法，即What、Who、When、Where、Why及How，需要我们在学习的过程中多思考，多问问题。</p><h2 id="测试驱动设计有3个原则"><a href="#测试驱动设计有3个原则" class="headerlink" title="测试驱动设计有3个原则"></a>测试驱动设计有3个原则</h2><ul><li>原则 1： 无测试，不代码。</li><li>原则 2： 单元测试不在多，能够识别出问题即可。</li><li>原则 3： 代码不在多，让当前单元测试全部通过即可。</li></ul><blockquote><p>重构，是为了更好的前行！</p></blockquote><h2 id="代码审查"><a href="#代码审查" class="headerlink" title="代码审查"></a>代码审查</h2><p>代码审查这件事其实是可以标准化和流程化的，其效果在一定程度上也是可以量化的。要想做好代码审查，有一份审查清单是非常有必要的。一般来说，审查清单应该包括如下几大类目：</p><ul><li>代码结构</li><li>代码安全性</li><li>代码性能</li><li>代码注释</li><li>单元测试</li><li>代码优化</li></ul><p>一般来讲，代码审查的行数要控制在200以内，不能超过400行。</p><h2 id="清单和模板"><a href="#清单和模板" class="headerlink" title="清单和模板"></a>清单和模板</h2><h3 id="为什么需要清单和模板？"><a href="#为什么需要清单和模板？" class="headerlink" title="为什么需要清单和模板？"></a>为什么需要清单和模板？</h3><p>  原因如下：</p><ul><li>面对复杂的问题，做决策往往不容易。</li><li>要建立应急处理机制，简单、直接、有效。</li><li>要有应对各种问题的清单。</li></ul><h3 id="解决问题时要有如下步骤："><a href="#解决问题时要有如下步骤：" class="headerlink" title="解决问题时要有如下步骤："></a>解决问题时要有如下步骤：</h3><ul><li>出了什么问题，汇总问题和现象，试着探究原因。</li><li>找到解决问题的流程，应该谁负责驱动，流程有哪些环节，有哪些可选方案。</li><li>按步骤解决问题。</li></ul><p>要让清单成为一种习惯，清单就应该足够简单、清晰并且深入人心。同时，清单应该嵌入流程之中，只有在流程中，才能收到关注和持续运营，从侧面治理的模式往往会名存实亡。</p><h2 id="程序员工作法则"><a href="#程序员工作法则" class="headerlink" title="程序员工作法则"></a>程序员工作法则</h2><blockquote><p>YAGNI : You Ain’t Gonna Need it, 你不会需要它。 意思是： 如果不必要，别增加复杂度。</p></blockquote><ul><li>工具化法则</li><li>自动化法则<br>自动化测试的的核心问题有两个：一个是分层，一个是稳定。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 进阶心法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript设计模式》读后笔记</title>
      <link href="/2019/10/15/design-pattern/"/>
      <url>/2019/10/15/design-pattern/</url>
      
        <content type="html"><![CDATA[<h2 id="鸭式辩型"><a href="#鸭式辩型" class="headerlink" title="鸭式辩型"></a>鸭式辩型</h2><p>类是否声明自己支持哪些接口并不重要，只要它具有这些接口中的方法就行，（像鸭子一样走路并且嘎嘎叫的就是鸭子），鸭式辩型正式基于这样的认识，他把对象实现的方法及作为判断他是不是某个类的实例的唯一标准，这种技术在检查一个类是否实现了某个接口时也可以大显身手，这种方法的背后的观点很简单：如果对象具有与接口定义的方法同名的所有方法，那么就可以认为他实现了这个接口。</p><a id="more"></a><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>把成员对象的创建工作转交给一个外部对象。这个外部对象可以是一个简单的命名空间，也可以是一个类的实例。如果负责创建实例的方法的逻辑不会发生变化，那么一般来说用单体或者静态类方法创建这些成员实例是合乎情理的。<br>真正的工厂模式与简单工厂模式的区别在于，它是不是使用一个类或对象来创建实例的，而是使用一个子类，按照正式定义，工厂是一个将其成员对象的实例化推迟到子类中进行的类。<br>工厂模式的适用场合：</p><ol><li>动态实现</li><li>节省设置开销</li><li>用许多小型对象组成一个大对象</li></ol><p>桥接模式：将抽象与其实现隔离开来，以便二者独立变化；如果一个桥接函数被用于链接两个函数，而其中的某个函数根本不会在桥接函数之外被调用，那么此时这个桥接函数就不是非要不可，你可以放心的将他删除。</p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>组合模式是一种专为创建web上的动态用户界面而量身制作的模式，使用这种模式可以用一条命令在多个对象上激发复杂的或者递归的行为。这可以简化粘和性代码，使其更容易维护，而那些复杂行为则被委托给各个对象。两个好处：<br>你可以用同样的方法处理对象的集合与其中的特定的子对象。<br>它可以用来把一批子对象组织成树形结构。<br>如：在设计表单校验时，可以将一个完整的<code>Form</code>分成多个<code>fieldSet</code>，然后对每个<code>fieldSet</code>增加<code>validate()</code>方法，在最终的保存校验时，只需要遍历每个fieldSet的<code>validate()</code>方法就可以得到完整的校验结果。</p><h2 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h2><p>门面模式有两个作用：一是简化类的接口；二是消除类与使用他的客户代码之间的耦合。在JS中，它几乎是所有JS库的核心原则，通过创建一些遍历方法让复杂系统变得更加简单易用。<br>其实，门面模式就是对同类复杂代码的封装，使其调用起来更方便，而不用关注不同的复杂情况下的差异性判断。<br>门面模式的另一个好处表现在对函数的组合上，这些组合而得的函数又叫便利函数，此处可以联想到函数柯里化或者redux的内部实现上。<br>可能存在的弊端：有时执行一个比较庞杂的门面函数，其组成的函数在力度方面更有吸引力，这是因为门面函数可能常常会执行一些并不需要的任务。这就需要在门面函数时，尽可能的负责单一职责原则，从而减低函数间的耦合。也可以通过门面模式间的嵌套还解决。</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式可用来在现有接口和不兼容的类之间进行适配。适用这种模式的对象也叫包装器（wrapper），因为它们是在用一个新的接口包装另一个对象。<br>适配器可以被添加到现有代码中以协调两个不同的接口，如果现有代码的接口能很好的满足需要，那就可能没有必要适用适配器。但要是现有接口对于手头的工作来说不够直观或者适用，那么可以使用适配器来提供一个更简洁或更丰富（option-rich）的接口。<br>从表面上看，适配器模式很像门面模式，他们都要对别的对象进行包装并改变其呈现的接口。二者的差别在于他们如何改变接口。、门面元素展现的是一个简化的接口，它并不提供额外的选择，而且有时为了方便完成常见任务他还会做出一些假定。而适配器则要把一个接口转换成另一个接口，他并不会滤除某些能力，也不会简化接口。如果客户系统期待的API不可用，那就需要用到适配器。<br>适配器可被实现为不兼容的方法调用之间的一个代码薄层。</p><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>装饰者模式（decorator pattern）可以用来透明的把对象包装在具有同样接口的另一个对象之中。这样一来，你可以给一个方法添加一些行为，然后将方法调用传递给原始对象。相对于创建子类来说，使用装饰者对象是一种更灵活的选择。</p><p>组合模式与装饰者模式比较：<br>组合模式是一种结构型模式，用于把众多子对象组织成一个成立，借此程序员与大批对象打交道时可以将他们当做一个对象来对待，并将他们组织为层次性的树。通常他并不修改方法调用，而只是将其沿组合对象与子对象的链向下传递，知道到达并落实再叶对象上。<br>装饰者模式也是一种结构型模式，但它并非用于组织对象，而是用于在不修改现有对象或从其派生子类的前提下为其增添职责<br>尽管简单的组合对象可等同于简单的装饰者，这二者却有着不同的焦点。组合对象并不修改方法调用，其着眼点在于组织子对象。而装饰着存在的唯一目的就是修改方法调用而不是组织子对象，因为子对象只有一个。</p><p>装饰者模式的适用场景：</p><ul><li><p>如果需要为类增添特性或职责，而从该类派生子类的解决方法并不实际的话，就应该适用装饰者模式，派生自雷之所以会不实际，最常见的原因是需要增加的特性的数量和组合要求适用大量子类。</p></li><li><p>如果需要为对象增添特性而又不想改变适用该对象的代码的话，可以采用装饰者模式。因为装饰者可以动态而又透明的修改对象，所以他们很适用于修改现有系统这一任务。相比卷入创建和维护子类的麻烦，创建和应用一些装饰者往往要省事的很多。</p></li></ul><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>flyweight（共享，元素）它最适用于解决因创建大量类似对象而累积性能的问题。核心是共享。<br>享元模式用于减少应用程序所需对象的数量。这是通过将对象的内部状态划分为内在数据和外在数据两类而实现的。内在数据是指类的内部方法所需要的信息，没有这种数据的话类就不能正常运转。外在数据则是可以从类身上剥离并存储在其外部的信息。我们可以将内在状态相同的所有对象替换为同一个共享对象，用这种方法可以把对象数量减少到不同内在状态的数量。<br>创建这种共享对象需要使用工厂，而不是普通的构造函数。这样做可以跟踪到已经实例化的各个对象，从而仅当所需对象的内在状态不同于已有对象时才创建一个新对象。对象的外在状态被保存在一个管理器对象中。在调用对象的方法时，管理器会把这些外在状态作为参数传入。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理是一个对象，它可以用来控制对另一个对象的访问，他与另外那个对象实现了同样的接口，并且会把任何方法调用传递给那个对象。另外那个对象通常称为本体（real subject)。代理可以代替其本体被实例化，并使其可以被远程访问。他还可以把本题的实例化推迟到真正需要的时候，对于实例化比较费时的本体，或者因尺寸比较大以至于不用时不宜保存在内存中的本体，这特别有用。在处理那些需要较长时间才能吧数据载入用户界面的类时，代理也大有裨益。<br>代理模式最基本的形式是对访问进行控制。</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>在事件驱动的环境中，比如浏览器这种持续寻求用户关注的环境中，观察者模式是一种管理人与其任务之间的关系（确切的讲，是对象及其行为和状态之间的关系）的得力工具。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>它可以用来对方法调用进行参数化处理和传送，经过这样处理过的方法调用可以在任何需要的时候执行。它也可用来消除调用操作的对象和实现操作的对象之间的耦合，这位各种具体的类的更换带来了极大的灵活性。这种模式也可以用在许多不同的场合，不过它在创建用户界面这一方面非常有用，特别是在需要不受限（unlimited）取消（undo）操作的时候，它还可以用来替代回调函数，因为他能够提高在对象之间传递的操作的模块化程度。<br>最简单的命令对象是一个操作和用以调用这个操作的对象的结合体。</p><h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><p>他可以用来消除请求的发送者和接受者之间的耦合，这是通过实现一个由隐式的对请求进行处理的对象组成的链而做到的，链中的每个对象可以处理请求，也可以将其传给下一个对象。js内部就是用了这种模式来处理时间捕获和冒泡的问题。<br>职责链由多个不同类型的对象组成。发送这是发出请求的对象，接受者是链中那些接受这种请求并且对其进行处理或传递的对象，请求本身有时也是一个对象，它封装着对操作有关的所有数据。其典型的运转流程大致是：<br>发送者知道链中的第一个接受者，他向这个接收者发出请求；<br>每一个接受者都对请求进行分析，然后要么处理他，要么将其往下传递。<br>每一个接受者知道的其他对象只有一个，即它在链中的下家（successor）；<br>如果没有任何接受者处理请求，那么请求将从链上离开。不同的实现对此有不同的反应，既可能无声无息，也可能抛出一个错误。<br>职责链模式的适用场合：<br>如果事先不知道在几个对象中有哪些能够处理请求，那么这就属于应该使用职责链的情况。如果这批处理器对象在开发期间不可知，而是需要动态指定的话，那么也应该使用这种模式。该模式还可以用在对于每个请求都不止有一个对象可以对他进行处理这种情况下。<br>使用这种模式，可以把特定的具体类与客户隔离开，并代之以一条由弱耦合的对象组成的链，他将隐式的对请求进行处理。这有助于提高代码的模块化程度和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npx是什么？它和npm什么关系？</title>
      <link href="/2019/09/26/what-is-npx/"/>
      <url>/2019/09/26/what-is-npx/</url>
      
        <content type="html"><![CDATA[<p><code>npx</code>是一个工具，<code>npm</code> v5.2.0引入的一条命令（npx），一个<code>npm</code>包执行器，旨在提高从<code>npm</code>注册表使用软件包的体验 ，<code>npm</code>使得它非常容易地安装和管理托管在注册表上的依赖项，<code>npx</code>使得使用CLI工具和其他托管在注册表。它大大简化了一些事情。</p><a id="more"></a><p>就像<code>npm</code>极大地提升了我们安装和管理包依赖的体验，在<code>npm</code>的基础之上，<code>npx</code>让<code>npm</code>包中的命令行工具和其他可执行文件在使用上变得更加简单。它极大地简化了我们之前使用纯粹的<code>npm</code>时所需要的大量步骤。</p><p>那么下面更详细的举例让你更加理解：使用<code>create-react-app</code>创建一个<code>react</code>项目。</p><p>老方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure><p>npx方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure><p>这条命令会临时安装 <code>create-react-app</code> 包，命令完成后<code>create-react-app</code> 会删掉，不会出现在 <code>global</code>中。下次再执行，还是会重新临时安装。</p><p><code>npx</code> 会帮你执行依赖包里的二进制文件。</p><p>举例来说，之前我们可能会写这样的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack</span><br><span class="line">./node_modules/.bin/webpack -v</span><br></pre></td></tr></table></figure><p>如果你对 <code>bash</code> 比较熟，可能会写成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack`npm bin`/webpack -v</span><br></pre></td></tr></table></figure><p>有了 <code>npx</code>，你只需要这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack</span><br><span class="line">npx webpack -v</span><br></pre></td></tr></table></figure><p>也就是说 <code>npx</code> 会自动查找当前依赖包中的可执行文件，如果找不到，就会去 <code>PATH</code> 里找。如果依然找不到，就会帮你安装！</p><p><code>npx</code> 甚至支持运行远程仓库的可执行文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx github:piuccio/cowsay hello</span><br></pre></td></tr></table></figure><p>再比如 <code>npx http-server</code> 可以一句话帮你开启一个静态服务器！（第一次运行会稍微慢一些）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx http-server</span><br></pre></td></tr></table></figure><p>指定node版本来运行<code>npm scripts</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx -p node@8 npm run build</span><br></pre></td></tr></table></figure><p>主要特点：</p><ul><li>临时安装可执行依赖包，不用全局安装，不用担心长期的污染。</li><li>可以执行依赖包中的命令，安装完成自动运行。</li><li>自动加载node_modules中依赖包，不用指定$PATH。</li><li>可以指定node版本、命令的版本，解决了不同项目使用不同版本的命令的问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式五大原则（SOLID）和一大法则</title>
      <link href="/2019/09/26/six-design-principle/"/>
      <url>/2019/09/26/six-design-principle/</url>
      
        <content type="html"><![CDATA[<h2 id="单一职责原则-（Single-Responsibility-Principle，SRP）"><a href="#单一职责原则-（Single-Responsibility-Principle，SRP）" class="headerlink" title="单一职责原则 （Single Responsibility Principle，SRP）"></a>单一职责原则 （Single Responsibility Principle，SRP）</h2><p>一个类只负责一个功能领域的相应职责， 或者可以定义为：就一个类而言，应该只有一个引起他变化的原因。</p><a id="more"></a><h2 id="开闭原则-（Open-Closed-Principle，OCP）"><a href="#开闭原则-（Open-Closed-Principle，OCP）" class="headerlink" title="开闭原则 （Open-Closed Principle，OCP）"></a>开闭原则 （Open-Closed Principle，OCP）</h2><p>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><h2 id="里式替换原则（Liskov-Substitution-Principle，-LSP）"><a href="#里式替换原则（Liskov-Substitution-Principle，-LSP）" class="headerlink" title="里式替换原则（Liskov Substitution Principle， LSP）"></a>里式替换原则（Liskov Substitution Principle， LSP）</h2><p>所有引用基类（父类）的地方必须能透明的使用其子类的对象。</p><h2 id="依赖倒置原则（Dependency-Inversion-Principle，-DIP）"><a href="#依赖倒置原则（Dependency-Inversion-Principle，-DIP）" class="headerlink" title="依赖倒置原则（Dependency Inversion Principle， DIP）"></a>依赖倒置原则（Dependency Inversion Principle， DIP）</h2><p>抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</p><h2 id="接口隔离原则（Interface-Segregation-Principle，-ISP）"><a href="#接口隔离原则（Interface-Segregation-Principle，-ISP）" class="headerlink" title="接口隔离原则（Interface Segregation Principle， ISP）"></a>接口隔离原则（Interface Segregation Principle， ISP）</h2><p>使用多个专门的接口，而不是单一的总接口。即客户端不应该以来那些他不需要的接口。</p><p>根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。每一个接口应该承担一种相对独立的角色，不敢不该干的事，该干的事情都要干。这里的接口往往有两种不同的含义：一种是指一个类型所具有的的方法特征的集合。仅仅是一种逻辑上的抽象；另外一种是指某种语言具体的接口定义。有严格的定义和接口，比如Java语言中的interface，对于这两种不同的含义，ISP的表达方法以及含义都有所不同。</p><h2 id="迪米特法则（Law-of-Demeter-LoD）（最少知识法则）"><a href="#迪米特法则（Law-of-Demeter-LoD）（最少知识法则）" class="headerlink" title="迪米特法则（Law of Demeter, LoD）（最少知识法则）"></a>迪米特法则（Law of Demeter, LoD）（最少知识法则）</h2><p>一个软件实体应当尽可能少的与其他实体发生相互作用。</p><p>如果一个系统负荷迪米特法则，那么当其中某一个模块发生修改时，就会尽量少的影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么改变了形状的left或者top值以后，无法点击到这个形状了</title>
      <link href="/2019/09/13/fabricjs-setCoords/"/>
      <url>/2019/09/13/fabricjs-setCoords/</url>
      
        <content type="html"><![CDATA[<h2 id="状况分析："><a href="#状况分析：" class="headerlink" title="状况分析："></a>状况分析：</h2><p>在通过canvas来绘制滚动条的时候，由于滑块需要频繁的进行滚动，所以需要对其<code>left</code> 值进行更新，但是当视图部分进行频繁的拖动后发现：虽然滑块位置正确，但是却无法拖动滑块进行移动了，debug发现滑块的实际位置并不在所显示的位置上，原因是因为其各定点的坐标值没有被正确的计算。</p><a id="more"></a><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>在执行以下操作需要调用<code>object.setCoords()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object.set(<span class="string">'left'</span>, <span class="number">123</span>)，object.setTop(<span class="number">456</span>) 等等。</span><br><span class="line">object.set(<span class="string">'width'</span>, <span class="number">100</span>)， object.set(<span class="string">'height'</span>, <span class="number">100</span>)</span><br><span class="line">object.set(<span class="string">'scaleX'</span>, <span class="number">1.5</span>)， object.set(<span class="string">'scaleY'</span>, <span class="number">1.5</span>)</span><br><span class="line">object.set(<span class="string">'skewX'</span>, <span class="number">20</span>)， object.set(<span class="string">'skewY'</span>, <span class="number">20</span>)</span><br><span class="line">object.set(<span class="string">'padding'</span>, <span class="number">10</span>)</span><br><span class="line">object.set(<span class="string">'angle'</span>, <span class="number">45</span>)</span><br><span class="line">object.set(<span class="string">'strokeWidth'</span>, <span class="number">12</span>)</span><br><span class="line">object.center()，object.centerH()，object.centerV()</span><br><span class="line">canvas.zoomToPoint(...)</span><br></pre></td></tr></table></figure><h2 id="object-setCoords-做了什么"><a href="#object-setCoords-做了什么" class="headerlink" title="object.setCoords() 做了什么"></a>object.setCoords() 做了什么</h2><p>通过分析fabricjs源码发现，<code>setCoords</code>后主要是重新计算了一下该图形的坐标位置<code>coords</code>属性，其中包含图形的每个顶点坐标，通过更新坐标值及绝对位置来刷新图形的画布中的位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculates and returns the .coords of an object.</span></span><br><span class="line"><span class="comment"> * @return &#123;Object&#125; Object with tl, tr, br, bl ....</span></span><br><span class="line"><span class="comment"> * @chainable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">calcCoords: <span class="function"><span class="keyword">function</span>(<span class="params">absolute</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rotateMatrix = <span class="keyword">this</span>._calcRotateMatrix(),</span><br><span class="line">      translateMatrix = <span class="keyword">this</span>._calcTranslateMatrix(),</span><br><span class="line">      startMatrix = multiplyMatrices(translateMatrix, rotateMatrix),</span><br><span class="line">      vpt = <span class="keyword">this</span>.getViewportTransform(),</span><br><span class="line">      finalMatrix = absolute ? startMatrix : multiplyMatrices(vpt, startMatrix),</span><br><span class="line">      dim = <span class="keyword">this</span>._getTransformedDimensions(),</span><br><span class="line">      w = dim.x / <span class="number">2</span>, h = dim.y / <span class="number">2</span>,</span><br><span class="line">      tl = transformPoint(&#123; <span class="attr">x</span>: -w, <span class="attr">y</span>: -h &#125;, finalMatrix),</span><br><span class="line">      tr = transformPoint(&#123; <span class="attr">x</span>: w, <span class="attr">y</span>: -h &#125;, finalMatrix),</span><br><span class="line">      bl = transformPoint(&#123; <span class="attr">x</span>: -w, <span class="attr">y</span>: h &#125;, finalMatrix),</span><br><span class="line">      br = transformPoint(&#123; <span class="attr">x</span>: w, <span class="attr">y</span>: h &#125;, finalMatrix);</span><br><span class="line">  <span class="keyword">if</span> (!absolute) &#123;</span><br><span class="line">    <span class="keyword">var</span> padding = <span class="keyword">this</span>.padding, angle = degreesToRadians(<span class="keyword">this</span>.angle),</span><br><span class="line">        cos = fabric.util.cos(angle), sin = fabric.util.sin(angle),</span><br><span class="line">        cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,</span><br><span class="line">        cosPMinusSinP = cosP - sinP;</span><br><span class="line">    <span class="keyword">if</span> (padding) &#123;</span><br><span class="line">      tl.x -= cosPMinusSinP;</span><br><span class="line">      tl.y -= cosPSinP;</span><br><span class="line">      tr.x += cosPSinP;</span><br><span class="line">      tr.y -= cosPMinusSinP;</span><br><span class="line">      bl.x -= cosPSinP;</span><br><span class="line">      bl.y += cosPMinusSinP;</span><br><span class="line">      br.x += cosPMinusSinP;</span><br><span class="line">      br.y += cosPSinP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ml  = <span class="keyword">new</span> fabric.Point((tl.x + bl.x) / <span class="number">2</span>, (tl.y + bl.y) / <span class="number">2</span>),</span><br><span class="line">        mt  = <span class="keyword">new</span> fabric.Point((tr.x + tl.x) / <span class="number">2</span>, (tr.y + tl.y) / <span class="number">2</span>),</span><br><span class="line">        mr  = <span class="keyword">new</span> fabric.Point((br.x + tr.x) / <span class="number">2</span>, (br.y + tr.y) / <span class="number">2</span>),</span><br><span class="line">        mb  = <span class="keyword">new</span> fabric.Point((br.x + bl.x) / <span class="number">2</span>, (br.y + bl.y) / <span class="number">2</span>),</span><br><span class="line">        mtr = <span class="keyword">new</span> fabric.Point(mt.x + sin * <span class="keyword">this</span>.rotatingPointOffset, mt.y - cos * <span class="keyword">this</span>.rotatingPointOffset);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if (!absolute) &#123;</span></span><br><span class="line">  <span class="comment">//   var canvas = this.canvas;</span></span><br><span class="line">  <span class="comment">//   setTimeout(function() &#123;</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.clearRect(0, 0, 700, 700);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillStyle = 'green';</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(br.x, br.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);</span></span><br><span class="line">  <span class="comment">//   &#125;, 50);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">var</span> coords = &#123;</span><br><span class="line">    <span class="comment">// corners</span></span><br><span class="line">    tl: tl, <span class="attr">tr</span>: tr, <span class="attr">br</span>: br, <span class="attr">bl</span>: bl,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!absolute) &#123;</span><br><span class="line">    <span class="comment">// middle</span></span><br><span class="line">    coords.ml = ml;</span><br><span class="line">    coords.mt = mt;</span><br><span class="line">    coords.mr = mr;</span><br><span class="line">    coords.mb = mb;</span><br><span class="line">    <span class="comment">// rotating point</span></span><br><span class="line">    coords.mtr = mtr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> coords;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets corner position coordinates based on current angle, width and height.</span></span><br><span class="line"><span class="comment"> * See &#123;@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords&#125;</span></span><br><span class="line"><span class="comment"> * @param &#123;Boolean&#125; [ignoreZoom] set oCoords with or without the viewport transform.</span></span><br><span class="line"><span class="comment"> * @param &#123;Boolean&#125; [skipAbsolute] skip calculation of aCoords, useful in setViewportTransform</span></span><br><span class="line"><span class="comment"> * @return &#123;fabric.Object&#125; thisArg</span></span><br><span class="line"><span class="comment"> * @chainable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setCoords: <span class="function"><span class="keyword">function</span>(<span class="params">ignoreZoom, skipAbsolute</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.oCoords = <span class="keyword">this</span>.calcCoords(ignoreZoom);</span><br><span class="line">  <span class="keyword">if</span> (!skipAbsolute) &#123;</span><br><span class="line">    <span class="keyword">this</span>.aCoords = <span class="keyword">this</span>.calcCoords(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// set coordinates of the draggable boxes in the corners used to scale/rotate the image</span></span><br><span class="line">  ignoreZoom || (<span class="keyword">this</span>._setCornerCoords &amp;&amp; <span class="keyword">this</span>._setCornerCoords());</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> fabricjs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos下的端口操作</title>
      <link href="/2019/03/04/centos%E4%B8%8B%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/04/centos%E4%B8%8B%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Centos查看端口占用"><a href="#1、Centos查看端口占用" class="headerlink" title="1、Centos查看端口占用"></a>1、Centos查看端口占用</h2><p>比如查看80端口占用情况使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i tcp:80</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2、列出所有端口"><a href="#2、列出所有端口" class="headerlink" title="2、列出所有端口"></a>2、列出所有端口</h2><p>查看当前所有tcp端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure></p><p>查看某一端口的连接客户端IP 比如3306端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp |grep 3306</span><br></pre></td></tr></table></figure></p><h2 id="3、开启端口（以80端口为例）"><a href="#3、开启端口（以80端口为例）" class="headerlink" title="3、开启端口（以80端口为例）"></a>3、开启端口（以80端口为例）</h2><h3 id="3-1、方法一"><a href="#3-1、方法一" class="headerlink" title="3.1、方法一"></a>3.1、方法一</h3><p>写入修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>保存修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/iptables save</span><br></pre></td></tr></table></figure></p><p>重启防火墙，修改生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></p><h3 id="3-2、方法二："><a href="#3-2、方法二：" class="headerlink" title="3.2、方法二："></a>3.2、方法二：</h3><p>打开配置文件加入如下语句:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p><p>添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>重启防火墙，修改生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></p><h2 id="4、关闭端口"><a href="#4、关闭端口" class="headerlink" title="4、关闭端口"></a>4、关闭端口</h2><h3 id="4-1、方法一："><a href="#4-1、方法一：" class="headerlink" title="4.1、方法一："></a>4.1、方法一：</h3><p>写入修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j DROP</span><br></pre></td></tr></table></figure></p><p>保存修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/iptables save</span><br></pre></td></tr></table></figure></p><p>重启防火墙，修改生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></p><h3 id="4-2、方法二："><a href="#4-2、方法二：" class="headerlink" title="4.2、方法二："></a>4.2、方法二：</h3><p>打开配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p><p>添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j DROP</span><br></pre></td></tr></table></figure></p><p>重启防火墙，修改完成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></p><h2 id="5、查看端口状态"><a href="#5、查看端口状态" class="headerlink" title="5、查看端口状态"></a>5、查看端口状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/iptables status</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Jenkins持续集成并部署GitHub项目</title>
      <link href="/2019/03/02/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90GitHub%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/03/02/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90GitHub%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文档旨在使用Jenkins来持续集成并一键部署我们使用hexo博客系统建造的个人博客。<br>所以开始之前，我假设你已经具有了一个本地创建完成，且deploy到GitHub上的hexo博客项目。<br>注意，是deploy后的静态资源，因为我们最终挂载到Nginx下的也是hexo generate后的静态资源。</p></blockquote><a id="more"></a><h2 id="1-安装jenkins"><a href="#1-安装jenkins" class="headerlink" title="1.安装jenkins"></a>1.安装jenkins</h2><h3 id="环境：CentOS-7-0"><a href="#环境：CentOS-7-0" class="headerlink" title="环境：CentOS 7.0"></a>环境：<code>CentOS 7.0</code></h3><h3 id="安装方式："><a href="#安装方式：" class="headerlink" title="安装方式："></a>安装方式：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install yum-fastestmirror -y  <span class="comment">#安装自动选择最快源的插件</span></span><br><span class="line"><span class="comment">#添加Jenkins源:</span></span><br><span class="line">$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://jenkins-ci.org/redhat/jenkins.repo</span><br><span class="line">$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class="line">$ yum install jenkins               <span class="comment">#安装jenkins</span></span><br></pre></td></tr></table></figure><h3 id="启动方式："><a href="#启动方式：" class="headerlink" title="启动方式："></a>启动方式：</h3><p><code>$ sudo service jenkins start</code></p><h3 id="访问方式："><a href="#访问方式：" class="headerlink" title="访问方式："></a>访问方式：</h3><p>浏览器输入<code>http://your server ip:8080/</code></p><h3 id="更改配置（如端口）方式："><a href="#更改配置（如端口）方式：" class="headerlink" title="更改配置（如端口）方式："></a>更改配置（如端口）方式：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sysconfig/jenkins</span><br><span class="line">$ sudo service jenkins restart</span><br></pre></td></tr></table></figure><h2 id="2-jenkins基础配置"><a href="#2-jenkins基础配置" class="headerlink" title="2.jenkins基础配置"></a>2.jenkins基础配置</h2><h3 id="Unlock"><a href="#Unlock" class="headerlink" title="Unlock"></a>Unlock</h3><p>经过上面的配置，你可以访问你的Jenkins了，在浏览器中输入：<code>http://your server ip:8080/</code>，效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/1.png" alt="img"></p><p>按照提示我们执行<code>cat /var/lib/jenkins/secrets/initialAdminPassword</code>得到<code>Administrator password</code>，输入后点击Continue，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/2.png" alt="img"></p><p>选择<code>install suggested plugins</code>，等待安装完毕，如果有安装失败的可以跳过，之后可以手动根据需求安装。</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/3.png" alt="img"></p><h3 id="设置初始账户和密码"><a href="#设置初始账户和密码" class="headerlink" title="设置初始账户和密码"></a>设置初始账户和密码</h3><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/4.png" alt="img"></p><p>设置完成后进入界面：</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/5.png" alt="img"></p><h2 id="3-github配置"><a href="#3-github配置" class="headerlink" title="3.github配置"></a>3.github配置</h2><h3 id="sercret-text"><a href="#sercret-text" class="headerlink" title="sercret text"></a>sercret text</h3><p>注：此处需要一个对项目有写权限的账户</p><blockquote><p>进入github –&gt; setting –&gt; Personal Access Token –&gt; Generate new token</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/6.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/7.png" alt="img"></p><p>自己先保存此<code>token</code>，如果丢失，之后再也无法找到这个<code>token</code>。</p><h3 id="GitHub-webhooks-设置"><a href="#GitHub-webhooks-设置" class="headerlink" title="GitHub webhooks 设置"></a>GitHub webhooks 设置</h3><blockquote><p>进入GitHub上指定的项目 –&gt; setting –&gt; WebHooks&amp;Services –&gt; add webhook –&gt; 输入刚刚部署jenkins的服务器的IP</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/8.png" alt="img"></p><h2 id="4-jenkins的github配置"><a href="#4-jenkins的github配置" class="headerlink" title="4.jenkins的github配置"></a>4.jenkins的github配置</h2><h3 id="安装GitHub-Plugin"><a href="#安装GitHub-Plugin" class="headerlink" title="安装GitHub Plugin"></a>安装GitHub Plugin</h3><blockquote><p>系统管理–&gt;插件管理–&gt;可选插件</p></blockquote><p>直接安装Github Plugin, jenkins会自动帮你解决其他插件的依赖，直接安装该插件Jenkins会自动帮你安装plain-credentials 、<a href="http://lib.csdn.net/base/git" target="_blank" rel="noopener">Git</a> 、 credentials 、 github-api</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/9.png" alt="img"></p><h3 id="配置GitHub-Plugin"><a href="#配置GitHub-Plugin" class="headerlink" title="配置GitHub Plugin"></a>配置GitHub Plugin</h3><blockquote><p>系统管理 –&gt; 系统设置 –&gt; GitHub –&gt; Add GitHub Sever</p></blockquote><p>如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/10.png" alt="img"></p><p>API URL 输入 <code>https://api.github.com</code>，Credentials点击Add添加，Kind选择Secret Text,具体如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/11.png" alt="img"></p><p>设置完成后，点击<code>TestConnection</code>,提示<code>Credentials verified for user UUserName, rate limit: xxx</code>,则表明有效。</p><h2 id="5-创建一个freestyle任务"><a href="#5-创建一个freestyle任务" class="headerlink" title="5.创建一个freestyle任务"></a>5.创建一个freestyle任务</h2><p>- General 设置<br>填写GitHub project URL, 也就是你的项目主页<br>eg. <code>https://github.com/your_name/your_repo_name</code></p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/Jenkins-ghrepo-info.png" alt="img"></p><p>- 配置源码管理</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/Jenkins-source-manage.png" alt="img"></p><ol><li>填写项目的git地址, eg. <code>https://github.com/your_name/your_repo_name.git</code></li><li>添加github用户和密码</li><li>选择githubweb源码库浏览器，并填上你的项目URL，这样每次构建都会生成对应的changes，可直接链到github上看变更详情</li></ol><p>- 构建触发器，构建环境</p><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/12.png" alt="img"></p><h2 id="6-实现自动化部署"><a href="#6-实现自动化部署" class="headerlink" title="6.实现自动化部署"></a>6.实现自动化部署</h2><p>自动化部署可能是我们最需要的功能了，公司就一台服务器，我们可以使用人工部署的方式，但是如果公司有100台服务器呢，人工部署就有些吃力了，而且一旦线上出了问题，回滚也很麻烦。所以这一节实现一下自动部署的功能。</p><ol><li>首先，先在Jenkins上装一个插件Publish Over SSH，我们将通过这个工具实现服务器部署功能。</li><li>在要部署代码的服务器上创建一个文件夹用于接收Jenkins传过来的代码，由于我的个人博客是直接挂载在Nginx下的，所以我在我的Nginx路径下新建了一个<code>html_temp</code>目录。</li><li>Jenkins想要往服务器上部署代码必须登录服务器才可以，这里有两种登录验证方式，一种是ssh验证，一种是密码验证，就像你自己登录你的服务器，你可以使用ssh免密登录，也可以每次输密码登录，<code>系统管理-系统设置</code>里找到Publish over SSH这一项。<br>重点参数说明：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Passphrase：密码（key的密码，没设置就是空）</span><br><span class="line">Path to key：key文件（私钥）的路径</span><br><span class="line">Key：将私钥复制到这个框中(path to key和key写一个即可)</span><br><span class="line"></span><br><span class="line">SSH Servers的配置：</span><br><span class="line">SSH Server Name：标识的名字（随便你取什么）</span><br><span class="line">Hostname：需要连接ssh的主机名或ip地址（建议ip）</span><br><span class="line">Username：用户名</span><br><span class="line">Remote Directory：远程目录</span><br><span class="line"></span><br><span class="line">高级配置：</span><br><span class="line">Use password authentication, or use a different key：勾选这个可以使用密码登录，不想配ssh的可以用这个先试试</span><br><span class="line">Passphrase / Password：密码登录模式的密码</span><br><span class="line">Port：端口（默认<span class="number">22</span>）</span><br><span class="line">Timeout (ms)：超时时间（毫秒）默认<span class="number">300000</span></span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/Jenkins-overssh.png" alt="img"></p><p>配置完成后，点击Test Configuration测试一下是否可以连接上，如果成功会返回success，失败会返回报错信息，根据报错信息改正即可。</p><ol><li>接下来进入我们创建的任务，点击<strong>构建</strong>，增加一些脚本代码，意思是将我hexo博客生成的静态资源打包成一个文件，因为我们要传输。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/Jenkins-building.png" alt="img"></p><ol start="5"><li>点击<strong>构建后操作</strong>，增加构建后操作步骤，选择send build artificial over SSH， 参数说明：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name:选择一个你配好的ssh服务器</span><br><span class="line">Source files ：写你要传输的文件路径</span><br><span class="line">Remove prefix ：要去掉的前缀，不写远程服务器的目录结构将和Source files写的一致</span><br><span class="line">Remote directory ：写你要部署在远程服务器的那个目录地址下，不写就是SSH Servers配置里默认远程目录</span><br><span class="line">Exec command ：传输完了要执行的命令，我这里执行了解压缩和解压缩完成后删除压缩包<span class="number">2</span>个命令</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rocwong-cn/assets/jenkins/Jenkins-after-build.png" alt="img"></p><ol start="6"><li>现在在我们本地的<code>hexo</code>博客系统里面随便修改点东西，然后执行以下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>向GitHub repo提交一次<code>push</code>操作后，就会自动触发自动构建、远程部署的钩子，我们的博客系统就会自动集成新的内容了。</p><h2 id="7-参考："><a href="#7-参考：" class="headerlink" title="7.参考："></a>7.参考：</h2><blockquote><p><a href="http://www.jianshu.com/p/b2ed4d23a3a9" target="_blank" rel="noopener">Jenkins+Github持续集成</a><br><a href="http://www.cnblogs.com/itech/archive/2011/11/23/2260009.html" target="_blank" rel="noopener">Jenkins入门总结</a><br><a href="https://juejin.im/post/5ad1980e6fb9a028c42ea1be" target="_blank" rel="noopener">Jenkins打造强大的前端自动化工作流</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年终总结</title>
      <link href="/2018/12/29/summary2018/"/>
      <url>/2018/12/29/summary2018/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年，耶！ 工作爱情双丰收 ~~ 撒花 ~~</p></blockquote><a id="more"></a><h2 id="做银行业务的那些日子"><a href="#做银行业务的那些日子" class="headerlink" title="做银行业务的那些日子"></a>做银行业务的那些日子</h2><p>还记得2017年的年底从丰瑞祥到了文思给银行做信贷业务，虽然之前一直在金融行业做支付相关的业务，但是对于网络信贷领域自己了解的不是那么深入。</p><p>进入信贷战队初期，当时主要负责对接之前的业务和代码，当时的拿到的APP第一版代码是用<code>weex</code>写的，但是由于团队内对<code>weex</code>框架了解的人不是很多，底层的优化和代码架构方面做的实在不敢恭维，线上问题层出不穷。所以我到了之后就直接发起了第一次版本重构 ———— 使用<code>react-native</code>这个成熟且跨平台支持性良好的框架，经过一些日夜奋战和银行总部的一层层测试，总算在APP灰度发布时得到了领导的赞赏，比以前的性能和体验上都提升了不少。</p><p>之后，信贷APP模块的逐渐成熟也加强了银行方面对于这方面的投入，不久后也启动了<strong>白条</strong>项目。由于白条项目是一个可供多方调用的平台，当时考虑到上游接入方的多样性，最终制定方案将白条做成一套H5页面，并兼容所有的上游移动设备。这样就多了很多挑战，因为我们的页面有可能是在低端的Android机浏览器打开，也可能是在原生APP的内嵌<code>webview</code>使用，这对数据安全和性能方面都有很高的要求。</p><p>第一版为了保证上线时间，直接用<code>react</code>脚手架写了页面及逻辑实现，没有做过多的性能优化，但是到了线上之后各种问题也就暴露出来了，首屏加载时间过长这个问题首当其冲，后来经过对<code>webpack</code>使用<code>gzip</code>等插件，代码切割等优化才逐渐缓解。</p><p>在文思的近一年时间内感受到了很多，包括但不限于对信贷业务的了解、对移动端H5方面的开发经验、<code>typescript</code>的深入了解等。但同时技术方面也确实进步缓慢，因为这一年时间基本都是使用<code>react-native</code>，但是我觉得用这种框架型技术越久，人对技术深度的思考及增长就越慢，而且不管是出于对以后职业生涯的规划还是个人技术方面的探究都决定是时候要换个环境了。</p><p>所以其实回想起来来文思最大的收获应该是收获了女朋友一枚，(<em> ￣3)(ε￣ </em>)@静静宝贝儿 ，对宝贝儿说：你若不离，我定不弃！！！</p><h2 id="南征北战"><a href="#南征北战" class="headerlink" title="南征北战"></a>南征北战</h2><p>裸辞了文思之后，开始了各大公司的南征北战，第一家就面试了京东，当时是被内推去的，从西二旗到亦庄，30多站的地铁，第一次面试结果挺好的，技术方面主要都是我比较擅长的<code>react</code>、<code>RN</code>及一些基础<code>js</code>，顺利拿下一个offer，但是后来的沟通过程中薪资没有达到我的预期，而且考虑到我女朋友在西二旗附近上班，我不想离她那么远，所以就放弃了京东的offer。</p><p>之后接连面了去哪儿、便利蜂、爱奇艺、字节跳动、新浪、36kr、好未来等。</p><ul><li>需要讲的是，二战去哪儿都被淘汰了，怪自己技术不济吧，对底层的实现及原理掌握还不是很深。</li><li>便利蜂面试时，两面技术都过了，但是和HR谈薪资时，也是未达到预期，所以当场就拒绝了；而且主要原因是当时面的项目部<em>到家</em>是个新部门，加班贼严重，我还想早点回去陪女朋友呢。</li><li>爱奇艺和字节跳动在技术关涉及到<code>js</code>基础知识时就折了，不说了都是泪。。。</li><li>面好未来之前，从来不知道这家低调的教育科技公司的，但是面试官技术扎实的技术和待人谦诚的态度给我留下了很深的印象，所以当时对于薪资方面没有要太高，还是心向往之。以至于后来顺利拿到了好未来的offer，（HR说为了表示诚意，还给我上调了点儿薪资，不来不行啊~ 哈哈）。</li></ul><h2 id="每个人的好未来"><a href="#每个人的好未来" class="headerlink" title="每个人的好未来"></a>每个人的好未来</h2><p>来到了好未来后，切身感受了大公司的福利以及团队的专业性，自己也开始了新的技能点积累，学习<code>vue</code>从项目开始，接触到了AI与教育的结合、数据可视化以及3D技术等，不管是对于现在还是以后的职业生涯都是一个很好的成长机会，up up up !!!</p><h2 id="新年寄语"><a href="#新年寄语" class="headerlink" title="新年寄语"></a>新年寄语</h2><p>按照惯例，还是得对新年做一些规划和希望，一方面时刻鞭策自己前进，一方面制定了路线后才不会迷路嘛~~~</p><ul><li>攒钱！攒钱！攒钱！节省每一分一毛钱！买房！结婚！孩子的奶粉钱！</li><li>看书！ 至少读完三本技术方面的书、三本自我提升的书。</li><li>多运动！多运动！爬山也好，出去跑步也好，体重控制在140斤内！</li><li>养成写博客的习惯，将工作中的一些思考记录下来，有助于以后提升。</li><li>深入学习vue、小程序开发、flutter、python等。</li><li>多关注项目架构、设计模式及前端工程化相关知识并多总结、多实践。</li><li>将极光单词行的英语坚持学习到底、极客时间上买的专栏看完。</li><li>有时间的话接点私活 ~~ 嘿嘿 ~~</li></ul>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 又是一年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列与青蛙跳台阶</title>
      <link href="/2018/08/27/feibonacci/"/>
      <url>/2018/08/27/feibonacci/</url>
      
        <content type="html"><![CDATA[<blockquote><p>定义：斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、…… 在数学上，斐波纳契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）。</p></blockquote><a id="more"></a><h3 id="题目一："><a href="#题目一：" class="headerlink" title="题目一："></a>题目一：</h3><blockquote><p>写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项。</p></blockquote><ul><li>递归解法（效率很低）：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci_sol1</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fibonacci_sol1(n<span class="number">-1</span>) + fibonacci_sol1(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环解法：</li></ul><p>大概思路：首先根据f(0)和f(1)算出f(2)，再根据f(1)和f(2)算出f(3)…… 依此类推就可以算出第n项了。很容易理解，这种思路的时间复杂度是o(n)。实现代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci_sol2</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> result[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fOne = <span class="number">1</span>,fTwo = <span class="number">0</span>,fN;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        fN = fOne + fTwo;</span><br><span class="line"></span><br><span class="line">        fTwo = fOne；</span><br><span class="line">        fOne = fN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目二："><a href="#题目二：" class="headerlink" title="题目二："></a>题目二：</h2><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><p>可以把n级台阶时的跳法看成是n的函数，记为f(n)。当n&gt;2时，第一次跳的时候就有两种不同的选择：一是第一次只跳1级，此时跳法数目等于后面剩下的n-1级台阶的跳法数目，即为f(n-1);另一种选择是第一次跳2级，此时跳法数目等于后面剩下n-2级台阶的跳法数目，即为f(n-2)。因此，n级台阶的不同跳法的总数f(n)=f(n-1)+f(n-2)。分析到这里，不难看出这实际上就是斐波那契数列了。</p><p>与斐波那契数列不同的是，其初始值定义稍有不同，<br>当n=1时，只能跳一级台阶，一种跳法<br>当n=2时，一次跳一级或两级，两种跳法<br>所以，关于青蛙跳台阶的定义如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">f(<span class="number">2</span>) = <span class="number">2</span>;</span><br><span class="line">f(n) = f(n<span class="number">-1</span>)+f(n<span class="number">-2</span>),n&gt;<span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>非递归写法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frogJump12Step</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"param err"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> frogNMinusOne = <span class="number">2</span>;<span class="comment">//f(n-1)=2</span></span><br><span class="line">    <span class="keyword">var</span> frogNMinusTwo = <span class="number">1</span>;<span class="comment">//f(n-2)=1</span></span><br><span class="line">    <span class="keyword">var</span> frogN = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= n;++i)&#123;</span><br><span class="line">        frogN = frogNMinusOne + frogNMinusTwo;</span><br><span class="line">        frogNMinusTwo = frogNMinusOne;</span><br><span class="line">        frogNMinusOne = frogN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> frogN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归解法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fcuntion frogJump12StepRecursive(int n)&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"param err"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> frogJump12StepRecursive(n - <span class="number">1</span>) + frogJump12StepRecursive(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js设计模式之观察者模式（发布订阅）初窥</title>
      <link href="/2018/06/23/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%EF%BC%89%E5%88%9D%E7%AA%A5/"/>
      <url>/2018/06/23/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%EF%BC%89%E5%88%9D%E7%AA%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>观察者模式又叫做发布订阅模式，它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生改变时就会通知所有的观察者对象。它是由两类对象组成：发布者和观察者。发布者负责发布事件，同事观察者通过订阅这些事件来观察该主题，发布者和订阅者是完全解耦的，彼此不知道对方的存在，两者仅仅共享一个自定义事件的名称。</p></blockquote><a id="more"></a><p>如果你写过js的<code>onclick</code>事件，那么你就用过观察者模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'clicked me !'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>function click</code>订阅了<code>div</code>的<code>click</code>事件，当我们的鼠标执行点击操作时，事件发布，对应的<code>function</code>就会执行，这个<code>function click</code>就是一个观察者。</p><p>为了方便理解，我们可以具象化的将这个概念理解为<code>我</code>与<code>微信公众号</code>之间的关系。比如你关注（订阅）了<code>公众号A</code>，但是<code>公众号A</code>的消息推送是不确定的，你不知道他何时推送，但是你总不能时时刻刻的去打开它的聊天窗口去刷新，去询问吧，而且就算你一直的在刷新这个界面，你也得不到最新推送。你需要做的就是静静等待，等新推送来了之后，微信会自动提示你。<br>在这个🌰里面，<code>我</code>就是一个观察者，<code>我</code>订阅了发布者<code>公众号A</code>，订阅之后<code>我</code>可以继续去做我喜欢的其他事情，与<code>公众号A</code>互不干扰，只有当它告诉我说：”😎小伙子，你的新推送来了，快去看看吧！”的时候，你再去看就可以了。<br>用代码来实现这个简单的逻辑的话就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Me.on(<span class="string">'new_push'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 去查看新的推送信息</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//公众号A发布新推送</span></span><br><span class="line">PublicA.emit(<span class="string">'new_push'</span>);</span><br></pre></td></tr></table></figure><ul><li>一个简单的js的观察者模式实现：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = &#123;</span><br><span class="line">on:<span class="function"><span class="keyword">function</span>(<span class="params">eventName,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.handlers) <span class="keyword">this</span>.handlers = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.handlers[eventName])<span class="keyword">this</span>.handlers[eventName]=[];</span><br><span class="line"><span class="keyword">this</span>.handlers[eventName].push(callback);</span><br><span class="line">&#125;,</span><br><span class="line">emit:<span class="function"><span class="keyword">function</span>(<span class="params">eventName</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> events = <span class="keyword">this</span>.handlers[eventName];</span><br><span class="line"><span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">events.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">func,i</span>)</span>&#123;</span><br><span class="line">func.call(that,args[i])</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Event.on(<span class="string">'test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line">Event.on(<span class="string">'test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'world ! '</span>);</span><br><span class="line">&#125;);</span><br><span class="line">Event.emit(<span class="string">'test'</span>,<span class="string">'Hello'</span>);<span class="comment">//会依次输出 Hello,world !</span></span><br></pre></td></tr></table></figure><ul><li>实现一个可以发布和解除订阅的类：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmitterEvent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">  <span class="comment">//构造器。实例上创建一个事件池</span></span><br><span class="line">    <span class="keyword">this</span>._event = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//on 订阅</span></span><br><span class="line">  on (eventName, handler) &#123;</span><br><span class="line">  <span class="comment">// 根据eventName，事件池有对应的事件数组，</span></span><br><span class="line">  <span class="comment">// 如果eventName已经有对应的事件数组就push，没有就新建一个。</span></span><br><span class="line">  <span class="comment">// 严谨一点应该判断handler的类型，是不是function</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>._event[eventName]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._event[eventName].push(handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._event[eventName] = [handler];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  emit (eventName) &#123;</span><br><span class="line">  <span class="comment">// 根据eventName找到对应数组</span></span><br><span class="line">    <span class="keyword">var</span> events = <span class="keyword">this</span>._event[eventName];</span><br><span class="line">  <span class="comment">//  取一下传进来的参数，方便给执行的函数</span></span><br><span class="line">    <span class="keyword">var</span> otherArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(events) &#123;</span><br><span class="line">      events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        event.apply(that, otherArgs);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 解除订阅</span></span><br><span class="line">  off (eventName, handler) &#123;</span><br><span class="line">    <span class="keyword">var</span> events = <span class="keyword">this</span>._event[eventName];</span><br><span class="line">    <span class="keyword">if</span>(events) &#123;</span><br><span class="line">      <span class="keyword">this</span>._event[eventName] = events.filter(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> event !== handler;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 订阅以后，emit 发布执行一次后自动解除订阅</span></span><br><span class="line">  once (eventName, handler) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);</span><br><span class="line">      handler.apply(that, args);</span><br><span class="line">      <span class="keyword">this</span>.off(eventName,func);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.on(eventName, func);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> EmitterEvent();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params">something</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(something,<span class="string">'aa-aa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params">something</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(something);</span><br><span class="line">&#125;</span><br><span class="line"> event.once(<span class="string">'dosomething'</span>,a);</span><br><span class="line"> event.emit(<span class="string">'dosomething'</span>, <span class="string">'hahaha'</span>);</span><br></pre></td></tr></table></figure><p>当我们需要用的时候，只需要继承一下这个EmitterEvent类。要操作的实例就可以用on,emit方法，也就是可以用发布订阅。</p><ul><li>最后<br>发布订阅的第三方库还是很多的，node的build-in库里面也封装了，浏览器也有事件触发的机制。而且像现在的一些流行的框架的渲染机制很多也是基于监听、发布订阅这种方式来实现的，比如VUE等。。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位操作符与移位运算</title>
      <link href="/2018/06/11/%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8E%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2018/06/11/%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8E%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>位操作符用于在最近本的层次上，即按内存中表示数值的位来操作数值。<br>ECMAScript中的所有数值都以 IEEE-754 64 位格式存储，但位操作符并不直接操作64位的值。而是先将64位的值转换成32位的整数，然后执行操作，最后再将结果转换回64位。</p><a id="more"></a><p>对于我们来说， 由于64位存储格式是透明的，因此整个过程就像是只存在32位的整数一样。</p><p>对于有符号的整数，32位中的前31位用于表示整数的值。第32位用于表示数值的符号：0表示正数，1表示负数。这个表示符号的位叫做<strong>符号位</strong>，符号位的值决定了其他位数值的格式。其中，正数以纯二进制格式存储，31位中的每一位都表示2的幂。第一位（叫做位0）表示2的0次幂，第二位表示2的1次幂，以此类推。<br>没有用到的位以0填充，即忽略不计。例如，数值18的二进制表示是<code>00000000000000000000000000010010</code>，或者更简洁的<code>10010</code>。这个5个有效位，这5位本身就决定了实际的值。</p><p>负数同样以二进制码存储，但是用的格式是<strong>二进制补码</strong>。计算一个数值的二进制补码，需要经过下面3个步骤：</p><ul><li>求这个数值绝对值的二进制码（例如，要求-18的二进制补码，先求18的二进制码）；</li><li>求二进制反码，即将0替换为1，将1替换为0；</li><li>得到的二进制反码加1。<br>要根据这个3个步骤求得-18的二进制码，首先就要求得18的二进制码，即：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 0000 0001 0010</span><br></pre></td></tr></table></figure><p>然后，求其二进制反码，即0和1互换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1111 1111 1111 1111 1111 1111 1110 1101</span><br></pre></td></tr></table></figure><p>最后，二进制反码加1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1111 1111 1111 1111 1111 1111 1110 1101</span><br><span class="line">                                      1</span><br><span class="line">---------------------------------------</span><br><span class="line">1111 1111 1111 1111 1111 1111 1110 1110</span><br></pre></td></tr></table></figure><p>这样，就求得了-18的二进制表示，即<code>11111111111111111111111111101110</code>。需要注意的是，在处理有符号整数时，是不能访问位31的。</p><p>在ECMAScript中，当对数值应用位操作符时，后台会发生如下转换过程：64位的数值被转换成32位数值，然后执行位操作，最后再将32位的结果转换回64位数值。这样，表面上看起来就好像是在操作32位数值，就跟着其他语言中以类似的方式执行二进制操作一样。但这个转换过程也导致了一个严重的负效应，即在对特殊的<code>NaN</code>和<code>Infinity</code>值应用位操作时，这两个值都会被当做0来处理。<br>如果对非数值应用位操作符，会先使用<code>Number()</code>函数将该值转换为一个数值（自动完成），然后在应用位操作，得到的结果将是一个数值。</p><h2 id="1-按位非（NOT"><a href="#1-按位非（NOT" class="headerlink" title="1.按位非（NOT)"></a>1.按位非（NOT)</h2><p>按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。按位非是ECMAScript操作符中少数几个与二进制计算有关的操作符之一。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">25</span>;               <span class="comment">//二进制 00000000000000000000000000011001</span></span><br><span class="line"><span class="keyword">var</span> num2 = ~num1;            <span class="comment">//二进制 11111111111111111111111111100110</span></span><br><span class="line">alert(num2);                 <span class="comment">// -26</span></span><br></pre></td></tr></table></figure><p>这里，对25执行按位非操作，结果得到了-26。这也验证了按位非操作的本质：<strong>操作数的负值减一</strong>。但是由于按位非是在数值表示的最底层执行操作，因此速度更快。</p><h2 id="2-按位与（AND"><a href="#2-按位与（AND" class="headerlink" title="2.按位与（AND)"></a>2.按位与（AND)</h2><p>按位与操作符是由一个和号字符（&amp;）表示，它有两个操作符数。从本质上将，按位与操作就是将两个数值的每一位对其，然后根据下表中的规则，对相同位置上的两个数执行AND操作：</p><table><thead><tr><th>第一个数值的位</th><th style="text-align:left">第二个数值的位</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td>1</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td>1</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr><tr><td>0</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td>0</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr></tbody></table><p>简而言之，按位与操作旨在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0。<br>下面看一个对25和3执行按位与操作的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">25</span> &amp; <span class="number">3</span>;</span><br><span class="line">alert(result);            <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>其底层操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class="line">  3 = 0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line">----------------------------------------------</span><br><span class="line">AND = 0000 0000 0000 0000 0000 0000 0000 0001</span><br></pre></td></tr></table></figure><h2 id="3-按位或-（OR"><a href="#3-按位或-（OR" class="headerlink" title="3.按位或 （OR)"></a>3.按位或 （OR)</h2><p>按位或操作符由一个竖线符号（|）表示，同样也有两个操作数。按位或操作遵循下面这个真值表：</p><table><thead><tr><th>第一个数值的位</th><th style="text-align:left">第二个数值的位</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td>1</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td>1</td><td style="text-align:left">0</td><td style="text-align:left">1</td></tr><tr><td>0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td>0</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr></tbody></table><p>由此可见，按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0。<br>如果在前面按位与的例子中对25和3进行按位或操作，则代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">25</span> | <span class="number">3</span>;</span><br><span class="line">alert(result);         <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>25与3按位或的结果是27：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class="line">  3 = 0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line">----------------------------------------------</span><br><span class="line"> OR = 0000 0000 0000 0000 0000 0000 0001 1011</span><br></pre></td></tr></table></figure><h2 id="4-按位异或-（XOR"><a href="#4-按位异或-（XOR" class="headerlink" title="4.按位异或 （XOR)"></a>4.按位异或 （XOR)</h2><p>按位异或操作符由一个插入符号（^）表示，也有两个操作数，以下是按位异或的真值表：</p><table><thead><tr><th>第一个数值的位</th><th style="text-align:left">第二个数值的位</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td>1</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td>1</td><td style="text-align:left">0</td><td style="text-align:left">1</td></tr><tr><td>0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td>0</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr></tbody></table><p>按位异或与按位或的不同之处在于，这个操作在<strong>两个数值对应为上只有一个1时才返回1，如果对应的两位都是1或都是0，则返回0</strong>.<br>对25和3执行按位异或操作的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">25</span> ^ <span class="number">3</span>;</span><br><span class="line">alert(result);         <span class="comment">// 26</span></span><br></pre></td></tr></table></figure><p>其底层代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 25 = 0000 0000 0000 0000 0000 0000 0001 1001</span><br><span class="line">  3 = 0000 0000 0000 0000 0000 0000 0000 0011</span><br><span class="line">----------------------------------------------</span><br><span class="line"> OR = 0000 0000 0000 0000 0000 0000 0001 1010</span><br></pre></td></tr></table></figure><h2 id="5-左移"><a href="#5-左移" class="headerlink" title="5.左移"></a>5.左移</h2><p>左移操作符由两个小于号（&lt;&lt;）表示，这个操作符会将数值的所有位向左移动指定的位数。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldVal = <span class="number">2</span>;                   <span class="comment">//二进制 10</span></span><br><span class="line"><span class="keyword">var</span> newVal = oldVal &lt;&lt; <span class="number">5</span>;         <span class="comment">//二进制1000000，十进制64</span></span><br><span class="line">alert(newVal);                    <span class="comment">// 64</span></span><br></pre></td></tr></table></figure><p>注意，在想做移位后，原数值的右侧多出了5个空位，左移操作会以0来填充这些空位，以便得到的结果是一个完整的42位二进制数。而且左移不会影响操作数的符号位，换句话说，如果将-2向左移动5位，结果将是-64，而非64。</p><h2 id="6-有符号的右移"><a href="#6-有符号的右移" class="headerlink" title="6.有符号的右移"></a>6.有符号的右移</h2><p>有符号的右移操作由两个大于号（&gt;&gt;）表示，这个操作符将会将数值向右移动，但保留符号位（即正负号标记）。有符号的右移操作与左移操作恰好相反，即如果将64向右移动5位，结果将便会2。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldVal = <span class="number">64</span>;                   <span class="comment">//二进制1000000</span></span><br><span class="line"><span class="keyword">var</span> newVal = oldVal &gt;&gt; <span class="number">5</span>;         <span class="comment">//二进制10</span></span><br><span class="line">alert(newVal);                    <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="7-无符号右移"><a href="#7-无符号右移" class="headerlink" title="7.无符号右移"></a>7.无符号右移</h2><p>无符号右移操作符由3个大于号（&gt;&gt;&gt;）表示，这个操作符会将数值的所有32位都向右移动，对正数来说，无符号右移的结果与右移相同。扔以前面有符号的代码为例，如果将64无符号右移5位，结果仍然还是2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldVal = <span class="number">64</span>;                   <span class="comment">//二进制1000000</span></span><br><span class="line"><span class="keyword">var</span> newVal = oldVal &gt;&gt;&gt; <span class="number">5</span>;         <span class="comment">//二进制10</span></span><br><span class="line">alert(newVal);                    <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>但是对于负数来说就不一样了。首先，无符号右移是以0来填充空位，而不是像有符号右移那样以符号位的值来填充空位。所以，对证书的无符号右移与有符号右移结果相同，但是对负数的结果就不同了。其次，无符号有意操作符会把负数的二进制码当做正数的二进制码。而且，由于负数以其绝对值的二进制补码形式表示，因为就会导致无符号右移后的结果非常之大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldVal = <span class="number">-64</span>;                  <span class="comment">// 等于二进制的11111111111111111111111111000000</span></span><br><span class="line"><span class="keyword">var</span> newVal = oldVal &gt;&gt;&gt; <span class="number">5</span>;         <span class="comment">// 等于十进制的134217726</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位移运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5学习笔记汇总</title>
      <link href="/2018/05/21/HTML5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/"/>
      <url>/2018/05/21/HTML5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="lesson-1-总结"><a href="#lesson-1-总结" class="headerlink" title="lesson 1 总结"></a>lesson 1 总结</h1><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson1/index.html" target="_blank" rel="noopener">预览地址</a></p><h2 id="设置背景图片："><a href="#设置背景图片：" class="headerlink" title="设置背景图片："></a>设置背景图片：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:url(pic.jpg)</span> <span class="selector-tag">center</span> <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">background-size</span><span class="selector-pseudo">:cover</span>;</span><br></pre></td></tr></table></figure><blockquote><p>background: #00FF00 url(bgimage.gif) no-repeat fixed top;</p></blockquote><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p>通过设置<code>translateY</code>的值来定位元素在Y轴的位置，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translateY(-50</span>%);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h2><table><thead><tr><th>值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>none</td><td style="text-align:left">默认。定义带有小写字母和大写字母的标准的文本。      </td></tr><tr><td>capitalize</td><td style="text-align:left">文本中的每个单词以大写字母开头。     </td></tr><tr><td>uppercase</td><td style="text-align:left">定义仅有大写字母。     </td></tr><tr><td>lowercase</td><td style="text-align:left">定义无大写字母，仅有小写字母。    </td></tr><tr><td>inherit</td><td style="text-align:left">规定应该从父元素继承 text-transform 属性的值。    </td></tr></tbody></table><h2 id="清除默认间距"><a href="#清除默认间距" class="headerlink" title="清除默认间距"></a>清除默认间距</h2><p>浏览器会对页面元素有默认的间距值，为了清除它们，一般做法是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="外部样式文件"><a href="#外部样式文件" class="headerlink" title="外部样式文件"></a>外部样式文件</h2><p>一般的，我们会在css文件首行增加字符集设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br></pre></td></tr></table></figure><h2 id="事件拦截"><a href="#事件拦截" class="headerlink" title="事件拦截"></a>事件拦截</h2><p>通过获取到事件回调的<code>e</code>事件对象，来拦截事件响应：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onclick</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h2><p>在<code>head</code>中增加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, shrink-to-fit=no,user-scalable=yes,maximum-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="lesson-2-总结"><a href="#lesson-2-总结" class="headerlink" title="lesson 2 总结"></a>lesson 2 总结</h1><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson2/index.html" target="_blank" rel="noopener">预览地址</a></p><h2 id="manifest（离线缓存）"><a href="#manifest（离线缓存）" class="headerlink" title="manifest（离线缓存）"></a>manifest（离线缓存）</h2><p>通过设置<code>html</code>元素的<code>manifest</code>属性来指定本地缓存配置文件，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"cache.manifest"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--something else.--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在同级目录下的配置文件一般格式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">/#修改时间：2018-05-11 17:55:35</span><br><span class="line">CACHE:</span><br><span class="line">index.css</span><br></pre></td></tr></table></figure><ul><li><p>其中，第一行为文件声明，第二行(忽略/，为了转译用)<code>#</code>后面的内容表示注释，<code>CACHE</code>后面是对需要缓存的文件的生命，其后为缓存的文件列表。如果有多个需要缓存的文件，则每一个文件路径都需要各占一行。</p></li><li><p>在<code>manifest</code>文件中，除<code>CACHE</code>声明哪些文件被缓存外，还有<code>NETWORK</code>和<code>FALLBACK</code>这两个关键字，分别用于声明哪些文件永远不被缓存，以及在无法建立连接的情况下显示的回退页面。此外，<code>CACHE</code>声明也可以被省略。</p></li></ul><h2 id="link（外部链接）、meta（文档元数据）"><a href="#link（外部链接）、meta（文档元数据）" class="headerlink" title="link（外部链接）、meta（文档元数据）"></a>link（外部链接）、meta（文档元数据）</h2><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><ul><li>显示ico图标：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/ico"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将页面添加到iOS设备主屏幕是显示的图标</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span>  <span class="attr">href</span>=<span class="string">"apple-touch-icon.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不希望iOS系统对图标添加默认的圆角和高粱效果，则可以用<code>apple-touch-icon-precomposed</code>替代<code>apple-touch-icon</code>。如下代码定义了iOS设备中默认的57 x 57及更大的72 x 72主屏图标：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span>  <span class="attr">href</span>=<span class="string">"icon-57.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"72x72"</span>  <span class="attr">href</span>=<span class="string">"icon-72.png"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>apple-touch-icon-precomposed按钮文件一般需指定的尺寸包括57 x 57、72 x 72、114 x 114、144 x 144、180 x 180等，并随苹果公司的产品线变化而动态变化。</p></blockquote><ul><li>订阅(rss+xml)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"My Blog"</span> <span class="attr">href</span>=<span class="string">"rss.xml"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><ul><li>指定浏览器内核。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>content</code>取值有：webkit：webkit（极速核）。ie-comp:IE兼容内核。ie-stand:IE标准内核。</p><p>此外还可以指定IE内核下优先使用最新版本引擎渲染页面，并且可以让安装了Google Chrome Frame扩展插件的浏览器激活Chrome Frame作为渲染引擎，其目的都是表面浏览器使用兼容模式，是页面尽可能以最佳方式呈现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>搜索引擎优化（Search Engine Optimization,SEO)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"HTML5,前端，代码，样式"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"这是一个HTML5开发的前端页面"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>移动端浏览器处理<br>不希望页面中的数字自动识别为电话号码，从而显示为拨号的超链接：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>content</code>还有email=no等取值</p><h1 id="lesson-3-总结"><a href="#lesson-3-总结" class="headerlink" title="lesson 3 总结"></a>lesson 3 总结</h1><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson3/index.html" target="_blank" rel="noopener">DEMO预览地址</a></p><h2 id="line-height（行高）"><a href="#line-height（行高）" class="headerlink" title="line-height（行高）"></a>line-height（行高）</h2><p>与大多数CSS属性不同，line-height支持属性值设置为无单位的数字。有无单位在子元素继承属性时有微妙的不同。</p><ul><li>语法</li></ul><p>line-height: normal | <number> | <length> | <percentage><br>normal 根据浏览器决定，一般为1.2。<br>number 仅指定数字时（无单位），实际行距为字号乘以该数字得出的结果。可以理解为一个系数，子元素仅继承该系数，子元素的真正行距是分别与自身元素字号相乘的计算结果。大多数情况下推荐使用，可以避免一些意外的继承问题。length 具体的长度，如px/em等。<br>percentage 百分比，100%与1em相同。</percentage></length></number></p><ul><li>有单位（包括百分比）与无单位之间的区别<br>有单位时，子元素继承了父元素计算得出的行距；无单位时继承了系数，子元素会分别计算各自行距（推荐使用）。</li></ul><p>由此可以得出demo页面的三种计算方式：</p><ul><li>百分比：父元素的行高为150%时，会根据父元素的字体大小先计算出行高值然后再让子元素继承。所以当line-height:150%时，字元素的行高等于16px * 150% = 24px</li><li>em：父元素的行高为1.5em时，会根据父元素的字体大小先计算出行高值然后再让子元素继承。所以当line-height:1.5em时，子元素的行高等于16px * 1.5em = 24px</li><li>无单位：父元素行高为1.5时，会根据子元素的字体大小动态计算出行高值让子元素继承。所以，当line-height:1.5时，子元素行高等于30px * 1.5 = 45px</li></ul><p>总的来说，当父元素行高为百分比和em时，会根据父元素的字体大小先计算出行高值然后再让子元素继承。当父元素行高为无单位情况下，会根据子元素的字体大小动态计算出行高值让子元素继承。</p><p>参考地址：<a href="https://www.zhihu.com/question/20394889" target="_blank" rel="noopener">CSS:line-height:150%与line-height:1.5的真正区别是什么？</a></p><h2 id="float-浮动"><a href="#float-浮动" class="headerlink" title="float (浮动)"></a>float (浮动)</h2><p>由于浮动的设置，两个块级元素不在各占一行，而是在同一行中一起显示。如果希望两个仍各占一行，则可以用clear属性来清楚浮动。其中设置该属性的值为<code>both</code>时，表示在元素的左右两侧均不允许浮动元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体请通过预览DEMO来观察。</p><h2 id="text-shadow、box-shadow"><a href="#text-shadow、box-shadow" class="headerlink" title="text-shadow、box-shadow"></a>text-shadow、box-shadow</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:x</span> <span class="selector-tag">y</span> <span class="selector-tag">deg</span> <span class="selector-tag">color</span>;</span><br><span class="line">box-shadow:x y deg speed color inset/outset;</span><br></pre></td></tr></table></figure><h2 id="样式优先级-由低到高"><a href="#样式优先级-由低到高" class="headerlink" title="样式优先级 由低到高"></a>样式优先级 由低到高</h2><ul><li>通用选择器。如<code>*{...}</code></li><li>标签选择器。如<code>h1{...}</code></li><li>类选择器。如<code>.nav{...}</code></li><li>伪类选择器。如<code>a:hover{...} 、 li:first-child{...}</code></li><li>ID选择器。如<code>#title{...}</code></li><li>行间样式。如<code>&lt;div style = &quot;color:red;&quot;&gt;&lt;/div&gt;</code></li></ul><h1 id="lesson-4-总结"><a href="#lesson-4-总结" class="headerlink" title="lesson 4 总结"></a>lesson 4 总结</h1><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson4/index.html" target="_blank" rel="noopener">DEMO预览地址</a></p><blockquote><p>终于迎来了我喜欢的 javascript 环节了呢，嘻嘻~</p></blockquote><h2 id="console"><a href="#console" class="headerlink" title="console"></a>console</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(msg); <span class="comment">//正常显示</span></span><br><span class="line"><span class="built_in">console</span>.error(msg); <span class="comment">//淡红底色并带有错误标志</span></span><br><span class="line"><span class="built_in">console</span>.info(msg);<span class="comment">// 正常</span></span><br><span class="line"><span class="built_in">console</span>.debug(msg);<span class="comment">// 调试信息</span></span><br><span class="line"><span class="built_in">console</span>.warn(msg);<span class="comment">// 淡黄色底色并带有警告标志</span></span><br></pre></td></tr></table></figure><p><code>tip:</code> 在Console窗口中要为代码换行时，可以使用Shift+Enter组合键。</p><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><ul><li>立即执行函数 (IIFE: Immediately Invoked Function Expression)</li></ul><p>如果定义了一个匿名函数且没有将其赋予某个变量，要执行这个匿名函数，则可以采用<code>(function(){})()</code>的代码格式。其中前一个括号里面是匿名的函数，后一个括号中是传入的参数，如果没有参数则括号中的内容可以为空，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'My name is '</span>+name);</span><br><span class="line">&#125;)(<span class="string">'Roc'</span>) <span class="comment">//输出 My name is Roc</span></span><br></pre></td></tr></table></figure><p>当然，也有其他写法，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'My name is '</span>+name);</span><br><span class="line">&#125;(<span class="string">'Roc'</span>)) <span class="comment">//输出 My name is Roc</span></span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'My name is '</span>+name);</span><br><span class="line">&#125;(<span class="string">'Roc'</span>) <span class="comment">//输出 My name is Roc</span></span><br></pre></td></tr></table></figure><p>简单来说，<code>IIFE</code>的作用在于使得函数在被载入时自动执行，同时利用匿名函数和闭包的特性形成一个独立的作用域，将内部所有的变量封闭起来，使其不会影响到函数外部的其他变量。</p><h2 id="cancelBubble-和-stopPropagation"><a href="#cancelBubble-和-stopPropagation" class="headerlink" title="cancelBubble 和 stopPropagation"></a>cancelBubble 和 stopPropagation</h2><blockquote><p>可以参考DEMO中的应用来理解</p></blockquote><p>事实上<code>stopPropagation</code>和<code>cancelBubble</code>的作用是一样的，都是用来阻止浏览器默认的事件冒泡行为。<br>不同之处在于<code>stopPropagation</code>属于W3C标准，试用于Firefox等浏览器，但是不支持IE浏览器。相反<code>cancelBubble</code>不符合W3C标准，而且只支持IE浏览器。所以很多时候，我们都要结合起来用。不过，<code>cancelBubble</code>在新版本chrome,opera浏览器中已经支持。<br>所以，一般我们都写作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elem.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">window</span>.event ? e.cancelBubble = <span class="literal">true</span> : e.stopPropagation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，<code>jquery</code>的<code>stopPropagation()</code>已经做了兼容性处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">jQuery.Event.prototype = &#123;</span><br><span class="line">    stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isPropagationStopped = returnTrue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> e = <span class="keyword">this</span>.originalEvent;</span><br><span class="line">        <span class="keyword">if</span> ( !e ) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if stopPropagation exists run it on the original event</span></span><br><span class="line">        <span class="keyword">if</span> ( e.stopPropagation ) &#123;</span><br><span class="line">            e.stopPropagation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// otherwise set the cancelBubble property of the original event to true (IE)</span></span><br><span class="line">        e.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考网址：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble" target="_blank" rel="noopener">Event.cancelBubble - Web APIs | MDN</a></p><h1 id="lesson-5-总结"><a href="#lesson-5-总结" class="headerlink" title="lesson 5 总结"></a>lesson 5 总结</h1><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson5/index.html" target="_blank" rel="noopener">DEMO预览地址</a></p><h2 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h2><p>viewport 翻译为中文可以叫做”视区”。<br>手机浏览器是把页面放在一个虚拟的”窗口”（viewport）中，通常这个虚拟的”窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。</p><p>一个常用的 viewport meta 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>width：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。</li><li>height：和 width 相对应，指定高度。</li><li>initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。</li><li>maximum-scale：允许用户缩放到的最大比例。</li><li>minimum-scale：允许用户缩放到的最小比例。</li><li>user-scalable：用户是否可以手动缩放。</li></ul><h2 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw vh"></a>vw vh</h2><p>vw    相对于视窗(viewport)的宽度：视窗宽度是100vw<br>vh    相对于视窗(viewport)的高度：视窗高度是100vh<br>vmin 和 vmax 自动选择相对于<code>viewport</code>宽高而言最小或者最大的制</p><ul><li>换算：5vw = 屏幕宽度的1/20，即为5%，当屏幕宽度为400px时，字体大小为20px；</li></ul><h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><ul><li>为父元素增加display</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:-webkit-flex</span>;  <span class="comment">/* webkit内核浏览器的兼容写法 */</span></span><br></pre></td></tr></table></figure><ul><li>flex-direction<br>取值有：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">row            横向布局 默认取值</span><br><span class="line">column         纵向布局</span><br><span class="line">column-reverse 纵向反向排列</span><br></pre></td></tr></table></figure><ul><li>flex</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex</span> : 1 1 <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">-webkit</span> : 1 1 <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure><p>flex属性的三个参数分别为：<br>  flex-grow : 决定伸缩元素可扩展空间的分配，在此为1，表示每个元素的可扩展空间大小相等；<br>  flex-shrink : 定义当元素超过容器的大小后的压缩比例，在此为1，即每隔元素的亚索能力相同；<br>  flex-basis : 定义伸缩的基准值，在此为<code>auto</code>，即自动分配空间。</p><h2 id="CSS-Sprite-雪碧图"><a href="#CSS-Sprite-雪碧图" class="headerlink" title="CSS Sprite 雪碧图"></a>CSS Sprite 雪碧图</h2><blockquote><p>CSS雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。该图片使用CSS background和background-position属性渲染，这也就意味着你的标签变得更加复杂了，图片是在CSS中定义，而非<img>标签。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:block; <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">65px</span>; <span class="attribute">line-height</span>:<span class="number">65px</span>; <span class="comment">/*定义状态*/</span></span><br><span class="line">    <span class="attribute">text-indent</span>:-<span class="number">2015px</span>; <span class="comment">/*隐藏文字*/</span></span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(button.png); <span class="comment">/*定义背景图片*/</span></span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">0</span> <span class="number">0</span>; <span class="comment">/*定义链接的普通状态，此时图像显示的是顶上的部分*/</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">background-position</span>:<span class="number">0</span> -<span class="number">66px</span>; <span class="comment">/*定义链接的滑过状态，此时显示的为中间部分，向下取负值*/</span>&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">background-position</span>:<span class="number">0</span> -<span class="number">132px</span>; <span class="comment">/*定义链接的普通状态，此时显示的是底部的部分，向下取负值*/</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Icon-Font-图标字体"><a href="#Icon-Font-图标字体" class="headerlink" title="Icon Font 图标字体"></a>Icon Font 图标字体</h2><p>自定义字体：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">'roc-font'</span>;</span><br><span class="line"><span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">'roc-iconfont.ttf'</span>),<span class="built_in">url</span>(<span class="string">'roc-iconfont.eot'</span>),<span class="built_in">url</span>(<span class="string">'roc-iconfont.woff'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际使用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'roc-font'</span>;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">'\e626'</span>; <span class="comment">/* 来自于自定义字体的unicode编码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些移动端开发技巧"><a href="#一些移动端开发技巧" class="headerlink" title="一些移动端开发技巧"></a>一些移动端开发技巧</h2><ul><li>当用户在iOS设备中按住一个页面元素时，iOS会自动在元素周围显示橙色的外框，表示钙元素被按中，这一高亮效果可以用下面代码去除</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0); <span class="comment">/* 设为透明 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码还可以解决在一些Android机型中，单击后发生被绑定单击区域闪一下的问题。</p><ul><li>以下代码可以避免在横竖屏幕切换时，移动设备对页面的文字大小进行自动调整：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当页面高度设置为100%是，去除系统自带的导航栏高度的方法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.height = <span class="built_in">window</span>.innerHeight + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><ul><li>获取用户设备类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(navigator.userAgent)</span><br></pre></td></tr></table></figure><ul><li>获取设备的网络连接类型, ethernet, wifi,2G,3G,4G …</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.connection.type</span><br></pre></td></tr></table></figure><ul><li>获取设备的横竖屏状态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.orientation || screen.orientation</span><br></pre></td></tr></table></figure><ul><li>用户在使用iOS设备从主屏幕直接启动某个页面时，显示一副启动图：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"default.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当站点有配套的Apple Store APP时，可以通过添加名为<code>Smart App Banners</code> 的 meta 标签，将应用链接（下载条幅）显示在页面顶部，方便用户下载使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-idd=547523434"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="lesson-6-总结"><a href="#lesson-6-总结" class="headerlink" title="lesson 6 总结"></a>lesson 6 总结</h1><blockquote><p>本节课主要学习是布局相关知识。</p></blockquote><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson6/index.html" target="_blank" rel="noopener">两列均分布局</a><br>| <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson6/grid.html" target="_blank" rel="noopener">格子布局</a><br>| <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson6/grid1.html" target="_blank" rel="noopener">格子布局 - 跨行</a></p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是老版本IE并不支持<code>::after</code>伪元素，可以采用手动插入一段DOM结构的方式来清除浮动。<br>一般的，一个常用的清除浮动的类就可以写作：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要补充说明的是，将<code>display</code>属性设置为<code>table</code>，并设置<code>clear</code>为<code>both</code>，是为了使清除浮动的时候形成一种名为<code>BFC（Block Format Content, 块级格式化上下文）</code> 的机制。在<code>BFC</code>中，元素布局不收外界的影响，我们往往利用该特性来清除浮动元素对其他非浮动元素带来的影响。<br>此外，在<code>BFC</code>中，块级元素与由行内元素组成的”行盒子”会垂直的沿其父元素的边框排列。触发<code>BFC</code>的因素很多，如上述设置<code>display</code>为<code>table</code>即为其中的一种因素（也可以设置<code>display</code>为<code>inline-block</code>、<code>table-cell</code>、<code>table-caption</code>、<code>flex</code>、<code>inline-flex</code>等）。<br>而且，<code>overflow</code>不为<code>visible</code>也会触发<code>BFC</code>。</p><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson6/bfc.html" target="_blank" rel="noopener">overflow触发BFC的Demo</a></p><h2 id="box-shadow-设置框线"><a href="#box-shadow-设置框线" class="headerlink" title="box-shadow 设置框线"></a>box-shadow 设置框线</h2><p>为元素顶部绘制一条1像素宽，颜色为40%透明度黑色的边框：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span><span class="selector-pseudo">:0</span> 0 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.4</span>) <span class="selector-tag">inset</span>;</span><br></pre></td></tr></table></figure><h2 id="布局总结："><a href="#布局总结：" class="headerlink" title="布局总结："></a>布局总结：</h2><p>如Demo中所体现出来的，无论什么布局都可以使用百分比布局来实现：</p><ul><li>规定其父元素的固定宽度（或者最小宽度）；</li><li>设置其子元素的宽度为对应的百分比（如两列均等布局，宽度分别为50%）；</li><li>设置子元素的float(浮动)；</li><li>为了防止高度”坍塌”，清除父元素浮动。</li></ul><h1 id="lesson-7-总结"><a href="#lesson-7-总结" class="headerlink" title="lesson 7 总结"></a>lesson 7 总结</h1><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson7/index.html" target="_blank" rel="noopener">两列自适应布局</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson7/three-col.html" target="_blank" rel="noopener">三列自适应布局（圣杯布局）</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson7/two-wings.html" target="_blank" rel="noopener">三列自适应布局（淘宝UED - 双飞翼布局）</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson7/waterfall.html" target="_blank" rel="noopener">瀑布流布局）</a></p><p>本节课主要学习了高阶布局相关的知识，并深入理解了<code>relative</code>（相对布局）和<code>absolute</code>（绝对布局）</p><p>参考网址：<a href="http://www.zhangxinxu.com/wordpress/2010/12/css-%E7%9B%B8%E5%AF%B9%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">css-相对绝对定位系列（一） —— 张鑫旭的博客</a></p><h1 id="lesson-8-总结"><a href="#lesson-8-总结" class="headerlink" title="lesson 8 总结"></a>lesson 8 总结</h1><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson8/index.html" target="_blank" rel="noopener">transition demo</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson8/animation.html" target="_blank" rel="noopener">animation demo1 - 会旋转的图标</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson8/animation2.html" target="_blank" rel="noopener">animation demo2 - 会移动的一排图标</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson8/animation3.html" target="_blank" rel="noopener">animation demo3 - cubic bezier</a></p><blockquote><p>动画与特效</p></blockquote><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p><code>transition</code> 属性是一个简写属性，用于设置四个过渡属性：</p><ul><li>transition-property</li><li>transition-duration</li><li>transition-timing-function</li><li>transition-delay</li></ul><p><strong>注释</strong>：请始终设置 transition-duration 属性，否则时长为 0，就不会产生过渡效果。</p><p><strong>默认值：</strong> <code>all 0 ease 0</code></p><table><thead><tr><th>值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>transition-property</td><td style="text-align:left">规定设置过渡效果的 CSS 属性的名称。</td></tr><tr><td>transition-duration</td><td style="text-align:left">规定完成过渡效果需要多少秒或毫秒。</td></tr><tr><td>transition-timing-function</td><td style="text-align:left">规定速度效果的速度曲线。默认 <code>ease</code></td></tr><tr><td>transition-delay</td><td style="text-align:left">定义过渡效果何时开始。</td></tr></tbody></table><p>属性取值：</p><ul><li>transition-property : <code>all</code> <code>none</code> 或者其他的属性值，如：<code>width</code> <code>background</code> 等</li><li>transition-duration : <code>0.5s</code> <code>5000ms</code></li><li>transition-timing-function : <code>ease</code> <code>linear</code> <code>ease-in</code> <code>ease-out</code> <code>ease-in-out</code></li><li>transition-delay <code>0s</code></li></ul><p>一般用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.5s</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">color</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">linear</span>;</span><br></pre></td></tr></table></figure><p>组合用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">color</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">linear</span>, <span class="selector-tag">background</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span> 1<span class="selector-tag">s</span>;</span><br></pre></td></tr></table></figure><h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p><code>animation</code> 属性是一个简写属性，用于设置六个动画属性：</p><table><thead><tr><th>值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>animation-name</td><td style="text-align:left">规定需要绑定到选择器的 keyframe 名称。</td></tr><tr><td>animation-duration</td><td style="text-align:left">规定完成动画所花费的时间，以秒或毫秒计。</td></tr><tr><td>animation-timing-function</td><td style="text-align:left">规定动画的速度曲线。默认 <code>ease</code></td></tr><tr><td>animation-delay</td><td style="text-align:left">规定在动画开始之前的延迟。</td></tr><tr><td>animation-iteration-count</td><td style="text-align:left">规定动画应该播放的次数。</td></tr><tr><td>animation-direction</td><td style="text-align:left">规定是否应该轮流反向播放动画。</td></tr></tbody></table><p><strong>注释</strong>：请始终规定 animation-duration 属性，否则时长为 0，就不会播放动画了。</p><h2 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h2><p><code>animation-fill-mode</code> 属性规定动画在播放之前或之后，其动画效果是否可见。<br><strong>注释</strong>：其属性值是由逗号分隔的一个或多个填充模式关键词。</p><p>语法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-fill-mode : none | forwards | backwards | both;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>none</td><td style="text-align:left">不改变默认行为。</td></tr><tr><td>forwards</td><td style="text-align:left">当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。</td></tr><tr><td>backwards</td><td style="text-align:left">在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。</td></tr><tr><td>both</td><td style="text-align:left">向前和向后填充模式都被应用。</td></tr></tbody></table><p>参考网址：</p><p><a href="https://www.w3cplus.com/css3/understanding-css-animation-fill-mode-property.html" target="_blank" rel="noopener">理解animation-fill-mode属性</a><br><a href="https://segmentfault.com/q/1010000003867335" target="_blank" rel="noopener">如何理解animation-fill-mode及其使用？</a></p><h2 id="为动画添加-cubic-bezier-（三次贝塞尔）函数"><a href="#为动画添加-cubic-bezier-（三次贝塞尔）函数" class="headerlink" title="为动画添加 cubic-bezier （三次贝塞尔）函数"></a>为动画添加 cubic-bezier （三次贝塞尔）函数</h2><p>通过 <a href="http://cubic-bezier.com" target="_blank" rel="noopener">cubic-bezier</a> 网站来生成三次贝塞尔曲线函数，然后添加到<code>animation</code>后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>: move <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(.51,-1.09,.39,1.89);</span><br><span class="line">    <span class="attribute">-webkit-animation</span>: move <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(.51,-1.09,.39,1.89);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="lesson-9-总结"><a href="#lesson-9-总结" class="headerlink" title="lesson 9 总结"></a>lesson 9 总结</h1><ul><li>页面切换动效</li></ul><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/index.html" target="_blank" rel="noopener">横向平移特效</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/index2.html" target="_blank" rel="noopener">纵向平移特效</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/index3.html" target="_blank" rel="noopener">缩小放大特效</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/index4.html" target="_blank" rel="noopener">水平翻转特效</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/index5.html" target="_blank" rel="noopener">翻转加缩放</a></p><ul><li>Loading 动效</li></ul><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/loading.html" target="_blank" rel="noopener">简单loading</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/loading2.html" target="_blank" rel="noopener">带有拖尾效果的loading</a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/loading-dot.html" target="_blank" rel="noopener">横向 dot loading </a><br> | <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/loading-round.html" target="_blank" rel="noopener">circle dot loading </a></p><ul><li><p>翻书动效</p><p>| <a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson9/book.html" target="_blank" rel="noopener">book paging</a></p></li></ul><h2 id="Meta-http-equiv属性"><a href="#Meta-http-equiv属性" class="headerlink" title="Meta http-equiv属性"></a>Meta http-equiv属性</h2><p>http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。</p><blockquote><p>meat标签的http-equiv属性语法格式是：＜meta http-equiv=”参数” content=”参数变量值”＞</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Page-Enter"</span> <span class="attr">content</span>=<span class="string">"revealTrans(duration=1.0,transtion=12)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Page-Exit"</span>  <span class="attr">contect</span>=<span class="string">"revealTrans(duration=1.0,transtion=12)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Duration的值为网页动态过渡的时间，单位为秒。<br>Transition是过渡方式，它的值为0到23，分别对应24种过渡方式。如下表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0  盒状收缩            1  盒状放射  </span><br><span class="line">2  圆形收缩            3  圆形放射  </span><br><span class="line">4  由下往上            5  由上往下  </span><br><span class="line">6  从左至右            7  从右至左  </span><br><span class="line">8  垂直百叶窗          9  水平百叶窗  </span><br><span class="line">10 水平格状百叶窗       11 垂直格状百叶窗  </span><br><span class="line">12 随意溶解            13 从左右两端向中间展开  </span><br><span class="line">14 从中间向左右两端展开  15 从上下两端向中间展开  </span><br><span class="line">16 从中间向上下两端展开  17 从右上角向左下角展开  </span><br><span class="line">18 从右下角向左上角展开  19 从左上角向右下角展开  </span><br><span class="line">20 从左下角向右上角展开  21 水平线状展开  </span><br><span class="line">22 垂直线状展开         23 随机产生一种过渡方式</span><br></pre></td></tr></table></figure><h2 id="CSS3-perspective-属性"><a href="#CSS3-perspective-属性" class="headerlink" title="CSS3 perspective 属性"></a>CSS3 perspective 属性</h2><ul><li>浏览器支持</li></ul><p>目前浏览器都<strong>不</strong>支持 <code>perspective</code> 属性。<br>Chrome 和 Safari 支持替代的 <code>-webkit-perspective</code> 属性。</p><ul><li>定义和用法</li></ul><p>perspective 属性定义 3D 元素距视图的距离，以像素计。该属性允许您改变 3D 元素查看 3D 元素的视图。<br>当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身。</p><p><strong>注释</strong>：perspective 属性只影响 3D 转换元素。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perspective: number|none;</span><br></pre></td></tr></table></figure><h2 id="CSS3-backface-visibility-属性"><a href="#CSS3-backface-visibility-属性" class="headerlink" title="CSS3 backface-visibility 属性"></a>CSS3 backface-visibility 属性</h2><p><code>backface-visibility</code> 属性定义当元素不面向屏幕时是否可见。<br>如果在旋转元素不希望看到其背面时，该属性很有用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backface-visibility: visible|hidden;</span><br></pre></td></tr></table></figure><h2 id="before-与-after-伪元素"><a href="#before-与-after-伪元素" class="headerlink" title="before 与 after 伪元素"></a>before 与 after 伪元素</h2><p><strong>一个小知识点：after伪元素默认的显示层级高于before伪元素。</strong></p><h2 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h2><p>transform-origin 属性允许您改变被转换元素的位置。<br>2D 转换元素能够改变元素 x 和 y 轴。3D 转换元素还能改变其 Z 轴。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform-origin</span>: <span class="selector-tag">x-axis</span> <span class="selector-tag">y-axis</span> <span class="selector-tag">z-axis</span>;</span><br></pre></td></tr></table></figure><p>参考网址：<a href="http://www.w3school.com.cn/cssref/pr_transform-origin.asp" target="_blank" rel="noopener">CSS3 transform-origin 属性</a></p><h1 id="lesson-10-总结"><a href="#lesson-10-总结" class="headerlink" title="lesson 10 总结"></a>lesson 10 总结</h1><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson10/index.html" target="_blank" rel="noopener">DEMO预览地址</a></p><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><p>canvas本身没有绘图能力，需要通过它的<code>getContext()</code>方法来返回可绘图的对象。</p><p>清除画布区域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">window</span>.innerWidth,<span class="built_in">window</span>.innerHeight);</span><br></pre></td></tr></table></figure><p>Canvas中的<code>arc()</code>方法可用于创建原型形状，它的几个参分别代表圆心的x坐标、y坐标、半径、起始角度和结束角度。其中角度的单位是”弧度”而非”角度”，因此要绘制一个完整的原型，其起始角度为0，结束角度应为2π。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="随机颜色"><a href="#随机颜色" class="headerlink" title="随机颜色"></a>随机颜色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'#'</span>+(<span class="string">'000000'</span>+(<span class="built_in">Math</span>.random()*<span class="number">0x1000000</span>&lt;&lt;<span class="number">0</span>).toString(<span class="number">16</span>)).slice(<span class="number">-6</span>)</span><br></pre></td></tr></table></figure><h2 id="GSAP"><a href="#GSAP" class="headerlink" title="GSAP"></a>GSAP</h2><p><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson10/gsap.html" target="_blank" rel="noopener">带缩略效果的飞机</a><br><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson10/example2.html" target="_blank" rel="noopener">会旋转的飞机</a><br><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson10/example3.html" target="_blank" rel="noopener">矩形变圆形</a><br><a href="http://htmlpreview.github.io/?https://github.com/rocwong-cn/html5-learning/blob/master/lesson10/example4.html" target="_blank" rel="noopener">盒子横向展开效果</a></p><p>更多介绍见Github:<a href="https://github.com/greensock/GreenSock-JS" target="_blank" rel="noopener">GreenSock-JS</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解__proto__和prototype</title>
      <link href="/2018/05/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3prototype/"/>
      <url>/2018/05/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3prototype/</url>
      
        <content type="html"><![CDATA[<p>最近在收集面试题的时候发现了一些考查prototype的题目，然而很多都是一知半解的看完了，今天就深入理解一下prototype和__proto__ 。</p><p>首先要明确的是：</p><ol><li>在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。即：对象具有属性__proto__，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型，这也保证了实例能够访问在构造函数原型中定义的属性和方法。<br>如：</li></ol><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'Roc'</span>;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);<span class="comment">//&#123;name: "Roc", getName: ƒ, constructor: ƒ&#125;</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p.\__proto\___);<span class="comment">//&#123;name: "Roc", getName: ƒ, constructor: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(p.constructor.prototype);<span class="comment">//&#123;name: "Roc", getName: ƒ, constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure><p>由此可以得出以上结论，以及：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.constructor.prototype = instance.\__proto\__</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>方法(Function)这个特殊的对象，除了和其他对象一样有上述<em>proto</em>属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象）。原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。</p><img src="http://rocwong.oss-cn-beijing.aliyuncs.com/e83bca5f1d1e6bf359d1f75727968c11_r.jpg?Expires=1551454962&OSSAccessKeyId=TMP.AQEziqlazK_vGvNGPqzJu7yjdfGBLy9wQLs2jSIB-lymoRkmDZk2l3d2CNtkAAAwLAIUUUlWFhMnxeed4AZZY6rwLT-tankCFBvheikGPYe_HvmeqKwYPCv5o08Q&Signature=q6e3xOGBKJA1EhXGT%2FGKe1%2F5rms%3D" title="[prototype]"></li></ol><p>好啦，知道了这两个基本点，我们来看看上面这副图。</p><ul><li>构造函数Foo()构造函数的原型属性Foo.prototype指向了原型对象，在原型对象里有共有的方法，所有构造函数声明的实例（这里是f1，f2）都可以共享这个方法。</li><li>原型对象Foo.prototypeFoo.prototype保存着实例共享的方法，有一个指针constructor指回构造函数。</li><li>实例f1和f2是Foo这个对象的两个实例，这两个对象也有属性__proto__，指向构造函数的原型对象，这样子就可以像上面1所说的访问原型对象的所有方法啦。</li><li>另外：构造函数Foo()除了是方法，也是对象啊，它也有__proto__属性，指向谁呢？指向它的构造函数的原型对象呗。函数的构造函数不就是Function嘛，因此这里的__proto__指向了Function.prototype。其实除了Foo()，Function(), Object()也是一样的道理。原型对象也是对象啊，它的__proto__属性，又指向谁呢？同理，指向它的构造函数的原型对象呗。这里是Object.prototype.最后，Object.prototype的__proto__属性指向null。<br><strong>&gt; 总结</strong>：</li><li>对象有属性__proto__,指向该对象的构造函数的原型对象。</li><li>方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象。</li></ul><p>（本文系转载）<br>作者：doris<br>链接：<a href="https://www.zhihu.com/question/34183746/answer/58155878" target="_blank" rel="noopener">https://www.zhihu.com/question/34183746/answer/58155878</a><br>来源：知乎</p>]]></content>
      
      
      <categories>
          
          <category> 基础原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数柯里化</title>
      <link href="/2018/04/03/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/2018/04/03/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p></blockquote><p>以上是来自维基百科的名词解释，有点绕。简而言之，柯里化通常也称部分求值，其含义是给函数分步传递参数，每次传递参数后部分应用参数，并返回一个更具体的函数接受剩下的参数，这中间可嵌套多层这样的接受部分参数函数，直至返回最后结果。<br>因此柯里化的过程是逐步传参，逐步缩小函数的适用范围，逐步求解的过程。</p><a id="more"></a><p>先来看一下柯里化的通用实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">            __args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> __inargs = slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">                <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, __args.concat(__inargs));</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>解读一下这段代码：</p><ul><li>line 2 &amp; line 3 : Array.prototype.slice.call(arguments)能将具有length属性的对象转成数组，除了IE下的节点集合（因为ie下的dom对象是以com对象的形式实现的，js对象与com对象不能进行转换），所以这里是除了<strong>fn</strong>之外的参数全部转化为了数组</li><li>接下来的 line 4/5/6/7 其实是返回了一个闭包</li><li>line 5 将闭包函数内的参数转化为数组 __inargs</li><li>line 6 执行传入的<strong>fn</strong>函数，其参数为两次传入参数的集合</li><li>注：当apply传入null/undefined为第一个参数的时候将执行js全局对象，浏览器中是window，其他环境是global。</li></ul><p>柯里化的实用性提现在很多方面：</p><h4 id="1-提高适用性"><a href="#1-提高适用性" class="headerlink" title="1 提高适用性"></a>1 提高适用性</h4><p>根据以上代码我们来做一个简单的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">apple</span>(<span class="params">sth</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`apple <span class="subst">$&#123;sth&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pineapple</span>(<span class="params">sth</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">`pineapple <span class="subst">$&#123;sth&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">handler,list</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.map(handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据的每一项进行遍历拼接</span></span><br><span class="line">map(apple, [<span class="string">'pen'</span>,<span class="string">'watch'</span>,<span class="string">'phone'</span>]);</span><br><span class="line"></span><br><span class="line">map(pineapple, [<span class="string">'pen'</span>,<span class="string">'watch'</span>,<span class="string">'phone'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入 柯里化 实现后,可以看到和上面的结果是一致的</span></span><br><span class="line"><span class="keyword">var</span> mapApple = currying(map, apple);</span><br><span class="line">mapApple([<span class="string">'pen'</span>,<span class="string">'watch'</span>,<span class="string">'phone'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapPine = currying(map, pineapple);</span><br><span class="line">mapPine([<span class="string">'pen'</span>,<span class="string">'watch'</span>,<span class="string">'phone'</span>]);</span><br></pre></td></tr></table></figure><p>由此，可知柯里化不仅仅是提高了代码的合理性，更重的它突出一种思想—降低适用范围，提高适用性。</p><h4 id="2-延迟执行"><a href="#2-延迟执行" class="headerlink" title="2 延迟执行"></a>2 延迟执行</h4><p>柯里化的另一个应用场景是延迟执行。不断的柯里化，累积传入的参数，最后执行。以下是其通用写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _args = []</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Array</span>.prototype.push.apply(_args, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> cb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-固定易变因素"><a href="#3-固定易变因素" class="headerlink" title="3 固定易变因素"></a>3 固定易变因素</h4><p>柯里化特性决定了它这应用场景。提前把易变因素，传参固定下来，生成一个更明确的应用函数。最典型的代表应用，是bind函数用以固定this这个易变对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">    _args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _this.apply(context, _args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记一</title>
      <link href="/2018/03/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2018/03/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<ul><li><p>使用正则和replace实现千位分隔符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1234567890'</span>.replace(<span class="regexp">/\B\d&#123;3&#125;/g</span>,<span class="string">',$&amp;’);</span></span><br></pre></td></tr></table></figure></li><li><p>css3 中使图片变色的方式：filter(gray)</p></li><li><p>css3 中的动态计算函数：calc() = calc(四则运算)，<strong>需要注意的是，运算符前后都需要保留一个空格</strong> , 例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: calc(<span class="number">100%</span> - <span class="number">10px</span>)</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>100vh表示屏幕内部高度，100vw表示屏幕内部宽度</p></li><li><p>怎么让Chrome支持小于12px 的文字</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;<span class="attribute">font-size</span>:<span class="number">10px</span>;-webkit-<span class="attribute">transform</span>:scale(<span class="number">0.8</span>);&#125;<span class="comment">//0.8是缩放比例</span></span><br></pre></td></tr></table></figure></li><li><p>如果需要手动写动画，你认为最小时间间隔是多久</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多数显示器默认频率是<span class="number">60Hz</span>，即<span class="number">1</span>秒刷新<span class="number">60</span>次，所以理论上最小间隔为<span class="number">1</span>/<span class="number">60</span>＊<span class="number">1000ms</span> ＝ <span class="number">16.7ms</span></span><br></pre></td></tr></table></figure></li><li><p>如何判断一个对象是否属于某个类？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="keyword">instanceof</span> 即<span class="keyword">if</span>(a <span class="keyword">instanceof</span> Person)&#123;alert(<span class="string">'yes'</span>);&#125;</span><br></pre></td></tr></table></figure></li><li><p>写一个通用的事件侦听器函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event(事件)工具集，来源：github.com/markyun</span></span><br><span class="line">RocWang.Event = &#123;</span><br><span class="line"><span class="comment">// 页面加载完成后</span></span><br><span class="line">  readyEvent: <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">      fn = <span class="built_in">document</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="built_in">window</span>.onload = fn;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        oldonload();</span><br><span class="line">        fn();</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class="line"><span class="comment">// 参数： 操作的元素,事件名称 ,事件处理程序</span></span><br><span class="line">  addEvent: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line"><span class="comment">//事件类型、需要执行的函数、是否捕捉</span></span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">      element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        handler.call(element);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 移除事件</span></span><br><span class="line">  removeEvent: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEnentListener) &#123;</span><br><span class="line">      element.removeEnentListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</span><br><span class="line">      element.detachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.stopPropagation) &#123;</span><br><span class="line">      ev.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ev.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 取消事件的默认行为</span></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 获取事件目标</span></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span> (!ev) &#123;</span><br><span class="line">      <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</span><br><span class="line">      <span class="keyword">while</span> (c) &#123;</span><br><span class="line">        ev = c.arguments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = c.caller;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年终总结</title>
      <link href="/2017/12/29/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2017/12/29/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>动荡的一年。</p></blockquote><p>&emsp;&emsp;每到临近年终，心里都有一种失落的感觉，这种失落感既来于年初给自己定的目标很多没有实现，也源于在很多机遇来临的时候没有好好把握。</p><a id="more"></a><p><strong>&gt; 外部因素</strong>：<br>16年底进入的元银在17年初黄了，被老东家丰瑞祥召回，屋漏偏逢连夜雨，丰瑞祥在10月份资金链断裂，发不出工资，大批量裁员，我也离职了，来到了文思。</p><p><strong>&gt; 工作方面</strong>：<br>在技术的成长反面，今年是我进步最慢的一年，对自己十分不满意。做了一年的RN+react，想起去年给自己定下要征服android，迈进全栈的计划，对自己失望。</p><ul><li>使用RN &amp; react-navigation &amp; redux封装了一个脚手架，比起官网例子更简单易懂，目前在github上的star 达到21个。</li><li>学习mobx的过程中，使用RN &amp; mobx &amp; react-native-router-flux开发了一个简单的APP (ASimpleApp),也开源在了GitHub。</li><li>使用react重构了公司原来的前端框架，并开源了自己使用node部署react/vue项目的服务端部署方案。</li></ul><p><strong>&gt; 生活方面</strong>：</p><ul><li>还是单身狗，汪汪汪！！！！！！</li><li>学会了红烧肉，大盘鸡，学会了做鱼。</li><li>几乎要放弃LOL了，吃鸡真好玩！</li><li>一个人的日子过够了啊！</li><li>学会了滑板，虽然快被摔死了，虽然右腿膝盖上留下了一块很大的疤痕。</li><li>自己的脾气今年有好那么一点点，学会克制。</li></ul><p><strong>&gt; 新年寄语</strong>：</p><ul><li>改改自己的臭脾气吧，不然真的孤独终老了！</li><li>致力于学习原生JS和nodeJs，至少要看三本技术方面的书，并且po出读书笔记！</li><li>一！定！要！勤跑步，经常运动，不要做一个死肥宅了啊！</li><li>晚上十二点之前一定要睡觉啊，奔三了啊，身体不比当年了啊！</li><li>碰见喜欢的女孩子，一定要勇敢一点表达出来啊！</li><li>总之吧，新的一年，新的开始，一定要比去年好，要有长足的进步，不要让明年写年终总结的时候又这样尴尬的凑字了啊啊啊！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 又是一年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react项目在服务端部署方案</title>
      <link href="/2017/08/11/react%E9%A1%B9%E7%9B%AE%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/"/>
      <url>/2017/08/11/react%E9%A1%B9%E7%9B%AE%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1、node-环境安装"><a href="#1、node-环境安装" class="headerlink" title="1、node 环境安装"></a>1、node 环境安装</h3><ul><li>登录到你的linux服务器上（针对于64位的服务器来说），然后在当前目录依次执行：</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mkdir node</span><br><span class="line">cd node</span><br><span class="line">wget https://nodejs.org/dist/v6.11.2/node-v6.11.2-linux-x64.tar.xz</span><br><span class="line">xz -d node-v6.11.2-linux-x64.tar.xz</span><br><span class="line">tar xvf node-v6.11.2-linux-x64.tar</span><br><span class="line">mv node-v6.11.2-linux-x64 node-v6.11.2</span><br><span class="line">ln -s /usr/local/node/node-v6.11.2/bin/node  /usr/local/bin/node</span><br><span class="line">ln -s /usr/local/node/node-v6.11.2/bin/npm  /usr/local/bin/npm</span><br></pre></td></tr></table></figure><ul><li>至此，node环境已经安装完毕，可以通过<code>node -v</code>来检查是否安装成功。</li></ul><h3 id="2、配置node环境变量"><a href="#2、配置node环境变量" class="headerlink" title="2、配置node环境变量"></a>2、配置node环境变量</h3><blockquote><p>很重要！ 如果不配置环境变量，有些通过npm安装的CLI会找不到。</p></blockquote><ul><li>首先进入配置文件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><ul><li>按 <strong>i</strong> 键进入编辑模式，进入文件末尾添加：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NODE_HOME=/usr/local/node/node-v6.11.2/bin</span><br><span class="line">export PATH=$NODE_HOME:$PATH</span><br></pre></td></tr></table></figure><ul><li>然后按 <strong>ESC</strong> 键 ，在控制台输入<code>:wq</code>，回车保存退出。</li></ul><blockquote><p>注：具体的<strong>NODE_HOME</strong>路径来自第一步你的node安装的目录。</p></blockquote><h3 id="3、安装pm2模块"><a href="#3、安装pm2模块" class="headerlink" title="3、安装pm2模块"></a>3、安装<a href="http://pm2.keymetrics.io" target="_blank" rel="noopener">pm2</a>模块</h3><blockquote><p>pm2 是一个带有负载均衡功能的Node应用的进程管理器.</p></blockquote><ul><li>执行：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><ul><li>执行成功后，断开当前用户的服务器连接，然后重新登录。</li></ul><h2 id="二、-项目编译"><a href="#二、-项目编译" class="headerlink" title="二、 项目编译"></a>二、 项目编译</h2><h3 id="1、生成项目的根目录"><a href="#1、生成项目的根目录" class="headerlink" title="1、生成项目的根目录"></a>1、生成项目的根目录</h3><p>可以通过命令行或者手动创建的方式生成项目根目录，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir merchant-center</span><br></pre></td></tr></table></figure><p>可以将<code>merchant-center</code>替换成你自己的项目名称。</p><h3 id="2、配置express环境"><a href="#2、配置express环境" class="headerlink" title="2、配置express环境"></a>2、配置express环境</h3><p>将该文档的同级目录下的<code>app.js</code>和<code>package.json</code>两个文件放在你上一步生成的项目根目录下，然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>确保当前目录下生成<code>node_modules</code>文件夹。</p><h3 id="3、生成项目的部署文件"><a href="#3、生成项目的部署文件" class="headerlink" title="3、生成项目的部署文件"></a>3、生成项目的部署文件</h3><ul><li>在你的react项目根目录下执行：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ul><li>成功后，会生成<strong>dist</strong>目录，该目录的内容就是你要部署到服务器上的文件。</li><li>你可以通过：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sup [-r] [-P port] 源路径 user@目标IP地址:目标路径</span><br></pre></td></tr></table></figure><p>或者直接通拽的方式将该目录内容放置服务器上，然后将<code>dist</code>放在第一步生成的项目根目录下。此时，项目的目录结构应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">merchant-center        //或其他项目名称</span><br><span class="line">|____app.js//可以打开修改里面的3000端口号</span><br><span class="line">|____dist     //项目生成的静态文件（不要重命名！）</span><br><span class="line">|____node_modules//express的依赖模块</span><br><span class="line">|____package.json</span><br></pre></td></tr></table></figure><h2 id="三、项目启动"><a href="#三、项目启动" class="headerlink" title="三、项目启动"></a>三、项目启动</h2><p>首先确保你已经按照本文档执行了以上的所有步骤。然后在项目的根目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure><p>当你看到了这样的日志输出的时候，说明你已经启动成功了！</p><p><img src="http://og3zicoi5.bkt.clouddn.com/pm2.png" alt="启动成功"></p><p>另外，pm2的其他命令行参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js              # 项目启动</span><br><span class="line">pm2 stop all                  # 停止所有pm2启动的应用</span><br><span class="line">pm2 stop 0                    # 停止进程id为0的进程</span><br><span class="line">pm2 restart all               # 重启所有应用</span><br><span class="line">pm2 reload all                # 0延迟重新加载</span><br><span class="line">pm2 list                      # 列出所有用pm2启动的进程</span><br><span class="line">pm2 monit                     # 显示每一个应用的内存和cpu使用情况</span><br><span class="line">pm2 show [app-name]           # 显示当前应用的所有信息</span><br><span class="line"></span><br><span class="line">pm2 logs                      # 显示所有应用的日志</span><br><span class="line">pm2 logs [app-name]           # 显示当前应用的日志</span><br><span class="line">pm2 logs --json               # 以json格式展示日志</span><br></pre></td></tr></table></figure><p>更多操作命令可以去<a href="http://pm2.keymetrics.io" target="_blank" rel="noopener">pm2官网</a>或者其<a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">github</a>查看。</p><p>至此，项目已经部署完成啦！</p><p><strong>Open your browser , Enjoy it !</strong></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native开发过程中踩过的坑</title>
      <link href="/2017/08/07/react-native%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
      <url>/2017/08/07/react-native%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="0、Could-not-install-the-app-on-the-device-read-the-error-above-for-details"><a href="#0、Could-not-install-the-app-on-the-device-read-the-error-above-for-details" class="headerlink" title="0、Could not install the app on the device, read the error above for details."></a>0、Could not install the app on the device, read the error above for details.</h1><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jax$  react-native run-android</span><br><span class="line">Starting JS server...</span><br><span class="line">Building and installing the app on the device (cd android &amp;&amp; ./gradlew installDebug...</span><br><span class="line"></span><br><span class="line">Could not install the app on the device, read the error above for details.</span><br><span class="line">Make sure you have an Android emulator running or a device connected and have</span><br><span class="line">set up your Android development environment:</span><br><span class="line">https://facebook.github.io/react-native/docs/android-setup.html</span><br><span class="line"></span><br><span class="line">jax$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">192.168.56.101:5555 device</span><br></pre></td></tr></table></figure><p>解决方案：<br>首先，你应该检查你android/gradlew的权限，应该是755而不是644，然后在你的根目录执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 android/gradlew</span><br></pre></td></tr></table></figure></p><h1 id="1、当把RN项目从一个目录移动到另一个目录时，run-ios时可能会出现异常："><a href="#1、当把RN项目从一个目录移动到另一个目录时，run-ios时可能会出现异常：" class="headerlink" title="1、当把RN项目从一个目录移动到另一个目录时，run-ios时可能会出现异常："></a>1、当把RN项目从一个目录移动到另一个目录时，run-ios时可能会出现异常：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: PCH was compiled with module cache path</span><br></pre></td></tr></table></figure><p>解决方案：在项目根目录下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ios/build/ModuleCache/*</span><br></pre></td></tr></table></figure></p><p>然后再react-native run-ios,搞定。</p><h1 id="2、当react-native-unlink-xxxx某些模块是，会出现search-filter-not-a-function的异常，"><a href="#2、当react-native-unlink-xxxx某些模块是，会出现search-filter-not-a-function的异常，" class="headerlink" title="2、当react-native unlink xxxx某些模块是，会出现search.filter not a function的异常，"></a>2、当react-native unlink xxxx某些模块是，会出现search.filter not a function的异常，</h1><p>解决方案：<br>找到ios/项目名.xcodeproj/project.pbxproj，并用webstorm等非xocde编译器打开，然后全局搜索<strong>“$(inherited)”</strong>，<br>将其替换成(“$(inherited)”)。注意：是当前search path下只存在”$(inherited)”一个的情况下。</p><h1 id="3、RN版本0-45以后经常会出现一些third-party的问题，比如：third-party-‘config-h’-file-not-found"><a href="#3、RN版本0-45以后经常会出现一些third-party的问题，比如：third-party-‘config-h’-file-not-found" class="headerlink" title="3、RN版本0.45以后经常会出现一些third-party的问题，比如：third-party: ‘config.h’ file not found"></a>3、RN版本0.45以后经常会出现一些third-party的问题，比如：third-party: ‘config.h’ file not found</h1><p>解决方案：</p><ul><li><p>在项目根目录下执行：（不一定是这个路径，具体看third-party下的glog版本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd node_modules/react-native/third-party/glog-0.3.4</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../scripts/ios-configure-glog.sh</span><br></pre></td></tr></table></figure></li><li><p>Glog配置完成，xcode也会找到<em>config.h</em>头文件了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 移动端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android打渠道包</title>
      <link href="/2016/12/10/android%E6%89%93%E6%B8%A0%E9%81%93%E5%8C%85/"/>
      <url>/2016/12/10/android%E6%89%93%E6%B8%A0%E9%81%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>首先需要在android/app/build.gradle裡面添加一下命令：</p><a id="more"></a><blockquote><p>productFlavors {多渠道打包<br>            android {}安卓市场<br>            c360 {}360市场<br>            xiaomi {}小米市场<br>            yingyongbao {}应用宝<br>            flyme {}魅族flyme市场<br>            wandoujia {}豌豆荚<br>            anzhi {}安智市场<br>            lenovo {}联想<br>            huawei {}华为<br>            yingyonghui {}应用汇<br>            jifeng {}机锋市场<br>            sougou {}搜狗市场<br>            oppo {}oppo市场<br>            uc {}UC商店/PP助手/淘宝助手<br>            pp {}PP助手<br>            mumayi {}木蚂蚁<br>            vivo {}vivo<br>            jinli {}金立<br>            souhu {}搜狐<br>            baidu {}百度市场<br>            productFlavors.all { flavor -&gt;<br>                flavor.manifestPlaceholders = [APP_CHANNEL: name]<br>            }<br>        }</p><footer><strong>app/build.gradle</strong></footer></blockquote><p>   如果用到了友盟等統計插件的話，然後删除manifestPlaceholders里面的APP_CHANNEL,AndroidManifest.xml里面添加：<br>     <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:value=&quot;$&#123;APP_CHANNEL&#125;&quot;  android:name=&quot;UMENG_CHANNEL&quot;/&gt;</span><br><span class="line">     </span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 移动端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016年终总结</title>
      <link href="/2016/12/10/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2016/12/10/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[   <blockquote><p>流光容易把人抛，红了樱桃，绿了芭蕉。</p></blockquote><p>  &emsp;&emsp;人们总是在感叹时光的飞逝，岁月的无情，眼看它红樱桃，眼看它绿芭蕉，总想着从明天开始我要如何努力的迎头赶上。可是今天还长，明天还远，自己定下的明天一直没有来到，无限颓废的今天一直过不去。</p>  <a id="more"></a><p>  &emsp;&emsp;转眼一年即逝，既为慰藉逝去的一年，也为总结得失，故写一下这些流水账于此。</p>   <blockquote><p>关键词：年初；商城；山东济南；投资？；Ionic；上线；</p></blockquote><p>  &emsp;&emsp;年初，我们离开了丰瑞祥，创办了一家小公司，之于说公司，倒不如说是工作室。余、晋、郭、张、黄、李，我们七个人，郭主外，负责市场部，其余的除了余之外的我们几个主内负责技术研发。公司成立伊始，其实尚不足我们7个，只有晋和郭我们三个，当时接了一个山东大学的项目，做一个线上的商城和发布活动的app，android &amp; ios &amp; 微网站，项目总共下来30万左右吧，开发周期定的是一个月。时间紧！任务重！考虑到这些因素，我们当时就用了跨平台的技术框架Ionic！由于我们在北京这边当时也没办公地点，郭也正好在山东找了一个投资，说是如果能完成这个项目，就会投钱给我们，所以我们当时就直奔山东济南了。<br>  &emsp;&emsp;刚去的几天，我和晋住的是宾馆，一天好像是150块钱，郭男朋友在山东，所以她不和我们一起住。由于白天要去投资方的公司去上班，所以就租住在离公司不远的地方，150块钱租的地方环境并不好，一到晚上隔壁房间还很闹，我们晚上完全没办法工作，几经商议后，我们退了宾馆租了一个两居室，为期一月，3000元。环境很好，熬夜也很多，由于我们之前还是有一些商城的开发经验的，所以项目的开发过程也很顺利。一个月内，完成了三个平台的应用上线！<br>  &emsp;&emsp;呼~项目上线了，终于可以松一口气了。可是这个时候，投资方却传来消息说公司账务问题可能没办法注资给我们了。言下之意也很明显，也许是看我们团队太小，也可能是滋生了其他想法，反正就是不投钱了。无论如何，他们也还是对我们有所帮助的，在此致谢。<br>  &emsp;&emsp;项目完成了，晋思家心切，我也思霾心切（MDZZ?），于是我们就返京了。</p>  <blockquote><p>关键词：北京；VR；地下室；内蒙；奶牛；mac book pro；’郭’离开；</p></blockquote><p>  &emsp;&emsp;啊，北京！还是熟悉的配方，熟悉的味道。闻着北京厚重的雾霾味道，我们回来了！<br>  &emsp;&emsp;返京之前，余和郭在上地三街那边找了一个孵化器，孵化器内公司主要是做VR，不管怎样，我们暂时安定下来了。回到北京的这段时间，断断续续的维护了一段时间山东的那个商城项目，当时也感觉到了VR的火热，我们团队也有意想朝VR的这个方面去做，但是奈何我们都没有相关方面的经验，只好作罢。这时郭也正好拿到一个内蒙与牛相关的项目，但是需要去内蒙那边考核一下，实地感受一下牧民朋友和牛的热情（？？？）。<br>  <blockquote><p>蓝蓝的天空 清清的湖水 哎耶<br>绿绿的草原 这是我的家 哎耶<br>奔驰的骏马 洁白的羊群 哎耶<br>还有你姑娘 这是我的家 哎耶</p><footer><strong>腾格尔《天堂》</strong></footer></blockquote><br>   &emsp;&emsp;到了内蒙才知道，这个词里面唱的真的是真的！不过，内蒙的大哥们喝酒真的是豪爽，见面先三碗内蒙原浆。去了内蒙三天，没有一天晚上是竖着回酒店的。。。值得一提的是回京的时候，我们租了一辆SUV从内蒙的乡下一路开车回赤峰机场，在一望无际的公路上一路狂奔，简直不要太爽！<br>   &emsp;&emsp;项目推进过程中，我们内部却因为公司这段时间运营的还不错，开始在股份分配方面产生了分歧，最后没有谈拢，郭选择离开，并且带走了之前她接的山东和内蒙的项目，向我们支付了一些劳动报酬。其中是非对错我不想过多描述。<br>   &emsp;&emsp;余这段时间也拿到了一个pos机相关的项目，由于pos机也是新型的android系统，技术选型还是定为Ionic，我也买了人生中第一本mac；虽然有项目在做，但是我们团队当时确实也感到了创业的艰难，于是项目做完之后，至7月底，我们团队整体就进入了元银国际。</p>   <blockquote><p>关键词：元银国际；直播；react-native；</p></blockquote><p>   &emsp;&emsp;进入元银国际之后开始了第一个项目就是以直播为主题的app，由于之前用的Ionic在性能上的问题还是很大，于是当时就在技术选型上商议了很久，最终定为react-native，然而我和晋当时都没有这方面的开发经验，于是就开始了边学边做的开发过程。开发过程中，困难重重也受益良多。</p><p>   &emsp;&emsp;这一年过的很快，在技术方面，从java转向了nodejs，然后自学了react-native，也开发了两个上架的app，近期目标是学习android原生开发，不断丰富完善自己的技术栈。向着全栈前进！！！</p>   <img src="http://og3zicoi5.bkt.clouddn.com/neimeng" title="[蓝天，白云 [内蒙]]">]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 又是一年 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
